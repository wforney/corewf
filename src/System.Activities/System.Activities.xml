<?xml version="1.0"?>
<doc>
    <assembly>
        <name>System.Activities</name>
    </assembly>
    <members>
        <member name="T:System.Activities.Activity">
            <summary>
            The Activity class.
            </summary>
        </member>
        <member name="T:System.Activities.Activity.CacheStates">
            <summary>
            The CacheStates enumeration.
            </summary>
        </member>
        <member name="F:System.Activities.Activity.CacheStates.Uncached">
            <summary>
            We don't have valid cached data
            </summary>
        </member>
        <member name="F:System.Activities.Activity.CacheStates.Partial">
            <summary>
            The activity has its own metadata cached, or private implementation are skipped
            </summary>
        </member>
        <member name="F:System.Activities.Activity.CacheStates.Full">
            <summary>
            The activity has its own metadata and its private implementation cached
            We can make use of the roll-up metadata (like SubtreeHasConstraints).
            </summary>
        </member>
        <member name="F:System.Activities.Activity.CacheStates.RuntimeReady">
            <summary>
            The cached data is ready for runtime use
            </summary>
        </member>
        <member name="F:System.Activities.Activity.EmptyConstraints">
            <summary>
            The empty constraints
            </summary>
        </member>
        <member name="F:System.Activities.Activity.generatedArgumentPrefix">
            <summary>
            The generated argument prefix
            </summary>
        </member>
        <member name="F:System.Activities.Activity.emptyArguments">
            <summary>
            The empty arguments
            </summary>
        </member>
        <member name="F:System.Activities.Activity.emptyChildren">
            <summary>
            The empty children
            </summary>
        </member>
        <member name="F:System.Activities.Activity.emptyDelegates">
            <summary>
            The empty delegates
            </summary>
        </member>
        <member name="F:System.Activities.Activity.emptyVariables">
            <summary>
            The empty variables
            </summary>
        </member>
        <member name="F:System.Activities.Activity.nextCacheId">
            <summary>
            The next cache identifier
            </summary>
        </member>
        <member name="F:System.Activities.Activity.constraints">
            <summary>
            The constraints
            </summary>
        </member>
        <member name="F:System.Activities.Activity.displayName">
            <summary>
            The display name
            </summary>
        </member>
        <member name="F:System.Activities.Activity.id">
            <summary>
            The identifier
            </summary>
        </member>
        <member name="F:System.Activities.Activity.isDisplayNameSet">
            <summary>
            The is display name set
            </summary>
        </member>
        <member name="F:System.Activities.Activity.isMetadataCached">
            <summary>
            For a given cacheId this tells us whether we've called InternalCacheMetadata yet or not
            </summary>
        </member>
        <member name="F:System.Activities.Activity.isSubtreeEmpty">
            <summary>
            The is subtree empty
            </summary>
        </member>
        <member name="F:System.Activities.Activity.qualifiedId">
            <summary>
            The qualified identifier
            </summary>
        </member>
        <member name="F:System.Activities.Activity.rootProperties">
            <summary>
            The root properties
            </summary>
        </member>
        <member name="F:System.Activities.Activity.runtimeImplementation">
            <summary>
            The runtime implementation
            </summary>
        </member>
        <member name="F:System.Activities.Activity.tempAutoGeneratedArguments">
            <summary>
            The temporary automatic generated arguments
            </summary>
        </member>
        <member name="F:System.Activities.Activity.tempValidationErrors">
            <summary>
            The temporary validation errors
            </summary>
        </member>
        <member name="M:System.Activities.Activity.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Activities.Activity" /> class.
            </summary>
            <remarks>alternatives are extended through DynamicActivity, CodeActivity, and NativeActivity</remarks>
        </member>
        <member name="P:System.Activities.Activity.DisplayName">
            <summary>
            Gets or sets the display name.
            </summary>
            <value>The display name.</value>
        </member>
        <member name="P:System.Activities.Activity.HostEnvironment">
            <summary>
            Gets the host environment.
            </summary>
            <value>The host environment.</value>
        </member>
        <member name="P:System.Activities.Activity.Id">
            <summary>
            Gets the identifier.
            </summary>
            <value>The identifier.</value>
        </member>
        <member name="P:System.Activities.Activity.Implementation">
            <summary>
            Gets or sets the implementation.
            </summary>
            <value>The implementation.</value>
        </member>
        <member name="P:System.Activities.Activity.Children">
            <summary>
            Gets the children.
            </summary>
            <value>The children.</value>
        </member>
        <member name="P:System.Activities.Activity.DefaultExtensionsCount">
            <summary>
            Gets the default extensions count.
            </summary>
            <value>The default extensions count.</value>
        </member>
        <member name="P:System.Activities.Activity.Delegates">
            <summary>
            Gets the delegates.
            </summary>
            <value>The delegates.</value>
        </member>
        <member name="P:System.Activities.Activity.EquivalenceInfo">
            <summary>
            Gets or sets the equivalence information.
            </summary>
            <value>The equivalence information.</value>
        </member>
        <member name="P:System.Activities.Activity.HandlerOf">
            <summary>
            Gets the handler of.
            </summary>
            <value>The handler of.</value>
        </member>
        <member name="P:System.Activities.Activity.HasBeenAssociatedWithAnInstance">
            <summary>
            Gets or sets a value indicating whether this instance has been associated with an instance.
            </summary>
            <value>
            <c>true</c> if this instance has been associated with an instance; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:System.Activities.Activity.HasNonEmptySubtree">
            <summary>
            Gets a value indicating whether this instance has non empty subtree.
            </summary>
            <value><c>true</c> if this instance has non empty subtree; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:System.Activities.Activity.HasStartedCachingMetadata">
            <summary>
            Gets a value indicating whether this instance has started caching metadata.
            </summary>
            <value><c>true</c> if this instance has started caching metadata; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:System.Activities.Activity.HasTempViolations">
            <summary>
            Gets a value indicating whether this instance has temporary violations.
            </summary>
            <value><c>true</c> if this instance has temporary violations; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:System.Activities.Activity.ImplementationChildren">
            <summary>
            Gets the implementation children.
            </summary>
            <value>The implementation children.</value>
        </member>
        <member name="P:System.Activities.Activity.ImplementationDelegates">
            <summary>
            Gets the implementation delegates.
            </summary>
            <value>The implementation delegates.</value>
        </member>
        <member name="P:System.Activities.Activity.ImplementationEnvironment">
            <summary>
            Gets or sets the implementation environment.
            </summary>
            <value>The implementation environment.</value>
        </member>
        <member name="P:System.Activities.Activity.ImplementationVariables">
            <summary>
            Gets the implementation variables.
            </summary>
            <value>The implementation variables.</value>
        </member>
        <member name="P:System.Activities.Activity.ImportedChildren">
            <summary>
            Gets the imported children.
            </summary>
            <value>The imported children.</value>
        </member>
        <member name="P:System.Activities.Activity.ImportedDelegates">
            <summary>
            Gets the imported delegates.
            </summary>
            <value>The imported delegates.</value>
        </member>
        <member name="P:System.Activities.Activity.InternalCanInduceIdle">
            <summary>
            Gets a value indicating whether [internal can induce idle].
            </summary>
            <value><c>true</c> if [internal can induce idle]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:System.Activities.Activity.InternalId">
            <summary>
            Gets or sets the internal identifier.
            </summary>
            <value>The internal identifier.</value>
        </member>
        <member name="P:System.Activities.Activity.IsActivityWithResult">
            <summary>
            Gets a value indicating whether this instance is activity with result.
            </summary>
            <value><c>true</c> if this instance is activity with result; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:System.Activities.Activity.IsExpressionRoot">
            <summary>
            Gets a value indicating whether this instance is expression root.
            </summary>
            <value><c>true</c> if this instance is expression root; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:System.Activities.Activity.IsFastPath">
            <summary>
            Gets a value indicating whether this instance is fast path.
            </summary>
            <value><c>true</c> if this instance is fast path; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:System.Activities.Activity.IsMetadataCached">
            <summary>
            Gets a value indicating whether this instance is metadata cached.
            </summary>
            <value><c>true</c> if this instance is metadata cached; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:System.Activities.Activity.IsMetadataFullyCached">
            <summary>
            Gets a value indicating whether this instance is metadata fully cached.
            </summary>
            <value><c>true</c> if this instance is metadata fully cached; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:System.Activities.Activity.IsRuntimeReady">
            <summary>
            Gets a value indicating whether this instance is runtime ready.
            </summary>
            <value><c>true</c> if this instance is runtime ready; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:System.Activities.Activity.MemberOf">
            <summary>
            Gets or sets the member of.
            </summary>
            <value>The member of.</value>
        </member>
        <member name="P:System.Activities.Activity.Origin">
            <summary>
            Gets or sets the origin.
            </summary>
            <value>The origin.</value>
        </member>
        <member name="P:System.Activities.Activity.OverloadGroups">
            <summary>
            Gets or sets the overload groups.
            </summary>
            <value>The overload groups.</value>
        </member>
        <member name="P:System.Activities.Activity.Parent">
            <summary>
            Gets the parent.
            </summary>
            <value>The parent.</value>
        </member>
        <member name="P:System.Activities.Activity.ParentOf">
            <summary>
            Gets or sets the parent of.
            </summary>
            <value>The parent of.</value>
        </member>
        <member name="P:System.Activities.Activity.PublicEnvironment">
            <summary>
            Gets or sets the public environment.
            </summary>
            <value>The public environment.</value>
        </member>
        <member name="P:System.Activities.Activity.QualifiedId">
            <summary>
            Gets the qualified identifier.
            </summary>
            <value>The qualified identifier.</value>
        </member>
        <member name="P:System.Activities.Activity.RelationshipToParent">
            <summary>
            Gets the relationship to parent.
            </summary>
            <value>The relationship to parent.</value>
        </member>
        <member name="P:System.Activities.Activity.RequiredArgumentsNotInOverloadGroups">
            <summary>
            Gets or sets the required arguments not in overload groups.
            </summary>
            <value>The required arguments not in overload groups.</value>
        </member>
        <member name="P:System.Activities.Activity.RequiredExtensionTypesCount">
            <summary>
            Gets the required extension types count.
            </summary>
            <value>The required extension types count.</value>
        </member>
        <member name="P:System.Activities.Activity.RootActivity">
            <summary>
            Gets the root activity.
            </summary>
            <value>The root activity.</value>
        </member>
        <member name="P:System.Activities.Activity.RuntimeArguments">
            <summary>
            Gets the runtime arguments.
            </summary>
            <value>The runtime arguments.</value>
        </member>
        <member name="P:System.Activities.Activity.RuntimeConstraints">
            <summary>
            Gets the runtime constraints.
            </summary>
            <value>The runtime constraints.</value>
        </member>
        <member name="P:System.Activities.Activity.RuntimeVariables">
            <summary>
            Gets the runtime variables.
            </summary>
            <value>The runtime variables.</value>
        </member>
        <member name="P:System.Activities.Activity.SkipArgumentResolution">
            <summary>
            Gets or sets a value indicating whether [skip argument resolution].
            </summary>
            <value><c>true</c> if [skip argument resolution]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:System.Activities.Activity.SymbolCount">
            <summary>
            Gets the symbol count.
            </summary>
            <value>The symbol count.</value>
        </member>
        <member name="P:System.Activities.Activity.ThisLock">
            <summary>
            Gets the this lock.
            </summary>
            <value>The this lock.</value>
        </member>
        <member name="P:System.Activities.Activity.UseOldFastPath">
            <summary>
            Gets or sets a value indicating whether [use old fast path].
            </summary>
            <value><c>true</c> if [use old fast path]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:System.Activities.Activity.CacheId">
            <summary>
            Gets the cache identifier.
            </summary>
            <value>The cache identifier.</value>
        </member>
        <member name="P:System.Activities.Activity.ImplementationVersion">
            <summary>
            Gets or sets the implementation version.
            </summary>
            <value>The implementation version.</value>
        </member>
        <member name="P:System.Activities.Activity.Constraints">
            <summary>
            Gets the constraints.
            </summary>
            <value>The constraints.</value>
        </member>
        <member name="M:System.Activities.Activity.ShouldSerializeDisplayName">
            <summary>
            Shoulds the display name of the serialize.
            </summary>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:System.Activities.Activity.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="M:System.Activities.Activity.NullCheck``1(``0)">
            <summary>
            Nulls the check.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj">The object.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:System.Activities.Activity.AddArgument(System.Activities.RuntimeArgument,System.Boolean)">
            <summary>
            Adds the argument.
            </summary>
            <param name="argument">The argument.</param>
            <param name="createEmptyBindings">if set to <c>true</c> [create empty bindings].</param>
        </member>
        <member name="M:System.Activities.Activity.AddChild(System.Activities.Activity)">
            <summary>
            Adds the child.
            </summary>
            <param name="child">The child.</param>
        </member>
        <member name="M:System.Activities.Activity.AddDefaultExtensionProvider``1(System.Func{``0})">
            <summary>
            Adds the default extension provider.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="extensionProvider">The extension provider.</param>
        </member>
        <member name="M:System.Activities.Activity.AddDelegate(System.Activities.ActivityDelegate)">
            <summary>
            Adds the delegate.
            </summary>
            <param name="activityDelegate">The activity delegate.</param>
        </member>
        <member name="M:System.Activities.Activity.AddImplementationChild(System.Activities.Activity)">
            <summary>
            Adds the implementation child.
            </summary>
            <param name="implementationChild">The implementation child.</param>
        </member>
        <member name="M:System.Activities.Activity.AddImplementationDelegate(System.Activities.ActivityDelegate)">
            <summary>
            Adds the implementation delegate.
            </summary>
            <param name="implementationDelegate">The implementation delegate.</param>
        </member>
        <member name="M:System.Activities.Activity.AddImplementationVariable(System.Activities.Variable)">
            <summary>
            Adds the implementation variable.
            </summary>
            <param name="implementationVariable">The implementation variable.</param>
        </member>
        <member name="M:System.Activities.Activity.AddImportedChild(System.Activities.Activity)">
            <summary>
            Adds the imported child.
            </summary>
            <param name="importedChild">The imported child.</param>
        </member>
        <member name="M:System.Activities.Activity.AddImportedDelegate(System.Activities.ActivityDelegate)">
            <summary>
            Adds the imported delegate.
            </summary>
            <param name="importedDelegate">The imported delegate.</param>
        </member>
        <member name="M:System.Activities.Activity.AddTempAutoGeneratedArgument(System.Type,System.Activities.ArgumentDirection)">
            <summary>
            Adds the temporary automatic generated argument.
            </summary>
            <param name="argumentType">Type of the argument.</param>
            <param name="direction">The direction.</param>
            <returns>RuntimeArgument.</returns>
        </member>
        <member name="M:System.Activities.Activity.AddTempValidationError(System.Activities.Validation.ValidationError)">
            <summary>
            Adds the temporary validation error.
            </summary>
            <param name="validationError">The validation error.</param>
        </member>
        <member name="M:System.Activities.Activity.AddVariable(System.Activities.Variable)">
            <summary>
            Adds the variable.
            </summary>
            <param name="variable">The variable.</param>
        </member>
        <member name="M:System.Activities.Activity.CanBeScheduledBy(System.Activities.Activity)">
            <summary>
            Determines whether this instance [can be scheduled by] the specified parent.
            </summary>
            <param name="parent">The parent.</param>
            <returns>
            <c>true</c> if this instance [can be scheduled by] the specified parent; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:System.Activities.Activity.ClearCachedInformation">
            <summary>
            Clears the cached information.
            </summary>
        </member>
        <member name="M:System.Activities.Activity.ClearIdInfo">
            <summary>
            Clears the identifier information.
            </summary>
        </member>
        <member name="M:System.Activities.Activity.DeclareSingletonActivity(System.String,System.Activities.Activity)">
            <summary>
            Declares the singleton activity.
            </summary>
            <param name="name">The name.</param>
            <param name="activity">The activity.</param>
        </member>
        <member name="M:System.Activities.Activity.GetActivityExtensionInformation(System.Collections.Generic.Dictionary{System.Type,System.Activities.Hosting.WorkflowInstanceExtensionProvider}@,System.Collections.Generic.HashSet{System.Type}@)">
            <summary>
            Gets the activity extension information.
            </summary>
            <param name="activityExtensionProviders">The activity extension providers.</param>
            <param name="requiredActivityExtensionTypes">The required activity extension types.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:System.Activities.Activity.GetParentEnvironment">
            <summary>
            Gets the parent environment.
            </summary>
            <returns>LocationReferenceEnvironment.</returns>
        </member>
        <member name="M:System.Activities.Activity.GetSingletonActivity(System.String)">
            <summary>
            Gets the singleton activity.
            </summary>
            <param name="name">The name.</param>
            <returns>Activity.</returns>
        </member>
        <member name="M:System.Activities.Activity.InitializeAsRoot(System.Activities.LocationReferenceEnvironment)">
            <summary>
            Initializes as root.
            </summary>
            <param name="hostEnvironment">The host environment.</param>
        </member>
        <member name="M:System.Activities.Activity.InitializeRelationship(System.Activities.ActivityDelegate,System.Activities.ActivityCollectionType,System.Collections.Generic.IList{System.Activities.Validation.ValidationError}@)">
            <summary>
            Initializes the relationship.
            </summary>
            <param name="activityDelegate">The activity delegate.</param>
            <param name="collectionType">Type of the collection.</param>
            <param name="validationErrors">The validation errors.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:System.Activities.Activity.InitializeRelationship(System.Activities.RuntimeArgument,System.Collections.Generic.IList{System.Activities.Validation.ValidationError}@)">
            <summary>
            Initializes the relationship.
            </summary>
            <param name="argument">The argument.</param>
            <param name="validationErrors">The validation errors.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:System.Activities.Activity.InitializeRelationship(System.Activities.Variable,System.Boolean,System.Collections.Generic.IList{System.Activities.Validation.ValidationError}@)">
            <summary>
            Initializes the relationship.
            </summary>
            <param name="variable">The variable.</param>
            <param name="isPublic">if set to <c>true</c> [is public].</param>
            <param name="validationErrors">The validation errors.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:System.Activities.Activity.InitializeRelationship(System.Activities.Activity,System.Activities.ActivityCollectionType,System.Collections.Generic.IList{System.Activities.Validation.ValidationError}@)">
            <summary>
            Initializes the relationship.
            </summary>
            <param name="parent">The parent.</param>
            <param name="collectionType">Type of the collection.</param>
            <param name="validationErrors">The validation errors.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:System.Activities.Activity.InternalAbort(System.Activities.ActivityInstance,System.Activities.Runtime.ActivityExecutor,System.Exception)">
            <summary>
            subclasses are responsible for creating/disposing the necessary contexts
            </summary>
            <param name="instance">The instance.</param>
            <param name="executor">The executor.</param>
            <param name="terminationReason">The termination reason.</param>
        </member>
        <member name="M:System.Activities.Activity.InternalCacheMetadata(System.Boolean,System.Collections.Generic.IList{System.Activities.Validation.ValidationError}@)">
            <summary>
            Internals the cache metadata.
            </summary>
            <param name="createEmptyBindings">if set to <c>true</c> [create empty bindings].</param>
            <param name="validationErrors">The validation errors.</param>
        </member>
        <member name="M:System.Activities.Activity.InternalCancel(System.Activities.ActivityInstance,System.Activities.Runtime.ActivityExecutor,System.Activities.Runtime.BookmarkManager)">
            <summary>
            Internals the cancel.
            </summary>
            <param name="instance">The instance.</param>
            <param name="executor">The executor.</param>
            <param name="bookmarkManager">The bookmark manager.</param>
        </member>
        <member name="M:System.Activities.Activity.InternalExecute(System.Activities.ActivityInstance,System.Activities.Runtime.ActivityExecutor,System.Activities.Runtime.BookmarkManager)">
            <summary>
            subclasses are responsible for creating/disposing the necessary contexts
            </summary>
            <param name="instance">The instance.</param>
            <param name="executor">The executor.</param>
            <param name="bookmarkManager">The bookmark manager.</param>
        </member>
        <member name="M:System.Activities.Activity.InternalGetConstraints">
            <summary>
            Internals the get constraints.
            </summary>
            <returns>IList&lt;Constraint&gt;.</returns>
        </member>
        <member name="M:System.Activities.Activity.IsResultArgument(System.Activities.RuntimeArgument)">
            <summary>
            Determines whether [is result argument] [the specified argument].
            </summary>
            <param name="argument">The argument.</param>
            <returns>
            <c>true</c> if [is result argument] [the specified argument]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:System.Activities.Activity.IsSingletonActivityDeclared(System.String)">
            <summary>
            Determines whether [is singleton activity declared] [the specified name].
            </summary>
            <param name="name">The name.</param>
            <returns>
            <c>true</c> if [is singleton activity declared] [the specified name]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:System.Activities.Activity.OnInternalCacheMetadata(System.Boolean)">
            <summary>
            Called when [internal cache metadata].
            </summary>
            <param name="createEmptyBindings">if set to <c>true</c> [create empty bindings].</param>
        </member>
        <member name="M:System.Activities.Activity.OnInternalCreateDynamicUpdateMap(System.Activities.DynamicUpdate.DynamicUpdateMapBuilder.Finalizer,System.Activities.DynamicUpdate.DynamicUpdateMapBuilder.IDefinitionMatcher,System.Activities.Activity)">
            <summary>
            Called when [internal create dynamic update map].
            </summary>
            <param name="finalizer">The finalizer.</param>
            <param name="matcher">The matcher.</param>
            <param name="originalActivity">The original activity.</param>
        </member>
        <member name="M:System.Activities.Activity.RequireExtension(System.Type)">
            <summary>
            Requires the extension.
            </summary>
            <param name="extensionType">Type of the extension.</param>
        </member>
        <member name="M:System.Activities.Activity.ResetTempAutoGeneratedArguments">
            <summary>
            Resets the temporary automatic generated arguments.
            </summary>
        </member>
        <member name="M:System.Activities.Activity.SetArgumentsCollection(System.Collections.ObjectModel.Collection{System.Activities.RuntimeArgument},System.Boolean)">
            <summary>
            Sets the arguments collection.
            </summary>
            <param name="arguments">The arguments.</param>
            <param name="createEmptyBindings">if set to <c>true</c> [create empty bindings].</param>
        </member>
        <member name="M:System.Activities.Activity.SetCached(System.Boolean)">
            <summary>
            Sets the cached.
            </summary>
            <param name="isSkippingPrivateChildren">
            if set to <c>true</c> [is skipping private children].
            </param>
        </member>
        <member name="M:System.Activities.Activity.SetChildrenCollection(System.Collections.ObjectModel.Collection{System.Activities.Activity})">
            <summary>
            Sets the children collection.
            </summary>
            <param name="children">The children.</param>
        </member>
        <member name="M:System.Activities.Activity.SetDelegatesCollection(System.Collections.ObjectModel.Collection{System.Activities.ActivityDelegate})">
            <summary>
            Sets the delegates collection.
            </summary>
            <param name="delegates">The delegates.</param>
        </member>
        <member name="M:System.Activities.Activity.SetImplementationChildrenCollection(System.Collections.ObjectModel.Collection{System.Activities.Activity})">
            <summary>
            Sets the implementation children collection.
            </summary>
            <param name="implementationChildren">The implementation children.</param>
        </member>
        <member name="M:System.Activities.Activity.SetImplementationDelegatesCollection(System.Collections.ObjectModel.Collection{System.Activities.ActivityDelegate})">
            <summary>
            Sets the implementation delegates collection.
            </summary>
            <param name="implementationDelegates">The implementation delegates.</param>
        </member>
        <member name="M:System.Activities.Activity.SetImplementationVariablesCollection(System.Collections.ObjectModel.Collection{System.Activities.Variable})">
            <summary>
            Sets the implementation variables collection.
            </summary>
            <param name="implementationVariables">The implementation variables.</param>
        </member>
        <member name="M:System.Activities.Activity.SetImportedChildrenCollection(System.Collections.ObjectModel.Collection{System.Activities.Activity})">
            <summary>
            Sets the imported children collection.
            </summary>
            <param name="importedChildren">The imported children.</param>
        </member>
        <member name="M:System.Activities.Activity.SetImportedDelegatesCollection(System.Collections.ObjectModel.Collection{System.Activities.ActivityDelegate})">
            <summary>
            Sets the imported delegates collection.
            </summary>
            <param name="importedDelegates">The imported delegates.</param>
        </member>
        <member name="M:System.Activities.Activity.SetRuntimeReady">
            <summary>
            Sets the runtime ready.
            </summary>
        </member>
        <member name="M:System.Activities.Activity.SetTempValidationErrorCollection(System.Collections.Generic.IList{System.Activities.Validation.ValidationError})">
            <summary>
            Sets the temporary validation error collection.
            </summary>
            <param name="validationErrors">The validation errors.</param>
        </member>
        <member name="M:System.Activities.Activity.SetVariablesCollection(System.Collections.ObjectModel.Collection{System.Activities.Variable})">
            <summary>
            Sets the variables collection.
            </summary>
            <param name="variables">The variables.</param>
        </member>
        <member name="M:System.Activities.Activity.TransferTempValidationErrors(System.Collections.Generic.IList{System.Activities.Validation.ValidationError}@)">
            <summary>
            Transfers the temporary validation errors.
            </summary>
            <param name="newList">The new list.</param>
        </member>
        <member name="M:System.Activities.Activity.CacheMetadata(System.Activities.ActivityMetadata)">
            <summary>
            Caches the metadata.
            </summary>
            <param name="metadata">The metadata.</param>
        </member>
        <member name="M:System.Activities.Activity.OnCreateDynamicUpdateMap(System.Activities.DynamicUpdate.UpdateMapMetadata,System.Activities.Activity)">
            <summary>
            Called when [create dynamic update map].
            </summary>
            <param name="metadata">The metadata.</param>
            <param name="originalActivity">The original activity.</param>
        </member>
        <member name="M:System.Activities.Activity.ClearCachedMetadata">
            <summary>
            Clears the cached metadata.
            </summary>
        </member>
        <member name="M:System.Activities.Activity.InitializeRelationship(System.Activities.Activity,System.Boolean,System.Activities.Activity.RelationshipType,System.Collections.Generic.IList{System.Activities.Validation.ValidationError}@)">
            <summary>
            Initializes the relationship.
            </summary>
            <param name="parent">The parent.</param>
            <param name="isPublic">if set to <c>true</c> [is public].</param>
            <param name="relationship">The relationship.</param>
            <param name="validationErrors">The validation errors.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:System.Activities.Activity.RootProperties">
            <summary>
            The RootProperties class.
            </summary>
            <remarks>information used by root activities</remarks>
        </member>
        <member name="F:System.Activities.Activity.RootProperties.activityExtensionProviders">
            <summary>
            The activity extension providers
            </summary>
        </member>
        <member name="F:System.Activities.Activity.RootProperties.requiredExtensionTypes">
            <summary>
            The required extension types
            </summary>
        </member>
        <member name="F:System.Activities.Activity.RootProperties.singletonActivityNames">
            <summary>
            The singleton activity names
            </summary>
        </member>
        <member name="M:System.Activities.Activity.RootProperties.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Activities.Activity.RootProperties" /> class.
            </summary>
        </member>
        <member name="P:System.Activities.Activity.RootProperties.DefaultExtensionsCount">
            <summary>
            Gets the default extensions count.
            </summary>
            <value>The default extensions count.</value>
        </member>
        <member name="P:System.Activities.Activity.RootProperties.EquivalenceInfo">
            <summary>
            Gets or sets the equivalence information.
            </summary>
            <value>The equivalence information.</value>
        </member>
        <member name="P:System.Activities.Activity.RootProperties.HasBeenAssociatedWithAnInstance">
            <summary>
            Gets or sets a value indicating whether this instance has been associated with an instance.
            </summary>
            <value>
            <c>true</c> if this instance has been associated with an instance; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:System.Activities.Activity.RootProperties.HostEnvironment">
            <summary>
            Gets or sets the host environment.
            </summary>
            <value>The host environment.</value>
        </member>
        <member name="P:System.Activities.Activity.RootProperties.OverloadGroups">
            <summary>
            Gets or sets the overload groups.
            </summary>
            <value>The overload groups.</value>
        </member>
        <member name="P:System.Activities.Activity.RootProperties.RequiredArgumentsNotInOverloadGroups">
            <summary>
            Gets or sets the required arguments not in overload groups.
            </summary>
            <value>The required arguments not in overload groups.</value>
        </member>
        <member name="P:System.Activities.Activity.RootProperties.RequiredExtensionTypesCount">
            <summary>
            Gets the required extension types count.
            </summary>
            <value>The required extension types count.</value>
        </member>
        <member name="M:System.Activities.Activity.RootProperties.AddDefaultExtensionProvider``1(System.Func{``0})">
            <summary>
            Adds the default extension provider.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="extensionProvider">The extension provider.</param>
        </member>
        <member name="M:System.Activities.Activity.RootProperties.DeclareSingletonActivity(System.String,System.Activities.Activity)">
            <summary>
            Declares the singleton activity.
            </summary>
            <param name="name">The name.</param>
            <param name="activity">The activity.</param>
        </member>
        <member name="M:System.Activities.Activity.RootProperties.GetActivityExtensionInformation(System.Collections.Generic.Dictionary{System.Type,System.Activities.Hosting.WorkflowInstanceExtensionProvider}@,System.Collections.Generic.HashSet{System.Type}@)">
            <summary>
            Gets the activity extension information.
            </summary>
            <param name="activityExtensionProviders">The activity extension providers.</param>
            <param name="requiredActivityExtensionTypes">The required activity extension types.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:System.Activities.Activity.RootProperties.GetSingletonActivity(System.String)">
            <summary>
            Gets the singleton activity.
            </summary>
            <param name="name">The name.</param>
            <returns>Activity.</returns>
        </member>
        <member name="M:System.Activities.Activity.RootProperties.IsSingletonActivityDeclared(System.String)">
            <summary>
            Determines whether [is singleton activity declared] [the specified name].
            </summary>
            <param name="name">The name.</param>
            <returns>
            <c>true</c> if [is singleton activity declared] [the specified name]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:System.Activities.Activity.RootProperties.RequireExtension(System.Type)">
            <summary>
            Requires the extension.
            </summary>
            <param name="extensionType">Type of the extension.</param>
        </member>
        <member name="T:System.Activities.Activity.ReflectedInformation">
            <summary>
            The ReflectedInformation class.
            </summary>
        </member>
        <member name="F:System.Activities.Activity.ReflectedInformation.parent">
            <summary>
            The parent
            </summary>
        </member>
        <member name="F:System.Activities.Activity.ReflectedInformation.arguments">
            <summary>
            The arguments
            </summary>
        </member>
        <member name="F:System.Activities.Activity.ReflectedInformation.variables">
            <summary>
            The variables
            </summary>
        </member>
        <member name="F:System.Activities.Activity.ReflectedInformation.children">
            <summary>
            The children
            </summary>
        </member>
        <member name="F:System.Activities.Activity.ReflectedInformation.delegates">
            <summary>
            The delegates
            </summary>
        </member>
        <member name="F:System.Activities.Activity.ReflectedInformation.DictionaryArgumentHelperType">
            <summary>
            The dictionary argument helper type
            </summary>
        </member>
        <member name="F:System.Activities.Activity.ReflectedInformation.OverloadGroupAttributeType">
            <summary>
            The overload group attribute type
            </summary>
        </member>
        <member name="M:System.Activities.Activity.ReflectedInformation.#ctor(System.Activities.Activity)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Activities.Activity.ReflectedInformation" /> class.
            </summary>
            <param name="owner">The owner.</param>
        </member>
        <member name="M:System.Activities.Activity.ReflectedInformation.#ctor(System.Activities.Activity,System.Activities.Activity.ReflectedInformation.ReflectedType)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Activities.Activity.ReflectedInformation" /> class.
            </summary>
            <param name="activity">The activity.</param>
            <param name="reflectType">Type of the reflect.</param>
        </member>
        <member name="M:System.Activities.Activity.ReflectedInformation.GetArguments(System.Activities.Activity)">
            <summary>
            Gets the arguments.
            </summary>
            <param name="parent">The parent.</param>
            <returns>Collection&lt;RuntimeArgument&gt;.</returns>
        </member>
        <member name="M:System.Activities.Activity.ReflectedInformation.GetVariables(System.Activities.Activity)">
            <summary>
            Gets the variables.
            </summary>
            <param name="parent">The parent.</param>
            <returns>Collection&lt;Variable&gt;.</returns>
        </member>
        <member name="M:System.Activities.Activity.ReflectedInformation.GetChildren(System.Activities.Activity)">
            <summary>
            Gets the children.
            </summary>
            <param name="parent">The parent.</param>
            <returns>Collection&lt;Activity&gt;.</returns>
        </member>
        <member name="M:System.Activities.Activity.ReflectedInformation.GetDelegates(System.Activities.Activity)">
            <summary>
            Gets the delegates.
            </summary>
            <param name="parent">The parent.</param>
            <returns>Collection&lt;ActivityDelegate&gt;.</returns>
        </member>
        <member name="M:System.Activities.Activity.ReflectedInformation.GetArguments">
            <summary>
            Gets the arguments.
            </summary>
            <returns>Collection&lt;RuntimeArgument&gt;.</returns>
        </member>
        <member name="M:System.Activities.Activity.ReflectedInformation.GetVariables">
            <summary>
            Gets the variables.
            </summary>
            <returns>Collection&lt;Variable&gt;.</returns>
        </member>
        <member name="M:System.Activities.Activity.ReflectedInformation.GetChildren">
            <summary>
            Gets the children.
            </summary>
            <returns>Collection&lt;Activity&gt;.</returns>
        </member>
        <member name="M:System.Activities.Activity.ReflectedInformation.GetDelegates">
            <summary>
            Gets the delegates.
            </summary>
            <returns>Collection&lt;ActivityDelegate&gt;.</returns>
        </member>
        <member name="M:System.Activities.Activity.ReflectedInformation.AddCollection``1(System.Collections.ObjectModel.Collection{``0}@,System.Collections.IEnumerable)">
            <summary>
            Adds the collection.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list">The list.</param>
            <param name="enumerable">The enumerable.</param>
        </member>
        <member name="M:System.Activities.Activity.ReflectedInformation.Add``1(System.Collections.ObjectModel.Collection{``0}@,``0)">
            <summary>
            Adds the specified list.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list">The list.</param>
            <param name="data">The data.</param>
        </member>
        <member name="M:System.Activities.Activity.ReflectedInformation.GetIsArgumentRequired(System.ComponentModel.PropertyDescriptor)">
            <summary>
            Gets the is argument required.
            </summary>
            <param name="propertyDescriptor">The property descriptor.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:System.Activities.Activity.ReflectedInformation.GetOverloadGroupNames(System.ComponentModel.PropertyDescriptor)">
            <summary>
            Gets the overload group names.
            </summary>
            <param name="propertyDescriptor">The property descriptor.</param>
            <returns>List&lt;System.String&gt;.</returns>
        </member>
        <member name="T:System.Activities.Activity.ReflectedInformation.DictionaryArgumentHelper`1">
            <summary>
            The DictionaryArgumentHelper class.
            Implements the <see cref="T:System.Activities.Activity.ReflectedInformation.DictionaryArgumentHelper" />
            </summary>
            <typeparam name="T"></typeparam>
            <seealso cref="T:System.Activities.Activity.ReflectedInformation.DictionaryArgumentHelper" />
        </member>
        <member name="M:System.Activities.Activity.ReflectedInformation.DictionaryArgumentHelper`1.#ctor(System.Object,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Activities.Activity.ReflectedInformation.DictionaryArgumentHelper`1" /> class.
            </summary>
            <param name="propertyValue">The property value.</param>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="T:System.Activities.Activity.ReflectedInformation.DictionaryArgumentHelper">
            <summary>
            The DictionaryArgumentHelper class.
            </summary>
        </member>
        <member name="M:System.Activities.Activity.ReflectedInformation.DictionaryArgumentHelper.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Activities.Activity.ReflectedInformation.DictionaryArgumentHelper" /> class.
            </summary>
        </member>
        <member name="P:System.Activities.Activity.ReflectedInformation.DictionaryArgumentHelper.RuntimeArguments">
            <summary>
            Gets or sets the runtime arguments.
            </summary>
            <value>The runtime arguments.</value>
        </member>
        <member name="M:System.Activities.Activity.ReflectedInformation.DictionaryArgumentHelper.TryGetRuntimeArguments(System.Object,System.String)">
            <summary>
            Tries the get runtime arguments.
            </summary>
            <param name="propertyValue">The property value.</param>
            <param name="propertyName">Name of the property.</param>
            <returns>IList&lt;RuntimeArgument&gt;.</returns>
        </member>
        <member name="M:System.Activities.Activity.ReflectedInformation.DictionaryArgumentHelper.GetRuntimeArguments``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,``0}},System.String)">
            <summary>
            Gets the runtime arguments.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="argumentDictionary">The argument dictionary.</param>
            <param name="propertyName">Name of the property.</param>
            <returns>IList&lt;RuntimeArgument&gt;.</returns>
            <exception cref="T:System.Activities.ValidationException">
            </exception>
        </member>
        <member name="T:System.Activities.Activity.ReflectedInformation.ReflectedType">
            <summary>
            The ReflectedType enumeration.
            </summary>
        </member>
        <member name="F:System.Activities.Activity.ReflectedInformation.ReflectedType.Argument">
            <summary>
            The argument
            </summary>
        </member>
        <member name="F:System.Activities.Activity.ReflectedInformation.ReflectedType.Variable">
            <summary>
            The variable
            </summary>
        </member>
        <member name="F:System.Activities.Activity.ReflectedInformation.ReflectedType.Child">
            <summary>
            The child
            </summary>
        </member>
        <member name="F:System.Activities.Activity.ReflectedInformation.ReflectedType.ActivityDelegate">
            <summary>
            The activity delegate
            </summary>
        </member>
        <member name="F:System.Activities.Activity.ReflectedInformation.ReflectedType.All">
            <summary>
            All
            </summary>
        </member>
        <member name="T:System.Activities.Activity.RelationshipType">
            <summary>
            The RelationshipType enumeration.
            </summary>
        </member>
        <member name="F:System.Activities.Activity.RelationshipType.Child">
            <summary>
            The child
            </summary>
        </member>
        <member name="F:System.Activities.Activity.RelationshipType.ImportedChild">
            <summary>
            The imported child
            </summary>
        </member>
        <member name="F:System.Activities.Activity.RelationshipType.ImplementationChild">
            <summary>
            The implementation child
            </summary>
        </member>
        <member name="F:System.Activities.Activity.RelationshipType.DelegateHandler">
            <summary>
            The delegate handler
            </summary>
        </member>
        <member name="F:System.Activities.Activity.RelationshipType.ArgumentExpression">
            <summary>
            The argument expression
            </summary>
        </member>
        <member name="F:System.Activities.Activity.RelationshipType.VariableDefault">
            <summary>
            The variable default
            </summary>
        </member>
        <member name="T:System.Activities.Activity`1">
            <summary>
            The Activity class. Implements the <see cref="T:System.Activities.ActivityWithResult" />
            </summary>
            <typeparam name="TResult">The type of the t result.</typeparam>
            <seealso cref="T:System.Activities.ActivityWithResult" />
        </member>
        <member name="M:System.Activities.Activity`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Activities.Activity`1" /> class.
            </summary>
        </member>
        <member name="P:System.Activities.Activity`1.Result">
            <summary>
            Gets or sets the result.
            </summary>
            <value>The result.</value>
        </member>
        <member name="P:System.Activities.Activity`1.InternalResultType">
            <summary>
            Gets the type of the internal result.
            </summary>
            <value>The type of the internal result.</value>
        </member>
        <member name="P:System.Activities.Activity`1.ResultCore">
            <summary>
            Gets or sets the result core.
            </summary>
            <value>The result core.</value>
        </member>
        <member name="M:System.Activities.Activity`1.FromValue(`0)">
            <summary>
            Froms the value.
            </summary>
            <param name="constValue">The constant value.</param>
            <returns>Activity&lt;TResult&gt;.</returns>
        </member>
        <member name="M:System.Activities.Activity`1.FromVariable(System.Activities.Variable)">
            <summary>
            Froms the variable.
            </summary>
            <param name="variable">The variable.</param>
            <returns>Activity&lt;TResult&gt;.</returns>
        </member>
        <member name="M:System.Activities.Activity`1.FromVariable(System.Activities.Variable{`0})">
            <summary>
            Froms the variable.
            </summary>
            <param name="variable">The variable.</param>
            <returns>Activity&lt;TResult&gt;.</returns>
        </member>
        <member name="M:System.Activities.Activity`1.op_Implicit(`0)~System.Activities.Activity{`0}">
            <summary>
            Performs an implicit conversion from <see cref="!:TResult" /> to <see
            cref="T:System.Activities.Activity`1" />.
            </summary>
            <param name="constValue">The constant value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:System.Activities.Activity`1.op_Implicit(System.Activities.Variable)~System.Activities.Activity{`0}">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Activities.Variable" /> to <see
            cref="T:System.Activities.Activity`1" />.
            </summary>
            <param name="variable">The variable.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:System.Activities.Activity`1.op_Implicit(System.Activities.Variable{`0})~System.Activities.Activity{`0}">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Activities.Variable`1" /> to <see
            cref="T:System.Activities.Activity`1" />.
            </summary>
            <param name="variable">The variable.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:System.Activities.Activity`1.InternalExecuteInResolutionContext(System.Activities.CodeActivityContext)">
            <summary>
            Internals the execute in resolution context.
            </summary>
            <param name="resolutionContext">The resolution context.</param>
            <returns>TResult.</returns>
        </member>
        <member name="M:System.Activities.Activity`1.InternalExecuteInResolutionContextUntyped(System.Activities.CodeActivityContext)">
            <summary>
            Internals the execute in resolution context untyped.
            </summary>
            <param name="resolutionContext">The resolution context.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:System.Activities.Activity`1.IsResultArgument(System.Activities.RuntimeArgument)">
            <summary>
            Determines whether [is result argument] [the specified argument].
            </summary>
            <param name="argument">The argument.</param>
            <returns>
            <c>true</c> if [is result argument] [the specified argument]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:System.Activities.Activity`1.OnInternalCacheMetadata(System.Boolean)">
            <summary>
            Called when [internal cache metadata].
            </summary>
            <param name="createEmptyBindings">if set to <c>true</c> [create empty bindings].</param>
        </member>
        <member name="M:System.Activities.Activity`1.OnInternalCacheMetadataExceptResult(System.Boolean)">
            <summary>
            Called when [internal cache metadata except result].
            </summary>
            <param name="createEmptyBindings">if set to <c>true</c> [create empty bindings].</param>
        </member>
        <member name="M:System.Activities.Activity`1.IsBoundArgumentCorrect(System.Activities.RuntimeArgument,System.Boolean)">
            <summary>
            Determines whether [is bound argument correct] [the specified argument].
            </summary>
            <param name="argument">The argument.</param>
            <param name="createEmptyBindings">if set to <c>true</c> [create empty bindings].</param>
            <returns>
            <c>true</c> if [is bound argument correct] [the specified argument]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:System.Activities.ActivityAction">
            <summary>
            The ActivityAction class. This class cannot be inherited.
            Implements the <see cref="T:System.Activities.ActivityDelegate" />
            </summary>
            <seealso cref="T:System.Activities.ActivityDelegate" />
        </member>
        <member name="F:System.Activities.ActivityAction.EmptyDelegateParameters">
            <summary>
            The empty delegate parameters
            </summary>
        </member>
        <member name="M:System.Activities.ActivityAction.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Activities.ActivityAction"/> class.
            </summary>
        </member>
        <member name="M:System.Activities.ActivityAction.InternalGetRuntimeDelegateArguments">
            <summary>
            Internals the get runtime delegate arguments.
            </summary>
            <returns>IList&lt;RuntimeDelegateArgument&gt;.</returns>
        </member>
        <member name="T:System.Activities.ActivityAction`1">
            <summary>
            The ActivityAction class. This class cannot be inherited.
            Implements the <see cref="T:System.Activities.ActivityDelegate" />
            </summary>
            <typeparam name="T"></typeparam>
            <seealso cref="T:System.Activities.ActivityDelegate" />
        </member>
        <member name="M:System.Activities.ActivityAction`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Activities.ActivityAction`1"/> class.
            </summary>
        </member>
        <member name="P:System.Activities.ActivityAction`1.Argument">
            <summary>
            Gets or sets the argument.
            </summary>
            <value>The argument.</value>
        </member>
        <member name="M:System.Activities.ActivityAction`1.InternalGetRuntimeDelegateArguments">
            <summary>
            Internals the get runtime delegate arguments.
            </summary>
            <returns>IList&lt;RuntimeDelegateArgument&gt;.</returns>
        </member>
        <member name="T:System.Activities.ActivityAction`2">
            <summary>
            The ActivityAction class. This class cannot be inherited.
            Implements the <see cref="T:System.Activities.ActivityDelegate" />
            </summary>
            <typeparam name="T1">The type of the t1.</typeparam>
            <typeparam name="T2">The type of the t2.</typeparam>
            <seealso cref="T:System.Activities.ActivityDelegate" />
        </member>
        <member name="M:System.Activities.ActivityAction`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Activities.ActivityAction`2"/> class.
            </summary>
        </member>
        <member name="P:System.Activities.ActivityAction`2.Argument1">
            <summary>
            Gets or sets the argument1.
            </summary>
            <value>The argument1.</value>
        </member>
        <member name="P:System.Activities.ActivityAction`2.Argument2">
            <summary>
            Gets or sets the argument2.
            </summary>
            <value>The argument2.</value>
        </member>
        <member name="M:System.Activities.ActivityAction`2.InternalGetRuntimeDelegateArguments">
            <summary>
            Internals the get runtime delegate arguments.
            </summary>
            <returns>IList&lt;RuntimeDelegateArgument&gt;.</returns>
        </member>
        <member name="T:System.Activities.ActivityAction`3">
            <summary>
            The ActivityAction class. This class cannot be inherited.
            Implements the <see cref="T:System.Activities.ActivityDelegate" />
            </summary>
            <typeparam name="T1">The type of the t1.</typeparam>
            <typeparam name="T2">The type of the t2.</typeparam>
            <typeparam name="T3">The type of the t3.</typeparam>
            <seealso cref="T:System.Activities.ActivityDelegate" />
        </member>
        <member name="M:System.Activities.ActivityAction`3.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Activities.ActivityAction`3"/> class.
            </summary>
        </member>
        <member name="P:System.Activities.ActivityAction`3.Argument1">
            <summary>
            Gets or sets the argument1.
            </summary>
            <value>The argument1.</value>
        </member>
        <member name="P:System.Activities.ActivityAction`3.Argument2">
            <summary>
            Gets or sets the argument2.
            </summary>
            <value>The argument2.</value>
        </member>
        <member name="P:System.Activities.ActivityAction`3.Argument3">
            <summary>
            Gets or sets the argument3.
            </summary>
            <value>The argument3.</value>
        </member>
        <member name="M:System.Activities.ActivityAction`3.InternalGetRuntimeDelegateArguments">
            <summary>
            Internals the get runtime delegate arguments.
            </summary>
            <returns>IList&lt;RuntimeDelegateArgument&gt;.</returns>
        </member>
        <member name="T:System.Activities.ActivityAction`4">
            <summary>
            The ActivityAction class. This class cannot be inherited.
            Implements the <see cref="T:System.Activities.ActivityDelegate" />
            </summary>
            <typeparam name="T1">The type of the t1.</typeparam>
            <typeparam name="T2">The type of the t2.</typeparam>
            <typeparam name="T3">The type of the t3.</typeparam>
            <typeparam name="T4">The type of the t4.</typeparam>
            <seealso cref="T:System.Activities.ActivityDelegate" />
        </member>
        <member name="M:System.Activities.ActivityAction`4.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Activities.ActivityAction`4"/> class.
            </summary>
        </member>
        <member name="P:System.Activities.ActivityAction`4.Argument1">
            <summary>
            Gets or sets the argument1.
            </summary>
            <value>The argument1.</value>
        </member>
        <member name="P:System.Activities.ActivityAction`4.Argument2">
            <summary>
            Gets or sets the argument2.
            </summary>
            <value>The argument2.</value>
        </member>
        <member name="P:System.Activities.ActivityAction`4.Argument3">
            <summary>
            Gets or sets the argument3.
            </summary>
            <value>The argument3.</value>
        </member>
        <member name="P:System.Activities.ActivityAction`4.Argument4">
            <summary>
            Gets or sets the argument4.
            </summary>
            <value>The argument4.</value>
        </member>
        <member name="M:System.Activities.ActivityAction`4.InternalGetRuntimeDelegateArguments">
            <summary>
            Internals the get runtime delegate arguments.
            </summary>
            <returns>IList&lt;RuntimeDelegateArgument&gt;.</returns>
        </member>
        <member name="T:System.Activities.ActivityAction`5">
            <summary>
            The ActivityAction class. This class cannot be inherited.
            Implements the <see cref="T:System.Activities.ActivityDelegate" />
            </summary>
            <typeparam name="T1">The type of the t1.</typeparam>
            <typeparam name="T2">The type of the t2.</typeparam>
            <typeparam name="T3">The type of the t3.</typeparam>
            <typeparam name="T4">The type of the t4.</typeparam>
            <typeparam name="T5">The type of the t5.</typeparam>
            <seealso cref="T:System.Activities.ActivityDelegate" />
        </member>
        <member name="M:System.Activities.ActivityAction`5.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Activities.ActivityAction`5"/> class.
            </summary>
        </member>
        <member name="P:System.Activities.ActivityAction`5.Argument1">
            <summary>
            Gets or sets the argument1.
            </summary>
            <value>The argument1.</value>
        </member>
        <member name="P:System.Activities.ActivityAction`5.Argument2">
            <summary>
            Gets or sets the argument2.
            </summary>
            <value>The argument2.</value>
        </member>
        <member name="P:System.Activities.ActivityAction`5.Argument3">
            <summary>
            Gets or sets the argument3.
            </summary>
            <value>The argument3.</value>
        </member>
        <member name="P:System.Activities.ActivityAction`5.Argument4">
            <summary>
            Gets or sets the argument4.
            </summary>
            <value>The argument4.</value>
        </member>
        <member name="P:System.Activities.ActivityAction`5.Argument5">
            <summary>
            Gets or sets the argument5.
            </summary>
            <value>The argument5.</value>
        </member>
        <member name="M:System.Activities.ActivityAction`5.InternalGetRuntimeDelegateArguments">
            <summary>
            Internals the get runtime delegate arguments.
            </summary>
            <returns>IList&lt;RuntimeDelegateArgument&gt;.</returns>
        </member>
        <member name="T:System.Activities.ActivityAction`6">
            <summary>
            The ActivityAction class. This class cannot be inherited.
            Implements the <see cref="T:System.Activities.ActivityDelegate" />
            </summary>
            <typeparam name="T1">The type of the t1.</typeparam>
            <typeparam name="T2">The type of the t2.</typeparam>
            <typeparam name="T3">The type of the t3.</typeparam>
            <typeparam name="T4">The type of the t4.</typeparam>
            <typeparam name="T5">The type of the t5.</typeparam>
            <typeparam name="T6">The type of the t6.</typeparam>
            <seealso cref="T:System.Activities.ActivityDelegate" />
        </member>
        <member name="M:System.Activities.ActivityAction`6.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Activities.ActivityAction`6"/> class.
            </summary>
        </member>
        <member name="P:System.Activities.ActivityAction`6.Argument1">
            <summary>
            Gets or sets the argument1.
            </summary>
            <value>The argument1.</value>
        </member>
        <member name="P:System.Activities.ActivityAction`6.Argument2">
            <summary>
            Gets or sets the argument2.
            </summary>
            <value>The argument2.</value>
        </member>
        <member name="P:System.Activities.ActivityAction`6.Argument3">
            <summary>
            Gets or sets the argument3.
            </summary>
            <value>The argument3.</value>
        </member>
        <member name="P:System.Activities.ActivityAction`6.Argument4">
            <summary>
            Gets or sets the argument4.
            </summary>
            <value>The argument4.</value>
        </member>
        <member name="P:System.Activities.ActivityAction`6.Argument5">
            <summary>
            Gets or sets the argument5.
            </summary>
            <value>The argument5.</value>
        </member>
        <member name="P:System.Activities.ActivityAction`6.Argument6">
            <summary>
            Gets or sets the argument6.
            </summary>
            <value>The argument6.</value>
        </member>
        <member name="M:System.Activities.ActivityAction`6.InternalGetRuntimeDelegateArguments">
            <summary>
            Internals the get runtime delegate arguments.
            </summary>
            <returns>IList&lt;RuntimeDelegateArgument&gt;.</returns>
        </member>
        <member name="T:System.Activities.ActivityAction`7">
            <summary>
            The ActivityAction class. This class cannot be inherited.
            Implements the <see cref="T:System.Activities.ActivityDelegate" />
            </summary>
            <typeparam name="T1">The type of the t1.</typeparam>
            <typeparam name="T2">The type of the t2.</typeparam>
            <typeparam name="T3">The type of the t3.</typeparam>
            <typeparam name="T4">The type of the t4.</typeparam>
            <typeparam name="T5">The type of the t5.</typeparam>
            <typeparam name="T6">The type of the t6.</typeparam>
            <typeparam name="T7">The type of the t7.</typeparam>
            <seealso cref="T:System.Activities.ActivityDelegate" />
        </member>
        <member name="M:System.Activities.ActivityAction`7.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Activities.ActivityAction`7"/> class.
            </summary>
        </member>
        <member name="P:System.Activities.ActivityAction`7.Argument1">
            <summary>
            Gets or sets the argument1.
            </summary>
            <value>The argument1.</value>
        </member>
        <member name="P:System.Activities.ActivityAction`7.Argument2">
            <summary>
            Gets or sets the argument2.
            </summary>
            <value>The argument2.</value>
        </member>
        <member name="P:System.Activities.ActivityAction`7.Argument3">
            <summary>
            Gets or sets the argument3.
            </summary>
            <value>The argument3.</value>
        </member>
        <member name="P:System.Activities.ActivityAction`7.Argument4">
            <summary>
            Gets or sets the argument4.
            </summary>
            <value>The argument4.</value>
        </member>
        <member name="P:System.Activities.ActivityAction`7.Argument5">
            <summary>
            Gets or sets the argument5.
            </summary>
            <value>The argument5.</value>
        </member>
        <member name="P:System.Activities.ActivityAction`7.Argument6">
            <summary>
            Gets or sets the argument6.
            </summary>
            <value>The argument6.</value>
        </member>
        <member name="P:System.Activities.ActivityAction`7.Argument7">
            <summary>
            Gets or sets the argument7.
            </summary>
            <value>The argument7.</value>
        </member>
        <member name="M:System.Activities.ActivityAction`7.InternalGetRuntimeDelegateArguments">
            <summary>
            Internals the get runtime delegate arguments.
            </summary>
            <returns>IList&lt;RuntimeDelegateArgument&gt;.</returns>
        </member>
        <member name="T:System.Activities.ActivityAction`8">
            <summary>
            The ActivityAction class. This class cannot be inherited.
            Implements the <see cref="T:System.Activities.ActivityDelegate" />
            </summary>
            <typeparam name="T1">The type of the t1.</typeparam>
            <typeparam name="T2">The type of the t2.</typeparam>
            <typeparam name="T3">The type of the t3.</typeparam>
            <typeparam name="T4">The type of the t4.</typeparam>
            <typeparam name="T5">The type of the t5.</typeparam>
            <typeparam name="T6">The type of the t6.</typeparam>
            <typeparam name="T7">The type of the t7.</typeparam>
            <typeparam name="T8">The type of the t8.</typeparam>
            <seealso cref="T:System.Activities.ActivityDelegate" />
        </member>
        <member name="M:System.Activities.ActivityAction`8.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Activities.ActivityAction`8"/> class.
            </summary>
        </member>
        <member name="P:System.Activities.ActivityAction`8.Argument1">
            <summary>
            Gets or sets the argument1.
            </summary>
            <value>The argument1.</value>
        </member>
        <member name="P:System.Activities.ActivityAction`8.Argument2">
            <summary>
            Gets or sets the argument2.
            </summary>
            <value>The argument2.</value>
        </member>
        <member name="P:System.Activities.ActivityAction`8.Argument3">
            <summary>
            Gets or sets the argument3.
            </summary>
            <value>The argument3.</value>
        </member>
        <member name="P:System.Activities.ActivityAction`8.Argument4">
            <summary>
            Gets or sets the argument4.
            </summary>
            <value>The argument4.</value>
        </member>
        <member name="P:System.Activities.ActivityAction`8.Argument5">
            <summary>
            Gets or sets the argument5.
            </summary>
            <value>The argument5.</value>
        </member>
        <member name="P:System.Activities.ActivityAction`8.Argument6">
            <summary>
            Gets or sets the argument6.
            </summary>
            <value>The argument6.</value>
        </member>
        <member name="P:System.Activities.ActivityAction`8.Argument7">
            <summary>
            Gets or sets the argument7.
            </summary>
            <value>The argument7.</value>
        </member>
        <member name="P:System.Activities.ActivityAction`8.Argument8">
            <summary>
            Gets or sets the argument8.
            </summary>
            <value>The argument8.</value>
        </member>
        <member name="M:System.Activities.ActivityAction`8.InternalGetRuntimeDelegateArguments">
            <summary>
            Internals the get runtime delegate arguments.
            </summary>
            <returns>IList&lt;RuntimeDelegateArgument&gt;.</returns>
        </member>
        <member name="T:System.Activities.ActivityAction`9">
            <summary>
            The ActivityAction class. This class cannot be inherited.
            Implements the <see cref="T:System.Activities.ActivityDelegate" />
            </summary>
            <typeparam name="T1">The type of the t1.</typeparam>
            <typeparam name="T2">The type of the t2.</typeparam>
            <typeparam name="T3">The type of the t3.</typeparam>
            <typeparam name="T4">The type of the t4.</typeparam>
            <typeparam name="T5">The type of the t5.</typeparam>
            <typeparam name="T6">The type of the t6.</typeparam>
            <typeparam name="T7">The type of the t7.</typeparam>
            <typeparam name="T8">The type of the t8.</typeparam>
            <typeparam name="T9">The type of the t9.</typeparam>
            <seealso cref="T:System.Activities.ActivityDelegate" />
        </member>
        <member name="M:System.Activities.ActivityAction`9.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Activities.ActivityAction`9"/> class.
            </summary>
        </member>
        <member name="P:System.Activities.ActivityAction`9.Argument1">
            <summary>
            Gets or sets the argument1.
            </summary>
            <value>The argument1.</value>
        </member>
        <member name="P:System.Activities.ActivityAction`9.Argument2">
            <summary>
            Gets or sets the argument2.
            </summary>
            <value>The argument2.</value>
        </member>
        <member name="P:System.Activities.ActivityAction`9.Argument3">
            <summary>
            Gets or sets the argument3.
            </summary>
            <value>The argument3.</value>
        </member>
        <member name="P:System.Activities.ActivityAction`9.Argument4">
            <summary>
            Gets or sets the argument4.
            </summary>
            <value>The argument4.</value>
        </member>
        <member name="P:System.Activities.ActivityAction`9.Argument5">
            <summary>
            Gets or sets the argument5.
            </summary>
            <value>The argument5.</value>
        </member>
        <member name="P:System.Activities.ActivityAction`9.Argument6">
            <summary>
            Gets or sets the argument6.
            </summary>
            <value>The argument6.</value>
        </member>
        <member name="P:System.Activities.ActivityAction`9.Argument7">
            <summary>
            Gets or sets the argument7.
            </summary>
            <value>The argument7.</value>
        </member>
        <member name="P:System.Activities.ActivityAction`9.Argument8">
            <summary>
            Gets or sets the argument8.
            </summary>
            <value>The argument8.</value>
        </member>
        <member name="P:System.Activities.ActivityAction`9.Argument9">
            <summary>
            Gets or sets the argument9.
            </summary>
            <value>The argument9.</value>
        </member>
        <member name="M:System.Activities.ActivityAction`9.InternalGetRuntimeDelegateArguments">
            <summary>
            Internals the get runtime delegate arguments.
            </summary>
            <returns>IList&lt;RuntimeDelegateArgument&gt;.</returns>
        </member>
        <member name="T:System.Activities.ActivityAction`10">
            <summary>
            The ActivityAction class. This class cannot be inherited.
            Implements the <see cref="T:System.Activities.ActivityDelegate" />
            </summary>
            <typeparam name="T1">The type of the t1.</typeparam>
            <typeparam name="T2">The type of the t2.</typeparam>
            <typeparam name="T3">The type of the t3.</typeparam>
            <typeparam name="T4">The type of the t4.</typeparam>
            <typeparam name="T5">The type of the t5.</typeparam>
            <typeparam name="T6">The type of the t6.</typeparam>
            <typeparam name="T7">The type of the t7.</typeparam>
            <typeparam name="T8">The type of the t8.</typeparam>
            <typeparam name="T9">The type of the t9.</typeparam>
            <typeparam name="T10">The type of the T10.</typeparam>
            <seealso cref="T:System.Activities.ActivityDelegate" />
        </member>
        <member name="M:System.Activities.ActivityAction`10.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Activities.ActivityAction`10"/> class.
            </summary>
        </member>
        <member name="P:System.Activities.ActivityAction`10.Argument1">
            <summary>
            Gets or sets the argument1.
            </summary>
            <value>The argument1.</value>
        </member>
        <member name="P:System.Activities.ActivityAction`10.Argument2">
            <summary>
            Gets or sets the argument2.
            </summary>
            <value>The argument2.</value>
        </member>
        <member name="P:System.Activities.ActivityAction`10.Argument3">
            <summary>
            Gets or sets the argument3.
            </summary>
            <value>The argument3.</value>
        </member>
        <member name="P:System.Activities.ActivityAction`10.Argument4">
            <summary>
            Gets or sets the argument4.
            </summary>
            <value>The argument4.</value>
        </member>
        <member name="P:System.Activities.ActivityAction`10.Argument5">
            <summary>
            Gets or sets the argument5.
            </summary>
            <value>The argument5.</value>
        </member>
        <member name="P:System.Activities.ActivityAction`10.Argument6">
            <summary>
            Gets or sets the argument6.
            </summary>
            <value>The argument6.</value>
        </member>
        <member name="P:System.Activities.ActivityAction`10.Argument7">
            <summary>
            Gets or sets the argument7.
            </summary>
            <value>The argument7.</value>
        </member>
        <member name="P:System.Activities.ActivityAction`10.Argument8">
            <summary>
            Gets or sets the argument8.
            </summary>
            <value>The argument8.</value>
        </member>
        <member name="P:System.Activities.ActivityAction`10.Argument9">
            <summary>
            Gets or sets the argument9.
            </summary>
            <value>The argument9.</value>
        </member>
        <member name="P:System.Activities.ActivityAction`10.Argument10">
            <summary>
            Gets or sets the argument10.
            </summary>
            <value>The argument10.</value>
        </member>
        <member name="M:System.Activities.ActivityAction`10.InternalGetRuntimeDelegateArguments">
            <summary>
            Internals the get runtime delegate arguments.
            </summary>
            <returns>IList&lt;RuntimeDelegateArgument&gt;.</returns>
        </member>
        <member name="T:System.Activities.ActivityAction`11">
            <summary>
            The ActivityAction class. This class cannot be inherited.
            Implements the <see cref="T:System.Activities.ActivityDelegate" />
            </summary>
            <typeparam name="T1">The type of the t1.</typeparam>
            <typeparam name="T2">The type of the t2.</typeparam>
            <typeparam name="T3">The type of the t3.</typeparam>
            <typeparam name="T4">The type of the t4.</typeparam>
            <typeparam name="T5">The type of the t5.</typeparam>
            <typeparam name="T6">The type of the t6.</typeparam>
            <typeparam name="T7">The type of the t7.</typeparam>
            <typeparam name="T8">The type of the t8.</typeparam>
            <typeparam name="T9">The type of the t9.</typeparam>
            <typeparam name="T10">The type of the T10.</typeparam>
            <typeparam name="T11">The type of the T11.</typeparam>
            <seealso cref="T:System.Activities.ActivityDelegate" />
        </member>
        <member name="M:System.Activities.ActivityAction`11.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Activities.ActivityAction`11"/> class.
            </summary>
        </member>
        <member name="P:System.Activities.ActivityAction`11.Argument1">
            <summary>
            Gets or sets the argument1.
            </summary>
            <value>The argument1.</value>
        </member>
        <member name="P:System.Activities.ActivityAction`11.Argument2">
            <summary>
            Gets or sets the argument2.
            </summary>
            <value>The argument2.</value>
        </member>
        <member name="P:System.Activities.ActivityAction`11.Argument3">
            <summary>
            Gets or sets the argument3.
            </summary>
            <value>The argument3.</value>
        </member>
        <member name="P:System.Activities.ActivityAction`11.Argument4">
            <summary>
            Gets or sets the argument4.
            </summary>
            <value>The argument4.</value>
        </member>
        <member name="P:System.Activities.ActivityAction`11.Argument5">
            <summary>
            Gets or sets the argument5.
            </summary>
            <value>The argument5.</value>
        </member>
        <member name="P:System.Activities.ActivityAction`11.Argument6">
            <summary>
            Gets or sets the argument6.
            </summary>
            <value>The argument6.</value>
        </member>
        <member name="P:System.Activities.ActivityAction`11.Argument7">
            <summary>
            Gets or sets the argument7.
            </summary>
            <value>The argument7.</value>
        </member>
        <member name="P:System.Activities.ActivityAction`11.Argument8">
            <summary>
            Gets or sets the argument8.
            </summary>
            <value>The argument8.</value>
        </member>
        <member name="P:System.Activities.ActivityAction`11.Argument9">
            <summary>
            Gets or sets the argument9.
            </summary>
            <value>The argument9.</value>
        </member>
        <member name="P:System.Activities.ActivityAction`11.Argument10">
            <summary>
            Gets or sets the argument10.
            </summary>
            <value>The argument10.</value>
        </member>
        <member name="P:System.Activities.ActivityAction`11.Argument11">
            <summary>
            Gets or sets the argument11.
            </summary>
            <value>The argument11.</value>
        </member>
        <member name="M:System.Activities.ActivityAction`11.InternalGetRuntimeDelegateArguments">
            <summary>
            Internals the get runtime delegate arguments.
            </summary>
            <returns>IList&lt;RuntimeDelegateArgument&gt;.</returns>
        </member>
        <member name="T:System.Activities.ActivityAction`12">
            <summary>
            The ActivityAction class. This class cannot be inherited.
            Implements the <see cref="T:System.Activities.ActivityDelegate" />
            </summary>
            <typeparam name="T1">The type of the t1.</typeparam>
            <typeparam name="T2">The type of the t2.</typeparam>
            <typeparam name="T3">The type of the t3.</typeparam>
            <typeparam name="T4">The type of the t4.</typeparam>
            <typeparam name="T5">The type of the t5.</typeparam>
            <typeparam name="T6">The type of the t6.</typeparam>
            <typeparam name="T7">The type of the t7.</typeparam>
            <typeparam name="T8">The type of the t8.</typeparam>
            <typeparam name="T9">The type of the t9.</typeparam>
            <typeparam name="T10">The type of the T10.</typeparam>
            <typeparam name="T11">The type of the T11.</typeparam>
            <typeparam name="T12">The type of the T12.</typeparam>
            <seealso cref="T:System.Activities.ActivityDelegate" />
        </member>
        <member name="M:System.Activities.ActivityAction`12.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Activities.ActivityAction`12"/> class.
            </summary>
        </member>
        <member name="P:System.Activities.ActivityAction`12.Argument1">
            <summary>
            Gets or sets the argument1.
            </summary>
            <value>The argument1.</value>
        </member>
        <member name="P:System.Activities.ActivityAction`12.Argument2">
            <summary>
            Gets or sets the argument2.
            </summary>
            <value>The argument2.</value>
        </member>
        <member name="P:System.Activities.ActivityAction`12.Argument3">
            <summary>
            Gets or sets the argument3.
            </summary>
            <value>The argument3.</value>
        </member>
        <member name="P:System.Activities.ActivityAction`12.Argument4">
            <summary>
            Gets or sets the argument4.
            </summary>
            <value>The argument4.</value>
        </member>
        <member name="P:System.Activities.ActivityAction`12.Argument5">
            <summary>
            Gets or sets the argument5.
            </summary>
            <value>The argument5.</value>
        </member>
        <member name="P:System.Activities.ActivityAction`12.Argument6">
            <summary>
            Gets or sets the argument6.
            </summary>
            <value>The argument6.</value>
        </member>
        <member name="P:System.Activities.ActivityAction`12.Argument7">
            <summary>
            Gets or sets the argument7.
            </summary>
            <value>The argument7.</value>
        </member>
        <member name="P:System.Activities.ActivityAction`12.Argument8">
            <summary>
            Gets or sets the argument8.
            </summary>
            <value>The argument8.</value>
        </member>
        <member name="P:System.Activities.ActivityAction`12.Argument9">
            <summary>
            Gets or sets the argument9.
            </summary>
            <value>The argument9.</value>
        </member>
        <member name="P:System.Activities.ActivityAction`12.Argument10">
            <summary>
            Gets or sets the argument10.
            </summary>
            <value>The argument10.</value>
        </member>
        <member name="P:System.Activities.ActivityAction`12.Argument11">
            <summary>
            Gets or sets the argument11.
            </summary>
            <value>The argument11.</value>
        </member>
        <member name="P:System.Activities.ActivityAction`12.Argument12">
            <summary>
            Gets or sets the argument12.
            </summary>
            <value>The argument12.</value>
        </member>
        <member name="M:System.Activities.ActivityAction`12.InternalGetRuntimeDelegateArguments">
            <summary>
            Internals the get runtime delegate arguments.
            </summary>
            <returns>IList&lt;RuntimeDelegateArgument&gt;.</returns>
        </member>
        <member name="T:System.Activities.ActivityAction`13">
            <summary>
            The ActivityAction class. This class cannot be inherited.
            Implements the <see cref="T:System.Activities.ActivityDelegate" />
            </summary>
            <typeparam name="T1">The type of the t1.</typeparam>
            <typeparam name="T2">The type of the t2.</typeparam>
            <typeparam name="T3">The type of the t3.</typeparam>
            <typeparam name="T4">The type of the t4.</typeparam>
            <typeparam name="T5">The type of the t5.</typeparam>
            <typeparam name="T6">The type of the t6.</typeparam>
            <typeparam name="T7">The type of the t7.</typeparam>
            <typeparam name="T8">The type of the t8.</typeparam>
            <typeparam name="T9">The type of the t9.</typeparam>
            <typeparam name="T10">The type of the T10.</typeparam>
            <typeparam name="T11">The type of the T11.</typeparam>
            <typeparam name="T12">The type of the T12.</typeparam>
            <typeparam name="T13">The type of the T13.</typeparam>
            <seealso cref="T:System.Activities.ActivityDelegate" />
        </member>
        <member name="M:System.Activities.ActivityAction`13.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Activities.ActivityAction`13"/> class.
            </summary>
        </member>
        <member name="P:System.Activities.ActivityAction`13.Argument1">
            <summary>
            Gets or sets the argument1.
            </summary>
            <value>The argument1.</value>
        </member>
        <member name="P:System.Activities.ActivityAction`13.Argument2">
            <summary>
            Gets or sets the argument2.
            </summary>
            <value>The argument2.</value>
        </member>
        <member name="P:System.Activities.ActivityAction`13.Argument3">
            <summary>
            Gets or sets the argument3.
            </summary>
            <value>The argument3.</value>
        </member>
        <member name="P:System.Activities.ActivityAction`13.Argument4">
            <summary>
            Gets or sets the argument4.
            </summary>
            <value>The argument4.</value>
        </member>
        <member name="P:System.Activities.ActivityAction`13.Argument5">
            <summary>
            Gets or sets the argument5.
            </summary>
            <value>The argument5.</value>
        </member>
        <member name="P:System.Activities.ActivityAction`13.Argument6">
            <summary>
            Gets or sets the argument6.
            </summary>
            <value>The argument6.</value>
        </member>
        <member name="P:System.Activities.ActivityAction`13.Argument7">
            <summary>
            Gets or sets the argument7.
            </summary>
            <value>The argument7.</value>
        </member>
        <member name="P:System.Activities.ActivityAction`13.Argument8">
            <summary>
            Gets or sets the argument8.
            </summary>
            <value>The argument8.</value>
        </member>
        <member name="P:System.Activities.ActivityAction`13.Argument9">
            <summary>
            Gets or sets the argument9.
            </summary>
            <value>The argument9.</value>
        </member>
        <member name="P:System.Activities.ActivityAction`13.Argument10">
            <summary>
            Gets or sets the argument10.
            </summary>
            <value>The argument10.</value>
        </member>
        <member name="P:System.Activities.ActivityAction`13.Argument11">
            <summary>
            Gets or sets the argument11.
            </summary>
            <value>The argument11.</value>
        </member>
        <member name="P:System.Activities.ActivityAction`13.Argument12">
            <summary>
            Gets or sets the argument12.
            </summary>
            <value>The argument12.</value>
        </member>
        <member name="P:System.Activities.ActivityAction`13.Argument13">
            <summary>
            Gets or sets the argument13.
            </summary>
            <value>The argument13.</value>
        </member>
        <member name="M:System.Activities.ActivityAction`13.InternalGetRuntimeDelegateArguments">
            <summary>
            Internals the get runtime delegate arguments.
            </summary>
            <returns>IList&lt;RuntimeDelegateArgument&gt;.</returns>
        </member>
        <member name="T:System.Activities.ActivityAction`14">
            <summary>
            The ActivityAction class. This class cannot be inherited.
            Implements the <see cref="T:System.Activities.ActivityDelegate" />
            </summary>
            <typeparam name="T1">The type of the t1.</typeparam>
            <typeparam name="T2">The type of the t2.</typeparam>
            <typeparam name="T3">The type of the t3.</typeparam>
            <typeparam name="T4">The type of the t4.</typeparam>
            <typeparam name="T5">The type of the t5.</typeparam>
            <typeparam name="T6">The type of the t6.</typeparam>
            <typeparam name="T7">The type of the t7.</typeparam>
            <typeparam name="T8">The type of the t8.</typeparam>
            <typeparam name="T9">The type of the t9.</typeparam>
            <typeparam name="T10">The type of the T10.</typeparam>
            <typeparam name="T11">The type of the T11.</typeparam>
            <typeparam name="T12">The type of the T12.</typeparam>
            <typeparam name="T13">The type of the T13.</typeparam>
            <typeparam name="T14">The type of the T14.</typeparam>
            <seealso cref="T:System.Activities.ActivityDelegate" />
        </member>
        <member name="M:System.Activities.ActivityAction`14.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Activities.ActivityAction`14"/> class.
            </summary>
        </member>
        <member name="P:System.Activities.ActivityAction`14.Argument1">
            <summary>
            Gets or sets the argument1.
            </summary>
            <value>The argument1.</value>
        </member>
        <member name="P:System.Activities.ActivityAction`14.Argument2">
            <summary>
            Gets or sets the argument2.
            </summary>
            <value>The argument2.</value>
        </member>
        <member name="P:System.Activities.ActivityAction`14.Argument3">
            <summary>
            Gets or sets the argument3.
            </summary>
            <value>The argument3.</value>
        </member>
        <member name="P:System.Activities.ActivityAction`14.Argument4">
            <summary>
            Gets or sets the argument4.
            </summary>
            <value>The argument4.</value>
        </member>
        <member name="P:System.Activities.ActivityAction`14.Argument5">
            <summary>
            Gets or sets the argument5.
            </summary>
            <value>The argument5.</value>
        </member>
        <member name="P:System.Activities.ActivityAction`14.Argument6">
            <summary>
            Gets or sets the argument6.
            </summary>
            <value>The argument6.</value>
        </member>
        <member name="P:System.Activities.ActivityAction`14.Argument7">
            <summary>
            Gets or sets the argument7.
            </summary>
            <value>The argument7.</value>
        </member>
        <member name="P:System.Activities.ActivityAction`14.Argument8">
            <summary>
            Gets or sets the argument8.
            </summary>
            <value>The argument8.</value>
        </member>
        <member name="P:System.Activities.ActivityAction`14.Argument9">
            <summary>
            Gets or sets the argument9.
            </summary>
            <value>The argument9.</value>
        </member>
        <member name="P:System.Activities.ActivityAction`14.Argument10">
            <summary>
            Gets or sets the argument10.
            </summary>
            <value>The argument10.</value>
        </member>
        <member name="P:System.Activities.ActivityAction`14.Argument11">
            <summary>
            Gets or sets the argument11.
            </summary>
            <value>The argument11.</value>
        </member>
        <member name="P:System.Activities.ActivityAction`14.Argument12">
            <summary>
            Gets or sets the argument12.
            </summary>
            <value>The argument12.</value>
        </member>
        <member name="P:System.Activities.ActivityAction`14.Argument13">
            <summary>
            Gets or sets the argument13.
            </summary>
            <value>The argument13.</value>
        </member>
        <member name="P:System.Activities.ActivityAction`14.Argument14">
            <summary>
            Gets or sets the argument14.
            </summary>
            <value>The argument14.</value>
        </member>
        <member name="M:System.Activities.ActivityAction`14.InternalGetRuntimeDelegateArguments">
            <summary>
            Internals the get runtime delegate arguments.
            </summary>
            <returns>IList&lt;RuntimeDelegateArgument&gt;.</returns>
        </member>
        <member name="T:System.Activities.ActivityAction`15">
            <summary>
            The ActivityAction class. This class cannot be inherited.
            Implements the <see cref="T:System.Activities.ActivityDelegate" />
            </summary>
            <typeparam name="T1">The type of the t1.</typeparam>
            <typeparam name="T2">The type of the t2.</typeparam>
            <typeparam name="T3">The type of the t3.</typeparam>
            <typeparam name="T4">The type of the t4.</typeparam>
            <typeparam name="T5">The type of the t5.</typeparam>
            <typeparam name="T6">The type of the t6.</typeparam>
            <typeparam name="T7">The type of the t7.</typeparam>
            <typeparam name="T8">The type of the t8.</typeparam>
            <typeparam name="T9">The type of the t9.</typeparam>
            <typeparam name="T10">The type of the T10.</typeparam>
            <typeparam name="T11">The type of the T11.</typeparam>
            <typeparam name="T12">The type of the T12.</typeparam>
            <typeparam name="T13">The type of the T13.</typeparam>
            <typeparam name="T14">The type of the T14.</typeparam>
            <typeparam name="T15">The type of the T15.</typeparam>
            <seealso cref="T:System.Activities.ActivityDelegate" />
        </member>
        <member name="M:System.Activities.ActivityAction`15.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Activities.ActivityAction`15"/> class.
            </summary>
        </member>
        <member name="P:System.Activities.ActivityAction`15.Argument1">
            <summary>
            Gets or sets the argument1.
            </summary>
            <value>The argument1.</value>
        </member>
        <member name="P:System.Activities.ActivityAction`15.Argument2">
            <summary>
            Gets or sets the argument2.
            </summary>
            <value>The argument2.</value>
        </member>
        <member name="P:System.Activities.ActivityAction`15.Argument3">
            <summary>
            Gets or sets the argument3.
            </summary>
            <value>The argument3.</value>
        </member>
        <member name="P:System.Activities.ActivityAction`15.Argument4">
            <summary>
            Gets or sets the argument4.
            </summary>
            <value>The argument4.</value>
        </member>
        <member name="P:System.Activities.ActivityAction`15.Argument5">
            <summary>
            Gets or sets the argument5.
            </summary>
            <value>The argument5.</value>
        </member>
        <member name="P:System.Activities.ActivityAction`15.Argument6">
            <summary>
            Gets or sets the argument6.
            </summary>
            <value>The argument6.</value>
        </member>
        <member name="P:System.Activities.ActivityAction`15.Argument7">
            <summary>
            Gets or sets the argument7.
            </summary>
            <value>The argument7.</value>
        </member>
        <member name="P:System.Activities.ActivityAction`15.Argument8">
            <summary>
            Gets or sets the argument8.
            </summary>
            <value>The argument8.</value>
        </member>
        <member name="P:System.Activities.ActivityAction`15.Argument9">
            <summary>
            Gets or sets the argument9.
            </summary>
            <value>The argument9.</value>
        </member>
        <member name="P:System.Activities.ActivityAction`15.Argument10">
            <summary>
            Gets or sets the argument10.
            </summary>
            <value>The argument10.</value>
        </member>
        <member name="P:System.Activities.ActivityAction`15.Argument11">
            <summary>
            Gets or sets the argument11.
            </summary>
            <value>The argument11.</value>
        </member>
        <member name="P:System.Activities.ActivityAction`15.Argument12">
            <summary>
            Gets or sets the argument12.
            </summary>
            <value>The argument12.</value>
        </member>
        <member name="P:System.Activities.ActivityAction`15.Argument13">
            <summary>
            Gets or sets the argument13.
            </summary>
            <value>The argument13.</value>
        </member>
        <member name="P:System.Activities.ActivityAction`15.Argument14">
            <summary>
            Gets or sets the argument14.
            </summary>
            <value>The argument14.</value>
        </member>
        <member name="P:System.Activities.ActivityAction`15.Argument15">
            <summary>
            Gets or sets the argument15.
            </summary>
            <value>The argument15.</value>
        </member>
        <member name="M:System.Activities.ActivityAction`15.InternalGetRuntimeDelegateArguments">
            <summary>
            Internals the get runtime delegate arguments.
            </summary>
            <returns>IList&lt;RuntimeDelegateArgument&gt;.</returns>
        </member>
        <member name="T:System.Activities.ActivityAction`16">
            <summary>
            The ActivityAction class. This class cannot be inherited.
            Implements the <see cref="T:System.Activities.ActivityDelegate" />
            </summary>
            <typeparam name="T1">The type of the t1.</typeparam>
            <typeparam name="T2">The type of the t2.</typeparam>
            <typeparam name="T3">The type of the t3.</typeparam>
            <typeparam name="T4">The type of the t4.</typeparam>
            <typeparam name="T5">The type of the t5.</typeparam>
            <typeparam name="T6">The type of the t6.</typeparam>
            <typeparam name="T7">The type of the t7.</typeparam>
            <typeparam name="T8">The type of the t8.</typeparam>
            <typeparam name="T9">The type of the t9.</typeparam>
            <typeparam name="T10">The type of the T10.</typeparam>
            <typeparam name="T11">The type of the T11.</typeparam>
            <typeparam name="T12">The type of the T12.</typeparam>
            <typeparam name="T13">The type of the T13.</typeparam>
            <typeparam name="T14">The type of the T14.</typeparam>
            <typeparam name="T15">The type of the T15.</typeparam>
            <typeparam name="T16">The type of the T16.</typeparam>
            <seealso cref="T:System.Activities.ActivityDelegate" />
        </member>
        <member name="M:System.Activities.ActivityAction`16.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Activities.ActivityAction`16"/> class.
            </summary>
        </member>
        <member name="P:System.Activities.ActivityAction`16.Argument1">
            <summary>
            Gets or sets the argument1.
            </summary>
            <value>The argument1.</value>
        </member>
        <member name="P:System.Activities.ActivityAction`16.Argument2">
            <summary>
            Gets or sets the argument2.
            </summary>
            <value>The argument2.</value>
        </member>
        <member name="P:System.Activities.ActivityAction`16.Argument3">
            <summary>
            Gets or sets the argument3.
            </summary>
            <value>The argument3.</value>
        </member>
        <member name="P:System.Activities.ActivityAction`16.Argument4">
            <summary>
            Gets or sets the argument4.
            </summary>
            <value>The argument4.</value>
        </member>
        <member name="P:System.Activities.ActivityAction`16.Argument5">
            <summary>
            Gets or sets the argument5.
            </summary>
            <value>The argument5.</value>
        </member>
        <member name="P:System.Activities.ActivityAction`16.Argument6">
            <summary>
            Gets or sets the argument6.
            </summary>
            <value>The argument6.</value>
        </member>
        <member name="P:System.Activities.ActivityAction`16.Argument7">
            <summary>
            Gets or sets the argument7.
            </summary>
            <value>The argument7.</value>
        </member>
        <member name="P:System.Activities.ActivityAction`16.Argument8">
            <summary>
            Gets or sets the argument8.
            </summary>
            <value>The argument8.</value>
        </member>
        <member name="P:System.Activities.ActivityAction`16.Argument9">
            <summary>
            Gets or sets the argument9.
            </summary>
            <value>The argument9.</value>
        </member>
        <member name="P:System.Activities.ActivityAction`16.Argument10">
            <summary>
            Gets or sets the argument10.
            </summary>
            <value>The argument10.</value>
        </member>
        <member name="P:System.Activities.ActivityAction`16.Argument11">
            <summary>
            Gets or sets the argument11.
            </summary>
            <value>The argument11.</value>
        </member>
        <member name="P:System.Activities.ActivityAction`16.Argument12">
            <summary>
            Gets or sets the argument12.
            </summary>
            <value>The argument12.</value>
        </member>
        <member name="P:System.Activities.ActivityAction`16.Argument13">
            <summary>
            Gets or sets the argument13.
            </summary>
            <value>The argument13.</value>
        </member>
        <member name="P:System.Activities.ActivityAction`16.Argument14">
            <summary>
            Gets or sets the argument14.
            </summary>
            <value>The argument14.</value>
        </member>
        <member name="P:System.Activities.ActivityAction`16.Argument15">
            <summary>
            Gets or sets the argument15.
            </summary>
            <value>The argument15.</value>
        </member>
        <member name="P:System.Activities.ActivityAction`16.Argument16">
            <summary>
            Gets or sets the argument16.
            </summary>
            <value>The argument16.</value>
        </member>
        <member name="M:System.Activities.ActivityAction`16.InternalGetRuntimeDelegateArguments">
            <summary>
            Internals the get runtime delegate arguments.
            </summary>
            <returns>IList&lt;RuntimeDelegateArgument&gt;.</returns>
        </member>
        <member name="T:System.Activities.ActivityBuilder">
            <summary>
            The ActivityBuilder class. This class cannot be inherited.
            </summary>
        </member>
        <member name="T:System.Activities.ActivityBuilder.ActivityPropertyCollection">
            <summary>
            The ActivityPropertyCollection class. Implements the <see
            cref="!:System.Collections.ObjectModel.KeyedCollection&lt;System.String,
            System.Activities.DynamicActivityProperty&gt;" />
            </summary>
            <seealso cref="!:System.Collections.ObjectModel.KeyedCollection&lt;System.String, System.Activities.DynamicActivityProperty&gt;" />
        </member>
        <member name="M:System.Activities.ActivityBuilder.ActivityPropertyCollection.GetKeyForItem(System.Activities.DynamicActivityProperty)">
            <summary>
            When implemented in a derived class, extracts the key from the specified element.
            </summary>
            <param name="item">The element from which to extract the key.</param>
            <returns>The key for the specified element.</returns>
        </member>
        <member name="F:System.Activities.ActivityBuilder.propertyReferencePropertyID">
            <summary>
            The property reference property identifier
            </summary>
        </member>
        <member name="F:System.Activities.ActivityBuilder.propertyReferencesPropertyID">
            <summary>
            The property references property identifier
            </summary>
        </member>
        <member name="F:System.Activities.ActivityBuilder.attributes">
            <summary>
            The attributes
            </summary>
        </member>
        <member name="F:System.Activities.ActivityBuilder.constraints">
            <summary>
            The constraints
            </summary>
        </member>
        <member name="F:System.Activities.ActivityBuilder.properties">
            <summary>
            The properties
            </summary>
        </member>
        <member name="M:System.Activities.ActivityBuilder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Activities.ActivityBuilder" /> class.
            </summary>
        </member>
        <member name="P:System.Activities.ActivityBuilder.Attributes">
            <summary>
            Gets the attributes.
            </summary>
            <value>The attributes.</value>
        </member>
        <member name="P:System.Activities.ActivityBuilder.Constraints">
            <summary>
            Gets the constraints.
            </summary>
            <value>The constraints.</value>
        </member>
        <member name="P:System.Activities.ActivityBuilder.Implementation">
            <summary>
            Gets or sets the implementation.
            </summary>
            <value>The implementation.</value>
        </member>
        <member name="P:System.Activities.ActivityBuilder.ImplementationVersion">
            <summary>
            Gets or sets the implementation version.
            </summary>
            <value>The implementation version.</value>
        </member>
        <member name="P:System.Activities.ActivityBuilder.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:System.Activities.ActivityBuilder.Properties">
            <summary>
            Gets the properties.
            </summary>
            <value>The properties.</value>
        </member>
        <member name="M:System.Activities.ActivityBuilder.GetPropertyReference(System.Object)">
            <summary>
            Gets the property reference.
            </summary>
            <param name="target">The target.</param>
            <returns>ActivityPropertyReference.</returns>
        </member>
        <member name="M:System.Activities.ActivityBuilder.GetPropertyReferences(System.Object)">
            <summary>
            Gets the property references.
            </summary>
            <param name="target">The target.</param>
            <returns>IList&lt;ActivityPropertyReference&gt;.</returns>
        </member>
        <member name="M:System.Activities.ActivityBuilder.SetPropertyReference(System.Object,System.Activities.ActivityPropertyReference)">
            <summary>
            Sets the property reference.
            </summary>
            <param name="target">The target.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:System.Activities.ActivityBuilder.ShouldSerializePropertyReference(System.Object)">
            <summary>
            Shoulds the serialize property reference.
            </summary>
            <param name="target">The target.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:System.Activities.ActivityBuilder.ShouldSerializePropertyReferences(System.Object)">
            <summary>
            Shoulds the serialize property references.
            </summary>
            <param name="target">The target.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:System.Activities.ActivityBuilder.CreateActivityPropertyCollection">
            <summary>
            Creates the activity property collection.
            </summary>
            <returns>KeyedCollection&lt;System.String, DynamicActivityProperty&gt;.</returns>
        </member>
        <member name="M:System.Activities.ActivityBuilder.HasPropertyReferences(System.Object)">
            <summary>
            Determines whether [has property references] [the specified target].
            </summary>
            <param name="target">The target.</param>
            <returns>
            <c>true</c> if [has property references] [the specified target]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:System.Activities.ActivityBuilder.GetPropertyReferenceCollection(System.Object)">
            <summary>
            Gets the property reference collection.
            </summary>
            <param name="target">The target.</param>
            <returns>PropertyReferenceCollection.</returns>
        </member>
        <member name="T:System.Activities.ActivityBuilder.PropertyReferenceCollection">
            <summary>
            The PropertyReferenceCollection class. Implements the <see
            cref="!:System.Collections.ObjectModel.Collection&lt;System.Activities.ActivityPropertyReference&gt;" />
            </summary>
            <seealso cref="!:System.Collections.ObjectModel.Collection&lt;System.Activities.ActivityPropertyReference&gt;" />
        </member>
        <member name="F:System.Activities.ActivityBuilder.PropertyReferenceCollection.targetObject">
            <summary>
            The target object
            </summary>
        </member>
        <member name="F:System.Activities.ActivityBuilder.PropertyReferenceCollection.singleItemIndex">
            <summary>
            The single item index
            </summary>
        </member>
        <member name="M:System.Activities.ActivityBuilder.PropertyReferenceCollection.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Activities.ActivityBuilder.PropertyReferenceCollection" /> class.
            </summary>
            <param name="target">The target.</param>
        </member>
        <member name="P:System.Activities.ActivityBuilder.PropertyReferenceCollection.SingleItem">
            <summary>
            Gets or sets the single item.
            </summary>
            <value>The single item.</value>
        </member>
        <member name="M:System.Activities.ActivityBuilder.PropertyReferenceCollection.ClearItems">
            <summary>
            Removes all elements from the <see cref="T:System.Collections.ObjectModel.Collection`1" />.
            </summary>
        </member>
        <member name="M:System.Activities.ActivityBuilder.PropertyReferenceCollection.InsertItem(System.Int32,System.Activities.ActivityPropertyReference)">
            <summary>
            Inserts an element into the <see cref="T:System.Collections.ObjectModel.Collection`1" /> at the specified index.
            </summary>
            <param name="index">
            The zero-based index at which <paramref name="item" /> should be inserted.
            </param>
            <param name="item">
            The object to insert. The value can be <see langword="null" /> for reference types.
            </param>
        </member>
        <member name="M:System.Activities.ActivityBuilder.PropertyReferenceCollection.RemoveItem(System.Int32)">
            <summary>
            Removes the element at the specified index of the <see cref="T:System.Collections.ObjectModel.Collection`1" />.
            </summary>
            <param name="index">The zero-based index of the element to remove.</param>
        </member>
        <member name="M:System.Activities.ActivityBuilder.PropertyReferenceCollection.SetItem(System.Int32,System.Activities.ActivityPropertyReference)">
            <summary>
            Replaces the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to replace.</param>
            <param name="item">
            The new value for the element at the specified index. The value can be <see
            langword="null" /> for reference types.
            </param>
        </member>
        <member name="M:System.Activities.ActivityBuilder.PropertyReferenceCollection.UpdateAttachedProperty">
            <summary>
            Updates the attached property.
            </summary>
        </member>
        <member name="T:System.Activities.ActivityBuilder`1">
            <summary>
            The ActivityBuilder class. This class cannot be inherited.
            </summary>
            <typeparam name="TResult">The type of the t result.</typeparam>
        </member>
        <member name="F:System.Activities.ActivityBuilder`1.attributes">
            <summary>
            The attributes
            </summary>
        </member>
        <member name="F:System.Activities.ActivityBuilder`1.constraints">
            <summary>
            The constraints
            </summary>
        </member>
        <member name="F:System.Activities.ActivityBuilder`1.properties">
            <summary>
            The properties
            </summary>
        </member>
        <member name="M:System.Activities.ActivityBuilder`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Activities.ActivityBuilder`1" /> class.
            </summary>
        </member>
        <member name="P:System.Activities.ActivityBuilder`1.Attributes">
            <summary>
            Gets the attributes.
            </summary>
            <value>The attributes.</value>
        </member>
        <member name="P:System.Activities.ActivityBuilder`1.Constraints">
            <summary>
            Gets the constraints.
            </summary>
            <value>The constraints.</value>
        </member>
        <member name="P:System.Activities.ActivityBuilder`1.Implementation">
            <summary>
            Gets or sets the implementation.
            </summary>
            <value>The implementation.</value>
        </member>
        <member name="P:System.Activities.ActivityBuilder`1.ImplementationVersion">
            <summary>
            Gets or sets the implementation version.
            </summary>
            <value>The implementation version.</value>
        </member>
        <member name="P:System.Activities.ActivityBuilder`1.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:System.Activities.ActivityBuilder`1.Properties">
            <summary>
            Gets the properties.
            </summary>
            <value>The properties.</value>
        </member>
        <member name="T:System.Activities.ActivityCollectionType">
            <summary>
            The ActivityCollectionType enumeration.
            </summary>
        </member>
        <member name="F:System.Activities.ActivityCollectionType.Public">
            <summary>
            The public
            </summary>
        </member>
        <member name="F:System.Activities.ActivityCollectionType.Imports">
            <summary>
            The imports
            </summary>
        </member>
        <member name="F:System.Activities.ActivityCollectionType.Implementation">
            <summary>
            The implementation
            </summary>
        </member>
        <member name="T:System.Activities.ActivityContext">
            <summary>
            The ActivityContext class.
            </summary>
        </member>
        <member name="F:System.Activities.ActivityContext.instanceId">
            <summary>
            The instance identifier
            </summary>
        </member>
        <member name="M:System.Activities.ActivityContext.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Activities.ActivityContext"/> class.
            </summary>
            <remarks>
            Used by subclasses that are pooled.
            </remarks>
        </member>
        <member name="M:System.Activities.ActivityContext.#ctor(System.Activities.ActivityInstance,System.Activities.Runtime.ActivityExecutor)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Activities.ActivityContext"/> class.
            </summary>
            <param name="instance">The instance.</param>
            <param name="executor">The executor.</param>
            <remarks>
            these can only be created by the WF Runtime
            </remarks>
        </member>
        <member name="P:System.Activities.ActivityContext.Environment">
            <summary>
            Gets the environment.
            </summary>
            <value>The environment.</value>
        </member>
        <member name="P:System.Activities.ActivityContext.AllowChainedEnvironmentAccess">
            <summary>
            Gets or sets a value indicating whether [allow chained environment access].
            </summary>
            <value><c>true</c> if [allow chained environment access]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:System.Activities.ActivityContext.Activity">
            <summary>
            Gets the activity.
            </summary>
            <value>The activity.</value>
        </member>
        <member name="P:System.Activities.ActivityContext.CurrentInstance">
            <summary>
            Gets the current instance.
            </summary>
            <value>The current instance.</value>
        </member>
        <member name="P:System.Activities.ActivityContext.CurrentExecutor">
            <summary>
            Gets the current executor.
            </summary>
            <value>The current executor.</value>
        </member>
        <member name="P:System.Activities.ActivityContext.ActivityInstanceId">
            <summary>
            Gets the activity instance identifier.
            </summary>
            <value>The activity instance identifier.</value>
        </member>
        <member name="P:System.Activities.ActivityContext.WorkflowInstanceId">
            <summary>
            Gets the workflow instance identifier.
            </summary>
            <value>The workflow instance identifier.</value>
        </member>
        <member name="P:System.Activities.ActivityContext.DataContext">
            <summary>
            Gets the data context.
            </summary>
            <value>The data context.</value>
        </member>
        <member name="P:System.Activities.ActivityContext.IsDisposed">
            <summary>
            Gets a value indicating whether this instance is disposed.
            </summary>
            <value><c>true</c> if this instance is disposed; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:System.Activities.ActivityContext.GetExtension``1">
            <summary>
            Gets the extension.
            </summary>
            <typeparam name="T"></typeparam>
            <returns>T.</returns>
        </member>
        <member name="M:System.Activities.ActivityContext.GetIgnorableResultLocation(System.Activities.RuntimeArgument)">
            <summary>
            Gets the ignorable result location.
            </summary>
            <param name="resultArgument">The result argument.</param>
            <returns>Location.</returns>
        </member>
        <member name="M:System.Activities.ActivityContext.Reinitialize(System.Activities.ActivityInstance,System.Activities.Runtime.ActivityExecutor)">
            <summary>
            Reinitializes the specified instance.
            </summary>
            <param name="instance">The instance.</param>
            <param name="executor">The executor.</param>
        </member>
        <member name="M:System.Activities.ActivityContext.Reinitialize(System.Activities.ActivityInstance,System.Activities.Runtime.ActivityExecutor,System.Activities.Activity,System.Int64)">
            <summary>
            Reinitializes the specified instance.
            </summary>
            <param name="instance">The instance.</param>
            <param name="executor">The executor.</param>
            <param name="activity">The activity.</param>
            <param name="instanceId">The instance identifier.</param>
        </member>
        <member name="M:System.Activities.ActivityContext.Dispose">
            <summary>
            Disposes this instance.
            </summary>
            <remarks>
            extra insurance against misuse (if someone stashes away the execution context to use later)
            </remarks>
        </member>
        <member name="M:System.Activities.ActivityContext.DisposeDataContext">
            <summary>
            Disposes the data context.
            </summary>
        </member>
        <member name="M:System.Activities.ActivityContext.GetLocation``1(System.Activities.LocationReference)">
            <summary>
            Gets the location.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="locationReference">The location reference.</param>
            <returns>Location&lt;T&gt;.</returns>
            <exception cref="T:System.InvalidOperationException"></exception>
            <remarks>
            Soft-Link: This method is referenced through reflection by ExpressionUtilities.TryRewriteLambdaExpression. Update that file if the signature changes.
            </remarks>
        </member>
        <member name="M:System.Activities.ActivityContext.GetValue``1(System.Activities.LocationReference)">
            <summary>
            Gets the value.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="locationReference">The location reference.</param>
            <returns>T.</returns>
            <remarks>
            Soft-Link: This method is referenced through reflection by ExpressionUtilities.TryRewriteLambdaExpression. Update that file if the signature changes.
            </remarks>
        </member>
        <member name="M:System.Activities.ActivityContext.GetValueCore``1(System.Activities.LocationReference)">
            <summary>
            Gets the value core.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="locationReference">The location reference.</param>
            <returns>T.</returns>
        </member>
        <member name="M:System.Activities.ActivityContext.SetValue``1(System.Activities.LocationReference,``0)">
            <summary>
            Sets the value.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="locationReference">The location reference.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:System.Activities.ActivityContext.SetValueCore``1(System.Activities.LocationReference,``0)">
            <summary>
            Sets the value core.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="locationReference">The location reference.</param>
            <param name="value">The value.</param>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:System.Activities.ActivityContext.GetValue``1(System.Activities.OutArgument{``0})">
            <summary>
            Gets the value.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="argument">The argument.</param>
            <returns>T.</returns>
            <remarks>
            Soft-Link: This method is referenced through reflection by ExpressionUtilities.TryRewriteLambdaExpression. Update that file if the signature changes.
            </remarks>
        </member>
        <member name="M:System.Activities.ActivityContext.GetValue``1(System.Activities.InOutArgument{``0})">
            <summary>
            Gets the value.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="argument">The argument.</param>
            <returns>T.</returns>
            <remarks>
            Soft-Link: This method is referenced through reflection by ExpressionUtilities.TryRewriteLambdaExpression. Update that file if the signature changes.
            </remarks>
        </member>
        <member name="M:System.Activities.ActivityContext.GetValue``1(System.Activities.InArgument{``0})">
            <summary>
            Gets the value.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="argument">The argument.</param>
            <returns>T.</returns>
            <remarks>
            Soft-Link: This method is referenced through reflection by ExpressionUtilities.TryRewriteLambdaExpression. Update that file if the signature changes.
            </remarks>
        </member>
        <member name="M:System.Activities.ActivityContext.GetValue(System.Activities.Argument)">
            <summary>
            Gets the value.
            </summary>
            <param name="argument">The argument.</param>
            <returns>System.Object.</returns>
            <remarks>
            Soft-Link: This method is referenced through reflection by ExpressionUtilities.TryRewriteLambdaExpression. Update that file if the signature changes.
            </remarks>
        </member>
        <member name="M:System.Activities.ActivityContext.GetValue(System.Activities.RuntimeArgument)">
            <summary>
            Gets the value.
            </summary>
            <param name="runtimeArgument">The runtime argument.</param>
            <returns>System.Object.</returns>
            <remarks>
            Soft-Link: This method is referenced through reflection by ExpressionUtilities.TryRewriteLambdaExpression. Update that file if the signature changes.
            </remarks>
        </member>
        <member name="M:System.Activities.ActivityContext.SetValue``1(System.Activities.OutArgument{``0},``0)">
            <summary>
            Sets the value.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="argument">The argument.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:System.Activities.ActivityContext.SetValue``1(System.Activities.InOutArgument{``0},``0)">
            <summary>
            Sets the value.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="argument">The argument.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:System.Activities.ActivityContext.SetValue``1(System.Activities.InArgument{``0},``0)">
            <summary>
            Sets the value.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="argument">The argument.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:System.Activities.ActivityContext.SetValue(System.Activities.Argument,System.Object)">
            <summary>
            Sets the value.
            </summary>
            <param name="argument">The argument.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:System.Activities.ActivityContext.TrackCore(System.Activities.Tracking.CustomTrackingRecord)">
            <summary>
            Tracks the core.
            </summary>
            <param name="record">The record.</param>
        </member>
        <member name="M:System.Activities.ActivityContext.ThrowIfDisposed">
            <summary>
            Throws if disposed.
            </summary>
            <exception cref="T:System.ObjectDisposedException"></exception>
        </member>
        <member name="T:System.Activities.ActivityDelegate">
            <summary>
            The ActivityDelegate class.
            </summary>
        </member>
        <member name="F:System.Activities.ActivityDelegate.Argument10Name">
            <summary>
            The argument10 name
            </summary>
        </member>
        <member name="F:System.Activities.ActivityDelegate.Argument11Name">
            <summary>
            The argument11 name
            </summary>
        </member>
        <member name="F:System.Activities.ActivityDelegate.Argument12Name">
            <summary>
            The argument12 name
            </summary>
        </member>
        <member name="F:System.Activities.ActivityDelegate.Argument13Name">
            <summary>
            The argument13 name
            </summary>
        </member>
        <member name="F:System.Activities.ActivityDelegate.Argument14Name">
            <summary>
            The argument14 name
            </summary>
        </member>
        <member name="F:System.Activities.ActivityDelegate.Argument15Name">
            <summary>
            The argument15 name
            </summary>
        </member>
        <member name="F:System.Activities.ActivityDelegate.Argument16Name">
            <summary>
            The argument16 name
            </summary>
        </member>
        <member name="F:System.Activities.ActivityDelegate.Argument1Name">
            <summary>
            The argument1 name
            </summary>
        </member>
        <member name="F:System.Activities.ActivityDelegate.Argument2Name">
            <summary>
            The argument2 name
            </summary>
        </member>
        <member name="F:System.Activities.ActivityDelegate.Argument3Name">
            <summary>
            The argument3 name
            </summary>
        </member>
        <member name="F:System.Activities.ActivityDelegate.Argument4Name">
            <summary>
            The argument4 name
            </summary>
        </member>
        <member name="F:System.Activities.ActivityDelegate.Argument5Name">
            <summary>
            The argument5 name
            </summary>
        </member>
        <member name="F:System.Activities.ActivityDelegate.Argument6Name">
            <summary>
            The argument6 name
            </summary>
        </member>
        <member name="F:System.Activities.ActivityDelegate.Argument7Name">
            <summary>
            The argument7 name
            </summary>
        </member>
        <member name="F:System.Activities.ActivityDelegate.Argument8Name">
            <summary>
            The argument8 name
            </summary>
        </member>
        <member name="F:System.Activities.ActivityDelegate.Argument9Name">
            <summary>
            The argument9 name
            </summary>
        </member>
        <member name="F:System.Activities.ActivityDelegate.ArgumentName">
            <summary>
            The argument name
            </summary>
        </member>
        <member name="F:System.Activities.ActivityDelegate.ResultArgumentName">
            <summary>
            The result argument name
            </summary>
        </member>
        <member name="F:System.Activities.ActivityDelegate.cacheId">
            <summary>
            The cache identifier
            </summary>
        </member>
        <member name="F:System.Activities.ActivityDelegate.delegateParameters">
            <summary>
            The delegate parameters
            </summary>
        </member>
        <member name="F:System.Activities.ActivityDelegate.displayName">
            <summary>
            The display name
            </summary>
        </member>
        <member name="F:System.Activities.ActivityDelegate.isDisplayNameSet">
            <summary>
            The is display name set
            </summary>
        </member>
        <member name="M:System.Activities.ActivityDelegate.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Activities.ActivityDelegate" /> class.
            </summary>
        </member>
        <member name="P:System.Activities.ActivityDelegate.DisplayName">
            <summary>
            Gets or sets the display name.
            </summary>
            <value>The display name.</value>
        </member>
        <member name="P:System.Activities.ActivityDelegate.Handler">
            <summary>
            Gets or sets the handler.
            </summary>
            <value>The handler.</value>
        </member>
        <member name="P:System.Activities.ActivityDelegate.Environment">
            <summary>
            Gets or sets the environment.
            </summary>
            <value>The environment.</value>
        </member>
        <member name="P:System.Activities.ActivityDelegate.Owner">
            <summary>
            Gets the owner.
            </summary>
            <value>The owner.</value>
        </member>
        <member name="P:System.Activities.ActivityDelegate.ParentCollectionType">
            <summary>
            Gets the type of the parent collection.
            </summary>
            <value>The type of the parent collection.</value>
        </member>
        <member name="P:System.Activities.ActivityDelegate.RuntimeDelegateArguments">
            <summary>
            Gets the runtime delegate arguments.
            </summary>
            <value>The runtime delegate arguments.</value>
        </member>
        <member name="M:System.Activities.ActivityDelegate.ShouldSerializeDisplayName">
            <summary>
            Shoulds the display name of the serialize.
            </summary>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:System.Activities.ActivityDelegate.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="M:System.Activities.ActivityDelegate.CanBeScheduledBy(System.Activities.Activity)">
            <summary>
            Determines whether this instance [can be scheduled by] the specified parent.
            </summary>
            <param name="parent">The parent.</param>
            <returns>
            <c>true</c> if this instance [can be scheduled by] the specified parent; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:System.Activities.ActivityDelegate.InitializeRelationship(System.Activities.Activity,System.Activities.ActivityCollectionType,System.Collections.Generic.IList{System.Activities.Validation.ValidationError}@)">
            <summary>
            Initializes the relationship.
            </summary>
            <param name="parent">The parent.</param>
            <param name="collectionType">Type of the collection.</param>
            <param name="validationErrors">The validation errors.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:System.Activities.ActivityDelegate.InternalCacheMetadata">
            <summary>
            Internals the cache metadata.
            </summary>
        </member>
        <member name="M:System.Activities.ActivityDelegate.InternalGetRuntimeDelegateArguments">
            <summary>
            Internals the get runtime delegate arguments.
            </summary>
            <returns>IList&lt;RuntimeDelegateArgument&gt;.</returns>
        </member>
        <member name="M:System.Activities.ActivityDelegate.GetResultArgument">
            <summary>
            Gets the result argument.
            </summary>
            <returns>DelegateOutArgument.</returns>
        </member>
        <member name="M:System.Activities.ActivityDelegate.OnGetRuntimeDelegateArguments(System.Collections.Generic.IList{System.Activities.RuntimeDelegateArgument})">
            <summary>
            Called when [get runtime delegate arguments].
            </summary>
            <param name="runtimeDelegateArguments">The runtime delegate arguments.</param>
            <exception cref="T:System.ArgumentNullException">runtimeDelegateArguments</exception>
        </member>
        <member name="T:System.Activities.ActivityInstance">
            <summary>
            The ActivityInstance class. This class cannot be inherited. Implements the <see
            cref="T:System.Activities.Runtime.ActivityInstanceMap.IActivityReference" />
            </summary>
            <seealso cref="T:System.Activities.Runtime.ActivityInstanceMap.IActivityReference" />
        </member>
        <member name="T:System.Activities.ActivityInstance.AbortEnumerator">
            <summary>
            The AbortEnumerator class. Implements the <see
            cref="!:System.Collections.Generic.IEnumerator&lt;System.Activities.ActivityInstance&gt;" />
            </summary>
            <seealso cref="!:System.Collections.Generic.IEnumerator&lt;System.Activities.ActivityInstance&gt;" />
            <remarks>
            Does a depth first walk and uses some knowledge of the abort process to determine which
            child to visit next
            </remarks>
        </member>
        <member name="F:System.Activities.ActivityInstance.activity">
            <summary>
            The activity
            </summary>
        </member>
        <member name="F:System.Activities.ActivityInstance.childCache">
            <summary>
            The child cache
            </summary>
        </member>
        <member name="F:System.Activities.ActivityInstance.childList">
            <summary>
            The child list
            </summary>
        </member>
        <member name="F:System.Activities.ActivityInstance.environment">
            <summary>
            The environment
            </summary>
        </member>
        <member name="F:System.Activities.ActivityInstance.ownerName">
            <summary>
            The owner name
            </summary>
        </member>
        <member name="M:System.Activities.ActivityInstance.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Activities.ActivityInstance" /> class.
            </summary>
        </member>
        <member name="M:System.Activities.ActivityInstance.#ctor(System.Activities.Activity)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Activities.ActivityInstance" /> class.
            </summary>
            <param name="activity">The activity.</param>
        </member>
        <member name="P:System.Activities.ActivityInstance.Activity">
            <summary>
            Gets the activity.
            </summary>
            <value>The activity.</value>
        </member>
        <member name="P:System.Activities.ActivityInstance.System#Activities#Runtime#ActivityInstanceMap#IActivityReference#Activity">
            <summary>
            Gets the activity.
            </summary>
            <value>The activity.</value>
        </member>
        <member name="P:System.Activities.ActivityInstance.HasActivityReferences">
            <summary>
            Gets a value indicating whether this instance has activity references.
            </summary>
            <value><c>true</c> if this instance has activity references; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:System.Activities.ActivityInstance.Id">
            <summary>
            Gets the identifier.
            </summary>
            <value>The identifier.</value>
        </member>
        <member name="P:System.Activities.ActivityInstance.ImplementationVersion">
            <summary>
            Gets the implementation version.
            </summary>
            <value>The implementation version.</value>
        </member>
        <member name="P:System.Activities.ActivityInstance.IsCompleted">
            <summary>
            Gets a value indicating whether this instance is completed.
            </summary>
            <value><c>true</c> if this instance is completed; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:System.Activities.ActivityInstance.State">
            <summary>
            Gets the state.
            </summary>
            <value>The state.</value>
        </member>
        <member name="P:System.Activities.ActivityInstance.CompiledDataContexts">
            <summary>
            Gets or sets the compiled data contexts.
            </summary>
            <value>The compiled data contexts.</value>
        </member>
        <member name="P:System.Activities.ActivityInstance.CompiledDataContextsForImplementation">
            <summary>
            Gets or sets the compiled data contexts for implementation.
            </summary>
            <value>The compiled data contexts for implementation.</value>
        </member>
        <member name="P:System.Activities.ActivityInstance.CompletionBookmark">
            <summary>
            Gets or sets the completion bookmark.
            </summary>
            <value>The completion bookmark.</value>
        </member>
        <member name="P:System.Activities.ActivityInstance.DataContext">
            <summary>
            Gets or sets the data context.
            </summary>
            <value>The data context.</value>
        </member>
        <member name="P:System.Activities.ActivityInstance.Environment">
            <summary>
            Gets the environment.
            </summary>
            <value>The environment.</value>
        </member>
        <member name="P:System.Activities.ActivityInstance.FaultBookmark">
            <summary>
            Gets or sets the fault bookmark.
            </summary>
            <value>The fault bookmark.</value>
        </member>
        <member name="P:System.Activities.ActivityInstance.HasChildren">
            <summary>
            Gets a value indicating whether this instance has children.
            </summary>
            <value><c>true</c> if this instance has children; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:System.Activities.ActivityInstance.HasNotExecuted">
            <summary>
            Gets a value indicating whether this instance has not executed.
            </summary>
            <value><c>true</c> if this instance has not executed; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:System.Activities.ActivityInstance.HasPendingWork">
            <summary>
            Gets a value indicating whether this instance has pending work.
            </summary>
            <value><c>true</c> if this instance has pending work; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:System.Activities.ActivityInstance.InstanceMap">
            <summary>
            Gets the instance map.
            </summary>
            <value>The instance map.</value>
        </member>
        <member name="P:System.Activities.ActivityInstance.InternalId">
            <summary>
            Gets the internal identifier.
            </summary>
            <value>The internal identifier.</value>
        </member>
        <member name="P:System.Activities.ActivityInstance.IsCancellationRequested">
            <summary>
            Gets or sets a value indicating whether this instance is cancellation requested.
            </summary>
            <value><c>true</c> if this instance is cancellation requested; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:System.Activities.ActivityInstance.IsEnvironmentOwner">
            <summary>
            Gets a value indicating whether this instance is environment owner.
            </summary>
            <value><c>true</c> if this instance is environment owner; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:System.Activities.ActivityInstance.IsPerformingDefaultCancelation">
            <summary>
            Gets a value indicating whether this instance is performing default cancelation.
            </summary>
            <value><c>true</c> if this instance is performing default cancelation; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:System.Activities.ActivityInstance.IsResolvingArguments">
            <summary>
            Gets a value indicating whether this instance is resolving arguments.
            </summary>
            <value><c>true</c> if this instance is resolving arguments; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:System.Activities.ActivityInstance.OnlyHasOutstandingBookmarks">
            <summary>
            Gets a value indicating whether [only has outstanding bookmarks].
            </summary>
            <value><c>true</c> if [only has outstanding bookmarks]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:System.Activities.ActivityInstance.OwnerName">
            <summary>
            Gets or sets the name of the owner.
            </summary>
            <value>The name of the owner.</value>
        </member>
        <member name="P:System.Activities.ActivityInstance.Parent">
            <summary>
            Gets the parent.
            </summary>
            <value>The parent.</value>
        </member>
        <member name="P:System.Activities.ActivityInstance.PropertyManager">
            <summary>
            Gets or sets the property manager.
            </summary>
            <value>The property manager.</value>
        </member>
        <member name="P:System.Activities.ActivityInstance.SerializedBusyCount">
            <summary>
            Gets or sets the serialized busy count.
            </summary>
            <value>The serialized busy count.</value>
        </member>
        <member name="P:System.Activities.ActivityInstance.SerializedChildren">
            <summary>
            Gets or sets the serialized children.
            </summary>
            <value>The serialized children.</value>
        </member>
        <member name="P:System.Activities.ActivityInstance.SerializedEnvironment">
            <summary>
            Gets or sets the serialized environment.
            </summary>
            <value>The serialized environment.</value>
        </member>
        <member name="P:System.Activities.ActivityInstance.SerializedExtendedData">
            <summary>
            Gets or sets the serialized extended data.
            </summary>
            <value>The serialized extended data.</value>
        </member>
        <member name="P:System.Activities.ActivityInstance.SerializedId">
            <summary>
            Gets or sets the serialized identifier.
            </summary>
            <value>The serialized identifier.</value>
        </member>
        <member name="P:System.Activities.ActivityInstance.SerializedInitializationIncomplete">
            <summary>
            Gets or sets a value indicating whether [serialized initialization incomplete].
            </summary>
            <value><c>true</c> if [serialized initialization incomplete]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:System.Activities.ActivityInstance.SerializedIsCancellationRequested">
            <summary>
            Gets or sets a value indicating whether [serialized is cancellation requested].
            </summary>
            <value><c>true</c> if [serialized is cancellation requested]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:System.Activities.ActivityInstance.SerializedNoSymbols">
            <summary>
            Gets or sets a value indicating whether [serialized no symbols].
            </summary>
            <value><c>true</c> if [serialized no symbols]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:System.Activities.ActivityInstance.SerializedPerformingDefaultCancelation">
            <summary>
            Gets or sets a value indicating whether [serialized performing default cancelation].
            </summary>
            <value><c>true</c> if [serialized performing default cancelation]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:System.Activities.ActivityInstance.SerializedPropertyManager">
            <summary>
            Gets or sets the serialized property manager.
            </summary>
            <value>The serialized property manager.</value>
        </member>
        <member name="P:System.Activities.ActivityInstance.SerializedState">
            <summary>
            Gets or sets the state of the serialized.
            </summary>
            <value>The state of the serialized.</value>
        </member>
        <member name="P:System.Activities.ActivityInstance.SerializedSubstate">
            <summary>
            Gets or sets the serialized substate.
            </summary>
            <value>The serialized substate.</value>
        </member>
        <member name="P:System.Activities.ActivityInstance.SubState">
            <summary>
            Gets the state of the sub.
            </summary>
            <value>The state of the sub.</value>
        </member>
        <member name="P:System.Activities.ActivityInstance.WaitingForTransactionContext">
            <summary>
            Gets or sets a value indicating whether [waiting for transaction context].
            </summary>
            <value><c>true</c> if [waiting for transaction context]; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:System.Activities.ActivityInstance.System#Activities#Runtime#ActivityInstanceMap#IActivityReference#Load(System.Activities.Activity,System.Activities.Runtime.ActivityInstanceMap)">
            <summary>
            Loads the specified activity.
            </summary>
            <param name="activity">The activity.</param>
            <param name="instanceMap">The instance map.</param>
            <exception cref="T:System.Activities.ValidationException"></exception>
            <exception cref="T:System.Activities.VersionMismatchException"></exception>
        </member>
        <member name="M:System.Activities.ActivityInstance.CreateCanceledInstance(System.Activities.Activity)">
            <summary>
            Creates the canceled instance.
            </summary>
            <param name="activity">The activity.</param>
            <returns>ActivityInstance.</returns>
        </member>
        <member name="M:System.Activities.ActivityInstance.CreateCompletedInstance(System.Activities.Activity)">
            <summary>
            Creates the completed instance.
            </summary>
            <param name="activity">The activity.</param>
            <returns>ActivityInstance.</returns>
        </member>
        <member name="M:System.Activities.ActivityInstance.Abort(System.Activities.Runtime.ActivityExecutor,System.Activities.Runtime.BookmarkManager,System.Exception,System.Boolean)">
            <summary>
            Aborts the specified executor.
            </summary>
            <param name="executor">The executor.</param>
            <param name="bookmarkManager">The bookmark manager.</param>
            <param name="terminationReason">The termination reason.</param>
            <param name="isTerminate">if set to <c>true</c> [is terminate].</param>
        </member>
        <member name="M:System.Activities.ActivityInstance.AddActivityReference(System.Activities.Runtime.ActivityInstanceReference)">
            <summary>
            Adds the activity reference.
            </summary>
            <param name="reference">The reference.</param>
        </member>
        <member name="M:System.Activities.ActivityInstance.AddBookmark(System.Activities.Bookmark,System.Activities.BookmarkOptions)">
            <summary>
            Adds the bookmark.
            </summary>
            <param name="bookmark">The bookmark.</param>
            <param name="options">The options.</param>
        </member>
        <member name="M:System.Activities.ActivityInstance.AddChild(System.Activities.ActivityInstance)">
            <summary>
            Adds the child.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:System.Activities.ActivityInstance.AppendChildren(System.Activities.ActivityUtilities.TreeProcessingList,System.Collections.Generic.Queue{System.Collections.Generic.IList{System.Activities.ActivityInstance}}@)">
            <summary>
            Appends the children.
            </summary>
            <param name="nextInstanceList">The next instance list.</param>
            <param name="instancesRemaining">The instances remaining.</param>
            <remarks>called by ActivityUtilities tree-walk</remarks>
        </member>
        <member name="M:System.Activities.ActivityInstance.BaseCancel(System.Activities.NativeActivityContext)">
            <summary>
            Bases the cancel.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:System.Activities.ActivityInstance.Cancel(System.Activities.Runtime.ActivityExecutor,System.Activities.Runtime.BookmarkManager)">
            <summary>
            Cancels the specified executor.
            </summary>
            <param name="executor">The executor.</param>
            <param name="bookmarkManager">The bookmark manager.</param>
        </member>
        <member name="M:System.Activities.ActivityInstance.CancelChildren(System.Activities.NativeActivityContext)">
            <summary>
            Cancels the children.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:System.Activities.ActivityInstance.DecrementBusyCount">
            <summary>
            Decrements the busy count.
            </summary>
        </member>
        <member name="M:System.Activities.ActivityInstance.DecrementBusyCount(System.Int32)">
            <summary>
            Decrements the busy count.
            </summary>
            <param name="amount">The amount.</param>
        </member>
        <member name="M:System.Activities.ActivityInstance.Execute(System.Activities.Runtime.ActivityExecutor,System.Activities.Runtime.BookmarkManager)">
            <summary>
            Executes the specified executor.
            </summary>
            <param name="executor">The executor.</param>
            <param name="bookmarkManager">The bookmark manager.</param>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:System.Activities.ActivityInstance.FillInstanceMap(System.Activities.Runtime.ActivityInstanceMap)">
            <summary>
            Fills the instance map.
            </summary>
            <param name="instanceMap">The instance map.</param>
        </member>
        <member name="M:System.Activities.ActivityInstance.FinalizeState(System.Activities.Runtime.ActivityExecutor,System.Boolean)">
            <summary>
            Finalizes the state.
            </summary>
            <param name="executor">The executor.</param>
            <param name="faultActivity">if set to <c>true</c> [fault activity].</param>
        </member>
        <member name="M:System.Activities.ActivityInstance.FinalizeState(System.Activities.Runtime.ActivityExecutor,System.Boolean,System.Boolean)">
            <summary>
            Finalizes the state.
            </summary>
            <param name="executor">The executor.</param>
            <param name="faultActivity">if set to <c>true</c> [fault activity].</param>
            <param name="skipTracking">if set to <c>true</c> [skip tracking].</param>
        </member>
        <member name="M:System.Activities.ActivityInstance.FixupInstance(System.Activities.ActivityInstance,System.Activities.Runtime.ActivityInstanceMap,System.Activities.Runtime.ActivityExecutor)">
            <summary>
            Fixups the instance.
            </summary>
            <param name="parent">The parent.</param>
            <param name="instanceMap">The instance map.</param>
            <param name="executor">The executor.</param>
            <exception cref="T:System.InvalidOperationException"></exception>
            <remarks>called after deserialization of the workflow instance</remarks>
        </member>
        <member name="M:System.Activities.ActivityInstance.GetChildren">
            <summary>
            Gets the children.
            </summary>
            <returns>ReadOnlyCollection&lt;ActivityInstance&gt;.</returns>
        </member>
        <member name="M:System.Activities.ActivityInstance.GetRawChildren">
            <summary>
            Gets the raw children.
            </summary>
            <returns>HybridCollection&lt;ActivityInstance&gt;.</returns>
        </member>
        <member name="M:System.Activities.ActivityInstance.IncrementBusyCount">
            <summary>
            Increments the busy count.
            </summary>
        </member>
        <member name="M:System.Activities.ActivityInstance.Initialize(System.Activities.ActivityInstance,System.Activities.Runtime.ActivityInstanceMap,System.Activities.Runtime.LocationEnvironment,System.Int64,System.Activities.Runtime.ActivityExecutor)">
            <summary>
            Initializes the specified parent.
            </summary>
            <param name="parent">The parent.</param>
            <param name="instanceMap">The instance map.</param>
            <param name="parentEnvironment">The parent environment.</param>
            <param name="instanceId">The instance identifier.</param>
            <param name="executor">The executor.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:System.Activities.ActivityInstance.Initialize(System.Activities.ActivityInstance,System.Activities.Runtime.ActivityInstanceMap,System.Activities.Runtime.LocationEnvironment,System.Int64,System.Activities.Runtime.ActivityExecutor,System.Int32)">
            <summary>
            Initializes the specified parent.
            </summary>
            <param name="parent">The parent.</param>
            <param name="instanceMap">The instance map.</param>
            <param name="parentEnvironment">The parent environment.</param>
            <param name="instanceId">The instance identifier.</param>
            <param name="executor">The executor.</param>
            <param name="delegateParameterCount">The delegate parameter count.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:System.Activities.ActivityInstance.MarkAsComplete(System.Activities.Runtime.BookmarkScopeManager,System.Activities.Runtime.BookmarkManager)">
            <summary>
            Marks as complete.
            </summary>
            <param name="bookmarkScopeManager">The bookmark scope manager.</param>
            <param name="bookmarkManager">The bookmark manager.</param>
        </member>
        <member name="M:System.Activities.ActivityInstance.MarkCanceled">
            <summary>
            Marks the canceled.
            </summary>
        </member>
        <member name="M:System.Activities.ActivityInstance.RemoveAllBookmarks(System.Activities.Runtime.BookmarkScopeManager,System.Activities.Runtime.BookmarkManager)">
            <summary>
            Removes all bookmarks.
            </summary>
            <param name="bookmarkScopeManager">The bookmark scope manager.</param>
            <param name="bookmarkManager">The bookmark manager.</param>
        </member>
        <member name="M:System.Activities.ActivityInstance.RemoveBookmark(System.Activities.Bookmark,System.Activities.BookmarkOptions)">
            <summary>
            Removes the bookmark.
            </summary>
            <param name="bookmark">The bookmark.</param>
            <param name="options">The options.</param>
        </member>
        <member name="M:System.Activities.ActivityInstance.RemoveChild(System.Activities.ActivityInstance)">
            <summary>
            Removes the child.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:System.Activities.ActivityInstance.ResolveArguments(System.Activities.Runtime.ActivityExecutor,System.Collections.Generic.IDictionary{System.String,System.Object},System.Activities.Location,System.Int32)">
            <summary>
            Resolves the arguments.
            </summary>
            <param name="executor">The executor.</param>
            <param name="argumentValueOverrides">The argument value overrides.</param>
            <param name="resultLocation">The result location.</param>
            <param name="startIndex">The start index.</param>
            <returns><c>true</c> if arguments were resolved synchronously, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:System.Activities.ActivityInstance.ResolveNewArgumentsDuringDynamicUpdate(System.Activities.Runtime.ActivityExecutor,System.Collections.Generic.IList{System.Int32})">
            <summary>
            Resolves the new arguments during dynamic update.
            </summary>
            <param name="executor">The executor.</param>
            <param name="dynamicUpdateArgumentIndexes">The dynamic update argument indexes.</param>
        </member>
        <member name="M:System.Activities.ActivityInstance.ResolveNewVariableDefaultsDuringDynamicUpdate(System.Activities.Runtime.ActivityExecutor,System.Collections.Generic.IList{System.Int32},System.Boolean)">
            <summary>
            Resolves the new variable defaults during dynamic update.
            </summary>
            <param name="executor">The executor.</param>
            <param name="dynamicUpdateVariableIndexes">The dynamic update variable indexes.</param>
            <param name="forImplementation">if set to <c>true</c> [for implementation].</param>
        </member>
        <member name="M:System.Activities.ActivityInstance.ResolveVariables(System.Activities.Runtime.ActivityExecutor)">
            <summary>
            Resolves the variables.
            </summary>
            <param name="executor">The executor.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:System.Activities.ActivityInstance.SetInitializationIncomplete">
            <summary>
            Sets the initialization incomplete.
            </summary>
        </member>
        <member name="M:System.Activities.ActivityInstance.SetInitializedSubstate(System.Activities.Runtime.ActivityExecutor)">
            <summary>
            Sets the initialized substate.
            </summary>
            <param name="executor">The executor.</param>
        </member>
        <member name="M:System.Activities.ActivityInstance.TryFixupChildren(System.Activities.Runtime.ActivityInstanceMap,System.Activities.Runtime.ActivityExecutor)">
            <summary>
            Tries the fixup children.
            </summary>
            <param name="instanceMap">The instance map.</param>
            <param name="executor">The executor.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:System.Activities.ActivityInstance.UpdateState(System.Activities.Runtime.ActivityExecutor)">
            <summary>
            Updates the state.
            </summary>
            <param name="executor">The executor.</param>
            <returns><c>true</c> if the activity completed, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:System.Activities.ActivityInstance.UpdateLocationEnvironmentHierarchy(System.Activities.Runtime.LocationEnvironment,System.Activities.Runtime.LocationEnvironment,System.Activities.ActivityInstance)">
            <summary>
            Updates the location environment hierarchy.
            </summary>
            <param name="oldParentEnvironment">The old parent environment.</param>
            <param name="newEnvironment">The new environment.</param>
            <param name="currentInstance">The current instance.</param>
        </member>
        <member name="M:System.Activities.ActivityInstance.EnqueueVariableDefault(System.Activities.Runtime.ActivityExecutor,System.Activities.Variable,System.Activities.Location)">
            <summary>
            Enqueues the variable default.
            </summary>
            <param name="executor">The executor.</param>
            <param name="variable">The variable.</param>
            <param name="variableLocation">The variable location.</param>
        </member>
        <member name="M:System.Activities.ActivityInstance.EnsureExtendedData">
            <summary>
            Ensures the extended data.
            </summary>
        </member>
        <member name="M:System.Activities.ActivityInstance.GenerateInstanceMapCallback(System.Activities.ActivityInstance,System.Activities.Runtime.ActivityExecutor)">
            <summary>
            Generates the instance map callback.
            </summary>
            <param name="instance">The instance.</param>
            <param name="executor">The executor.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:System.Activities.ActivityInstance.InternalTryPopulateArgumentValueOrScheduleExpression(System.Activities.RuntimeArgument,System.Int32,System.Activities.Runtime.ActivityExecutor,System.Collections.Generic.IDictionary{System.String,System.Object},System.Activities.Location,System.Boolean)">
            <summary>
            Internals the try populate argument value or schedule expression.
            </summary>
            <param name="argument">The argument.</param>
            <param name="nextArgumentIndex">Index of the next argument.</param>
            <param name="executor">The executor.</param>
            <param name="argumentValueOverrides">The argument value overrides.</param>
            <param name="resultLocation">The result location.</param>
            <param name="isDynamicUpdate">if set to <c>true</c> [is dynamic update].</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:System.Activities.ActivityInstance.MarkExecuted">
            <summary>
            Marks the executed.
            </summary>
        </member>
        <member name="M:System.Activities.ActivityInstance.ResolveVariable(System.Activities.Variable,System.Activities.Runtime.ActivityExecutor)">
            <summary>
            Resolves the variable.
            </summary>
            <param name="variable">The variable.</param>
            <param name="executor">The executor.</param>
            <returns><c>true</c> if completed synchronously, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:System.Activities.ActivityInstance.SetCanceled">
            <summary>
            Sets the canceled.
            </summary>
        </member>
        <member name="M:System.Activities.ActivityInstance.SetClosed">
            <summary>
            Sets the closed.
            </summary>
        </member>
        <member name="M:System.Activities.ActivityInstance.TryCancelParent">
            <summary>
            Tries the cancel parent.
            </summary>
        </member>
        <member name="T:System.Activities.ActivityInstance.ExtendedData">
            <summary>
            The ExtendedData class.
            </summary>
            <remarks>
            data necessary to support non-mainline usage of instances (i.e. creating bookmarks,
            using transactions)
            </remarks>
        </member>
        <member name="T:System.Activities.ActivityMetadata">
            <summary>
            The ActivityMetadata structure. Implements the <see
            cref="!:System.IEquatable&lt;System.Activities.ActivityMetadata&gt;" />
            </summary>
            <seealso cref="!:System.IEquatable&lt;System.Activities.ActivityMetadata&gt;" />
        </member>
        <member name="F:System.Activities.ActivityMetadata.activity">
            <summary>
            The activity
            </summary>
        </member>
        <member name="M:System.Activities.ActivityMetadata.#ctor(System.Activities.Activity,System.Activities.LocationReferenceEnvironment,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Activities.ActivityMetadata" /> struct.
            </summary>
            <param name="activity">The activity.</param>
            <param name="environment">The environment.</param>
            <param name="createEmptyBindings">if set to <c>true</c> [create empty bindings].</param>
        </member>
        <member name="P:System.Activities.ActivityMetadata.Environment">
            <summary>
            Gets the environment.
            </summary>
            <value>The environment.</value>
        </member>
        <member name="P:System.Activities.ActivityMetadata.HasViolations">
            <summary>
            Gets a value indicating whether this instance has violations.
            </summary>
            <value><c>true</c> if this instance has violations; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:System.Activities.ActivityMetadata.CreateEmptyBindings">
            <summary>
            Gets a value indicating whether [create empty bindings].
            </summary>
            <value><c>true</c> if [create empty bindings]; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:System.Activities.ActivityMetadata.op_Inequality(System.Activities.ActivityMetadata,System.Activities.ActivityMetadata)">
            <summary>
            Implements the != operator.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:System.Activities.ActivityMetadata.op_Equality(System.Activities.ActivityMetadata,System.Activities.ActivityMetadata)">
            <summary>
            Implements the == operator.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:System.Activities.ActivityMetadata.AddArgument(System.Activities.RuntimeArgument)">
            <summary>
            Adds the argument.
            </summary>
            <param name="argument">The argument.</param>
        </member>
        <member name="M:System.Activities.ActivityMetadata.AddDefaultExtensionProvider``1(System.Func{``0})">
            <summary>
            Adds the default extension provider.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="extensionProvider">The extension provider.</param>
        </member>
        <member name="M:System.Activities.ActivityMetadata.AddImportedChild(System.Activities.Activity)">
            <summary>
            Adds the imported child.
            </summary>
            <param name="importedChild">The imported child.</param>
        </member>
        <member name="M:System.Activities.ActivityMetadata.AddImportedChild(System.Activities.Activity,System.Object)">
            <summary>
            Adds the imported child.
            </summary>
            <param name="importedChild">The imported child.</param>
            <param name="origin">The origin.</param>
        </member>
        <member name="M:System.Activities.ActivityMetadata.AddImportedDelegate(System.Activities.ActivityDelegate)">
            <summary>
            Adds the imported delegate.
            </summary>
            <param name="importedDelegate">The imported delegate.</param>
        </member>
        <member name="M:System.Activities.ActivityMetadata.AddImportedDelegate(System.Activities.ActivityDelegate,System.Object)">
            <summary>
            Adds the imported delegate.
            </summary>
            <param name="importedDelegate">The imported delegate.</param>
            <param name="origin">The origin.</param>
        </member>
        <member name="M:System.Activities.ActivityMetadata.AddValidationError(System.String)">
            <summary>
            Adds the validation error.
            </summary>
            <param name="validationErrorMessage">The validation error message.</param>
        </member>
        <member name="M:System.Activities.ActivityMetadata.AddValidationError(System.Activities.Validation.ValidationError)">
            <summary>
            Adds the validation error.
            </summary>
            <param name="validationError">The validation error.</param>
        </member>
        <member name="M:System.Activities.ActivityMetadata.AddVariable(System.Activities.Variable)">
            <summary>
            Adds the variable.
            </summary>
            <param name="variable">The variable.</param>
        </member>
        <member name="M:System.Activities.ActivityMetadata.AddVariable(System.Activities.Variable,System.Object)">
            <summary>
            Adds the variable.
            </summary>
            <param name="variable">The variable.</param>
            <param name="origin">The origin.</param>
        </member>
        <member name="M:System.Activities.ActivityMetadata.Bind(System.Activities.Argument,System.Activities.RuntimeArgument)">
            <summary>
            Binds the specified binding.
            </summary>
            <param name="binding">The binding.</param>
            <param name="argument">The argument.</param>
        </member>
        <member name="M:System.Activities.ActivityMetadata.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
            <param name="obj">The object to compare with the current instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance;
            otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:System.Activities.ActivityMetadata.Equals(System.Activities.ActivityMetadata)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            <see langword="true" /> if the current object is equal to the <paramref name="other" />
            parameter; otherwise, <see langword="false" />.
            </returns>
        </member>
        <member name="M:System.Activities.ActivityMetadata.GetArgumentsWithReflection">
            <summary>
            Gets the arguments with reflection.
            </summary>
            <returns>Collection&lt;RuntimeArgument&gt;.</returns>
        </member>
        <member name="M:System.Activities.ActivityMetadata.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data
            structures like a hash table.
            </returns>
        </member>
        <member name="M:System.Activities.ActivityMetadata.GetImportedChildrenWithReflection">
            <summary>
            Gets the imported children with reflection.
            </summary>
            <returns>Collection&lt;Activity&gt;.</returns>
        </member>
        <member name="M:System.Activities.ActivityMetadata.GetImportedDelegatesWithReflection">
            <summary>
            Gets the imported delegates with reflection.
            </summary>
            <returns>Collection&lt;ActivityDelegate&gt;.</returns>
        </member>
        <member name="M:System.Activities.ActivityMetadata.GetVariablesWithReflection">
            <summary>
            Gets the variables with reflection.
            </summary>
            <returns>Collection&lt;Variable&gt;.</returns>
        </member>
        <member name="M:System.Activities.ActivityMetadata.RequireExtension``1">
            <summary>
            Requires the extension.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:System.Activities.ActivityMetadata.RequireExtension(System.Type)">
            <summary>
            Requires the extension.
            </summary>
            <param name="extensionType">Type of the extension.</param>
        </member>
        <member name="M:System.Activities.ActivityMetadata.SetArgumentsCollection(System.Collections.ObjectModel.Collection{System.Activities.RuntimeArgument})">
            <summary>
            Sets the arguments collection.
            </summary>
            <param name="arguments">The arguments.</param>
        </member>
        <member name="M:System.Activities.ActivityMetadata.SetImportedChildrenCollection(System.Collections.ObjectModel.Collection{System.Activities.Activity})">
            <summary>
            Sets the imported children collection.
            </summary>
            <param name="importedChildren">The imported children.</param>
        </member>
        <member name="M:System.Activities.ActivityMetadata.SetImportedDelegatesCollection(System.Collections.ObjectModel.Collection{System.Activities.ActivityDelegate})">
            <summary>
            Sets the imported delegates collection.
            </summary>
            <param name="importedDelegates">The imported delegates.</param>
        </member>
        <member name="M:System.Activities.ActivityMetadata.SetValidationErrorsCollection(System.Collections.ObjectModel.Collection{System.Activities.Validation.ValidationError})">
            <summary>
            Sets the validation errors collection.
            </summary>
            <param name="validationErrors">The validation errors.</param>
        </member>
        <member name="M:System.Activities.ActivityMetadata.SetVariablesCollection(System.Collections.ObjectModel.Collection{System.Activities.Variable})">
            <summary>
            Sets the variables collection.
            </summary>
            <param name="variables">The variables.</param>
        </member>
        <member name="M:System.Activities.ActivityMetadata.Dispose">
            <summary>
            Disposes this instance.
            </summary>
        </member>
        <member name="M:System.Activities.ActivityMetadata.ThrowIfDisposed">
            <summary>
            Throws if disposed.
            </summary>
            <exception cref="T:System.ObjectDisposedException"></exception>
        </member>
        <member name="T:System.Activities.ActivityUtilities">
            <summary>
            The ActivityUtilities class.
            </summary>
        </member>
        <member name="T:System.Activities.ActivityUtilities.ChildActivity">
            <summary>
            The ChildActivity structure. Implements the <see
            cref="!:System.IEquatable&lt;System.Activities.ActivityUtilities.ChildActivity&gt;" />
            </summary>
            <seealso cref="!:System.IEquatable&lt;System.Activities.ActivityUtilities.ChildActivity&gt;" />
        </member>
        <member name="M:System.Activities.ActivityUtilities.ChildActivity.#ctor(System.Activities.Activity,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Activities.ActivityUtilities.ChildActivity" /> struct.
            </summary>
            <param name="activity">The activity.</param>
            <param name="canBeExecuted">if set to <c>true</c> [can be executed].</param>
        </member>
        <member name="P:System.Activities.ActivityUtilities.ChildActivity.Empty">
            <summary>
            Gets the empty.
            </summary>
            <value>The empty.</value>
        </member>
        <member name="P:System.Activities.ActivityUtilities.ChildActivity.Activity">
            <summary>
            Gets or sets the activity.
            </summary>
            <value>The activity.</value>
        </member>
        <member name="P:System.Activities.ActivityUtilities.ChildActivity.CanBeExecuted">
            <summary>
            Gets or sets a value indicating whether this instance can be executed.
            </summary>
            <value><c>true</c> if this instance can be executed; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:System.Activities.ActivityUtilities.ChildActivity.op_Inequality(System.Activities.ActivityUtilities.ChildActivity,System.Activities.ActivityUtilities.ChildActivity)">
            <summary>
            Implements the != operator.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:System.Activities.ActivityUtilities.ChildActivity.op_Equality(System.Activities.ActivityUtilities.ChildActivity,System.Activities.ActivityUtilities.ChildActivity)">
            <summary>
            Implements the == operator.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:System.Activities.ActivityUtilities.ChildActivity.Equals(System.Activities.ActivityUtilities.ChildActivity)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            <see langword="true" /> if the current object is equal to the <paramref name="other"
            /> parameter; otherwise, <see langword="false" />.
            </returns>
        </member>
        <member name="M:System.Activities.ActivityUtilities.ChildActivity.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
            <param name="obj">The object to compare with the current instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance;
            otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:System.Activities.ActivityUtilities.ChildActivity.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data
            structures like a hash table.
            </returns>
        </member>
        <member name="P:System.Activities.ActivityUtilities.EmptyParameters">
            <summary>
            Gets the empty parameters.
            </summary>
            <value>The empty parameters.</value>
            <remarks>
            Can't delay create this one because we use object.ReferenceEquals on it in WorkflowInstance
            </remarks>
        </member>
        <member name="M:System.Activities.ActivityUtilities.Add``1(System.Collections.ObjectModel.Collection{``0}@,``0)">
            <summary>
            Adds the specified collection.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="collection">The collection.</param>
            <param name="data">The data.</param>
        </member>
        <member name="M:System.Activities.ActivityUtilities.Add``1(System.Collections.Generic.IList{``0}@,``0)">
            <summary>
            Adds the specified list.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list">The list.</param>
            <param name="data">The data.</param>
        </member>
        <member name="M:System.Activities.ActivityUtilities.CacheRootMetadata(System.Activities.Activity,System.Activities.LocationReferenceEnvironment,System.Activities.ProcessActivityTreeOptions,System.Activities.ActivityUtilities.ProcessActivityCallback,System.Collections.Generic.IList{System.Activities.Validation.ValidationError}@)">
            <summary>
            Caches the root metadata.
            </summary>
            <param name="activity">The activity.</param>
            <param name="hostEnvironment">The host environment.</param>
            <param name="options">The options.</param>
            <param name="callback">The callback.</param>
            <param name="validationErrors">The validation errors.</param>
            <exception cref="T:System.InvalidOperationException"></exception>
            <remarks>
            We explicitly call this CacheRootMetadata since it treats the provided activity as the
            root of the tree.
            </remarks>
        </member>
        <member name="M:System.Activities.ActivityUtilities.CreateActivityWithResult(System.Type)">
            <summary>
            Creates the activity with result.
            </summary>
            <param name="resultType">Type of the result.</param>
            <returns>Type.</returns>
        </member>
        <member name="M:System.Activities.ActivityUtilities.CreateArgument(System.Type,System.Nullable{System.Activities.ArgumentDirection})">
            <summary>
            Creates the argument.
            </summary>
            <param name="type">The type.</param>
            <param name="direction">The direction.</param>
            <returns>Argument.</returns>
        </member>
        <member name="M:System.Activities.ActivityUtilities.CreateArgumentOfObject(System.Activities.ArgumentDirection)">
            <summary>
            Creates the argument of object.
            </summary>
            <param name="direction">The direction.</param>
            <returns>Argument.</returns>
        </member>
        <member name="M:System.Activities.ActivityUtilities.FindArgument(System.String,System.Activities.Activity)">
            <summary>
            Finds the argument.
            </summary>
            <param name="argumentName">Name of the argument.</param>
            <param name="argumentConsumer">The argument consumer.</param>
            <returns>RuntimeArgument.</returns>
            <remarks>
            The argumentConsumer is the activity that is attempting to reference the argument with
            argumentName. That means that argumentConsumer must be in the Implementation of an
            activity that defines an argument with argumentName.
            </remarks>
        </member>
        <member name="M:System.Activities.ActivityUtilities.FinishCachingSubtree(System.Activities.ActivityUtilities.ChildActivity,System.Activities.ActivityUtilities.ActivityCallStack,System.Activities.ProcessActivityTreeOptions)">
            <summary>
            Finishes the caching subtree.
            </summary>
            <param name="subtreeRoot">The subtree root.</param>
            <param name="parentChain">The parent chain.</param>
            <param name="options">The options.</param>
            <remarks>
            This API is only valid from ProcessActivityCallbacks. It will cache the rest of the
            subtree rooted at the provided activity allowing inspection of child metadata before the
            normal caching pass hits it.
            </remarks>
        </member>
        <member name="M:System.Activities.ActivityUtilities.GetDisplayName(System.Object)">
            <summary>
            Gets the display name.
            </summary>
            <param name="source">The source.</param>
            <returns>System.String.</returns>
            <exception cref="T:System.ArgumentNullException">source</exception>
        </member>
        <member name="M:System.Activities.ActivityUtilities.RemoveNulls(System.Collections.IList)">
            <summary>
            Removes the nulls.
            </summary>
            <param name="list">The list.</param>
        </member>
        <member name="M:System.Activities.ActivityUtilities.ProcessArguments(System.Activities.Activity,System.Collections.Generic.IList{System.Activities.RuntimeArgument},System.Boolean,System.Activities.ActivityLocationReferenceEnvironment@,System.Int32@,System.Activities.ActivityUtilities.ChildActivity@,System.Collections.Generic.Stack{System.Activities.ActivityUtilities.ChildActivity}@,System.Collections.Generic.IList{System.Activities.Validation.ValidationError}@)">
            <summary>
            Processes the arguments.
            </summary>
            <param name="parent">The parent.</param>
            <param name="arguments">The arguments.</param>
            <param name="addChildren">if set to <c>true</c> [add children].</param>
            <param name="environment">The environment.</param>
            <param name="nextEnvironmentId">The next environment identifier.</param>
            <param name="nextActivity">The next activity.</param>
            <param name="activitiesRemaining">The activities remaining.</param>
            <param name="validationErrors">The validation errors.</param>
            <remarks>
            Note that we do not need an "isPublicCollection" parameter since all arguments are
            public Returns true if there are any non-null expressions
            </remarks>
        </member>
        <member name="M:System.Activities.ActivityUtilities.ProcessChildren(System.Activities.Activity,System.Collections.Generic.IList{System.Activities.Activity},System.Activities.ActivityCollectionType,System.Boolean,System.Activities.ActivityUtilities.ChildActivity@,System.Collections.Generic.Stack{System.Activities.ActivityUtilities.ChildActivity}@,System.Collections.Generic.IList{System.Activities.Validation.ValidationError}@)">
            <summary>
            Processes the children.
            </summary>
            <param name="parent">The parent.</param>
            <param name="children">The children.</param>
            <param name="collectionType">Type of the collection.</param>
            <param name="addChildren">if set to <c>true</c> [add children].</param>
            <param name="nextActivity">The next activity.</param>
            <param name="activitiesRemaining">The activities remaining.</param>
            <param name="validationErrors">The validation errors.</param>
            <remarks>Returns true if there are any children</remarks>
        </member>
        <member name="M:System.Activities.ActivityUtilities.ProcessDelegates(System.Activities.Activity,System.Collections.Generic.IList{System.Activities.ActivityDelegate},System.Activities.ActivityCollectionType,System.Boolean,System.Activities.ActivityUtilities.ChildActivity@,System.Collections.Generic.Stack{System.Activities.ActivityUtilities.ChildActivity}@,System.Collections.Generic.IList{System.Activities.Validation.ValidationError}@)">
            <summary>
            Processes the delegates.
            </summary>
            <param name="parent">The parent.</param>
            <param name="delegates">The delegates.</param>
            <param name="collectionType">Type of the collection.</param>
            <param name="addChildren">if set to <c>true</c> [add children].</param>
            <param name="nextActivity">The next activity.</param>
            <param name="activitiesRemaining">The activities remaining.</param>
            <param name="validationErrors">The validation errors.</param>
            <remarks>Returns true if there are any non-null handlers</remarks>
        </member>
        <member name="M:System.Activities.ActivityUtilities.ProcessVariables(System.Activities.Activity,System.Collections.Generic.IList{System.Activities.Variable},System.Activities.ActivityCollectionType,System.Boolean,System.Activities.ActivityLocationReferenceEnvironment@,System.Int32@,System.Activities.ActivityUtilities.ChildActivity@,System.Collections.Generic.Stack{System.Activities.ActivityUtilities.ChildActivity}@,System.Collections.Generic.IList{System.Activities.Validation.ValidationError}@)">
            <summary>
            Processes the variables.
            </summary>
            <param name="parent">The parent.</param>
            <param name="variables">The variables.</param>
            <param name="collectionType">Type of the collection.</param>
            <param name="addChildren">if set to <c>true</c> [add children].</param>
            <param name="environment">The environment.</param>
            <param name="nextEnvironmentId">The next environment identifier.</param>
            <param name="nextActivity">The next activity.</param>
            <param name="activitiesRemaining">The activities remaining.</param>
            <param name="validationErrors">The validation errors.</param>
            <remarks>Returns true if there are any non-null defaults</remarks>
        </member>
        <member name="M:System.Activities.ActivityUtilities.SetupForProcessing(System.Activities.Activity,System.Boolean,System.Activities.ActivityUtilities.ChildActivity@,System.Collections.Generic.Stack{System.Activities.ActivityUtilities.ChildActivity}@)">
            <summary>
            Setups for processing.
            </summary>
            <param name="activity">The activity.</param>
            <param name="canBeExecuted">if set to <c>true</c> [can be executed].</param>
            <param name="nextActivity">The next activity.</param>
            <param name="activitiesRemaining">The activities remaining.</param>
            <remarks>nextActivity is always the top of the stack</remarks>
        </member>
        <member name="T:System.Activities.ActivityUtilities.Pop">
            <summary>
            The Pop class. Implements the <see cref="T:System.Activities.Activity" />
            </summary>
            <seealso cref="T:System.Activities.Activity" />
            <remarks>
            We don't implement anything in this class. We just use it as a placeholder for when to
            pop off our parent stack.
            </remarks>
        </member>
        <member name="T:System.Activities.Argument">
            <summary>
            The Argument class.
            </summary>
        </member>
        <member name="F:System.Activities.Argument.ResultValue">
            <summary>
            The result value
            </summary>
        </member>
        <member name="F:System.Activities.Argument.UnspecifiedEvaluationOrder">
            <summary>
            The unspecified evaluation order
            </summary>
        </member>
        <member name="M:System.Activities.Argument.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Activities.Argument" /> class.
            </summary>
        </member>
        <member name="P:System.Activities.Argument.ArgumentType">
            <summary>
            Gets the type of the argument.
            </summary>
            <value>The type of the argument.</value>
        </member>
        <member name="P:System.Activities.Argument.Direction">
            <summary>
            Gets the direction.
            </summary>
            <value>The direction.</value>
        </member>
        <member name="P:System.Activities.Argument.EvaluationOrder">
            <summary>
            Gets or sets the evaluation order.
            </summary>
            <value>The evaluation order.</value>
        </member>
        <member name="P:System.Activities.Argument.Expression">
            <summary>
            Gets or sets the expression.
            </summary>
            <value>The expression.</value>
            <remarks>this member is repeated by all subclasses, which we control</remarks>
        </member>
        <member name="P:System.Activities.Argument.IsInTree">
            <summary>
            Gets a value indicating whether this instance is in tree.
            </summary>
            <value><c>true</c> if this instance is in tree; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:System.Activities.Argument.ExpressionCore">
            <summary>
            Gets or sets the expression core.
            </summary>
            <value>The expression core.</value>
        </member>
        <member name="P:System.Activities.Argument.Id">
            <summary>
            Gets the identifier.
            </summary>
            <value>The identifier.</value>
        </member>
        <member name="P:System.Activities.Argument.IsEmpty">
            <summary>
            Gets a value indicating whether this instance is empty.
            </summary>
            <value><c>true</c> if this instance is empty; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:System.Activities.Argument.RuntimeArgument">
            <summary>
            Gets or sets the runtime argument.
            </summary>
            <value>The runtime argument.</value>
        </member>
        <member name="P:System.Activities.Argument.WasDesignTimeNull">
            <summary>
            Gets or sets a value indicating whether [was design time null].
            </summary>
            <value><c>true</c> if [was design time null]; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:System.Activities.Argument.Create(System.Type,System.Activities.ArgumentDirection)">
            <summary>
            Creates the specified type.
            </summary>
            <param name="type">The type.</param>
            <param name="direction">The direction.</param>
            <returns>Argument.</returns>
        </member>
        <member name="M:System.Activities.Argument.CreateReference(System.Activities.Argument,System.String)">
            <summary>
            Creates the reference.
            </summary>
            <param name="argumentToReference">The argument to reference.</param>
            <param name="referencedArgumentName">Name of the referenced argument.</param>
            <returns>Argument.</returns>
        </member>
        <member name="M:System.Activities.Argument.Get(System.Activities.ActivityContext)">
            <summary>
            Gets the specified context.
            </summary>
            <param name="context">The context.</param>
            <returns>System.Object.</returns>
            <remarks>
            Soft-Link: This method is referenced through reflection by
            ExpressionUtilities.TryRewriteLambdaExpression. Update that file if the signature changes.
            </remarks>
        </member>
        <member name="M:System.Activities.Argument.Get``1(System.Activities.ActivityContext)">
            <summary>
            Gets the specified context.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="context">The context.</param>
            <returns>T.</returns>
            <remarks>
            Soft-Link: This method is referenced through reflection by
            ExpressionUtilities.TryRewriteLambdaExpression. Update that file if the signature changes.
            </remarks>
        </member>
        <member name="M:System.Activities.Argument.GetLocation(System.Activities.ActivityContext)">
            <summary>
            Gets the location.
            </summary>
            <param name="context">The context.</param>
            <returns>Location.</returns>
            <remarks>
            Soft-Link: This method is referenced through reflection by
            ExpressionUtilities.TryRewriteLambdaExpression. Update that file if the signature changes.
            </remarks>
        </member>
        <member name="M:System.Activities.Argument.Set(System.Activities.ActivityContext,System.Object)">
            <summary>
            Sets the specified context.
            </summary>
            <param name="context">The context.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:System.Activities.Argument.Bind(System.Activities.Argument,System.Activities.RuntimeArgument)">
            <summary>
            Binds the specified binding.
            </summary>
            <param name="binding">The binding.</param>
            <param name="argument">The argument.</param>
        </member>
        <member name="M:System.Activities.Argument.CreateLocation``1">
            <summary>
            Creates the location.
            </summary>
            <typeparam name="T"></typeparam>
            <returns>Location&lt;T&gt;.</returns>
        </member>
        <member name="M:System.Activities.Argument.TryBind(System.Activities.Argument,System.Activities.RuntimeArgument,System.Activities.Activity)">
            <summary>
            Tries the bind.
            </summary>
            <param name="binding">The binding.</param>
            <param name="argument">The argument.</param>
            <param name="violationOwner">The violation owner.</param>
        </member>
        <member name="M:System.Activities.Argument.CanConvertToString(Portable.Xaml.Markup.IValueSerializerContext)">
            <summary>
            Determines whether this instance [can convert to string] the specified context.
            </summary>
            <param name="context">The context.</param>
            <returns>
            <c>true</c> if this instance [can convert to string] the specified context; otherwise, <c>false</c>.
            </returns>
            <remarks>for ArgumentValueSerializer</remarks>
        </member>
        <member name="M:System.Activities.Argument.ConvertToString(Portable.Xaml.Markup.IValueSerializerContext)">
            <summary>
            Converts to string.
            </summary>
            <param name="context">The context.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:System.Activities.Argument.CreateDefaultLocation">
            <summary>
            Creates the default location.
            </summary>
            <returns>Location.</returns>
        </member>
        <member name="M:System.Activities.Argument.Declare(System.Activities.Runtime.LocationEnvironment,System.Activities.ActivityInstance)">
            <summary>
            Declares the specified target environment.
            </summary>
            <param name="targetEnvironment">The target environment.</param>
            <param name="activityInstance">The activity instance.</param>
        </member>
        <member name="M:System.Activities.Argument.ThrowIfNotInTree">
            <summary>
            Throws if not in tree.
            </summary>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:System.Activities.Argument.TryPopulateValue(System.Activities.Runtime.LocationEnvironment,System.Activities.ActivityInstance,System.Activities.Runtime.ActivityExecutor)">
            <summary>
            Tries the populate value.
            </summary>
            <param name="targetEnvironment">The target environment.</param>
            <param name="targetActivityInstance">The target activity instance.</param>
            <param name="executor">The executor.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
            <remarks>optional "fast-path" for arguments that can be resolved synchronously</remarks>
        </member>
        <member name="M:System.Activities.Argument.Validate(System.Activities.Activity,System.Collections.Generic.IList{System.Activities.Validation.ValidationError}@)">
            <summary>
            Validates the specified owner.
            </summary>
            <param name="owner">The owner.</param>
            <param name="validationErrors">The validation errors.</param>
        </member>
        <member name="P:System.Activities.Bookmark.SerializedExclusiveHandlesThatReferenceThis">
            <summary>
            Gets or sets the serialized exclusive handles that reference this.
            </summary>
            <value>The serialized exclusive handles that reference this.</value>
            <remarks>Used only when exclusive scopes are involved</remarks>
        </member>
        <member name="M:System.Activities.CodeActivityMetadata.Bind(System.Activities.Argument,System.Activities.RuntimeArgument)">
            <summary>
            Binds the specified binding.
            </summary>
            <param name="binding">The binding.</param>
            <param name="argument">The argument.</param>
        </member>
        <member name="M:System.Activities.Debugger.CharacterSpottingTextReader.AnalyzeReadData(System.Char)">
            <summary>
            Process last character read, and canonicalize end line.
            </summary>
            <param name="lastCharacterRead">The last character read by the underlying reader</param>
            <returns>The last character processed</returns>
        </member>
        <member name="T:System.Activities.Debugger.Symbol.ActivitySymbol">
            <summary>
            Represent the debug symbol for an Activity.
            It defines the start/end of Activity in the Xaml file.
            </summary>
        </member>
        <member name="P:System.Activities.Debugger.Symbol.ActivitySymbol.StartLine">
            <summary>
            Gets or sets the start line.
            </summary>
        </member>
        <member name="P:System.Activities.Debugger.Symbol.ActivitySymbol.StartColumn">
            <summary>
            Gets or sets the start column.
            </summary>
        </member>
        <member name="P:System.Activities.Debugger.Symbol.ActivitySymbol.EndLine">
            <summary>
            Gets or sets the end line.
            </summary>
        </member>
        <member name="P:System.Activities.Debugger.Symbol.ActivitySymbol.EndColumn">
            <summary>
            Gets or sets the end column.
            </summary>
        </member>
        <member name="P:System.Activities.Debugger.Symbol.ActivitySymbol.QualifiedId">
            <summary>
            Gets or sets the internal representation of qualified identifier.
            </summary>
        </member>
        <member name="P:System.Activities.Debugger.Symbol.ActivitySymbol.Id">
            <summary>
            Gets the publicly available identifier.
            </summary>
        </member>
        <member name="M:System.Activities.Debugger.Symbol.ActivitySymbol.Write(System.IO.BinaryWriter)">
            <summary>
            Binary serializer.
            </summary>
            <param name="writer">The binary writer.</param>
        </member>
        <member name="M:System.Activities.Debugger.Symbol.ActivitySymbol.#ctor(System.IO.BinaryReader)">
            <summary>
            Binary deserializer.
            </summary>
            <param name="reader">The binary reader.</param>
        </member>
        <member name="M:System.Activities.Debugger.Symbol.ActivitySymbol.#ctor">
            <summary>Initializes a new instance of the <see cref="T:System.Activities.Debugger.Symbol.ActivitySymbol"/> class.</summary>
        </member>
        <member name="M:System.Activities.Debugger.Symbol.ActivitySymbol.ToString">
            <summary>Returns a <see cref="T:System.String"/> that represents this instance.</summary>
            <returns>A <see cref="T:System.String"/> that represents this instance.</returns>
        </member>
        <member name="P:System.Activities.Debugger.Symbol.WorkflowSymbol.FileName">
            <summary>
            Gets or sets the name of the file.
            </summary>
            <value>The name of the file.</value>
        </member>
        <member name="P:System.Activities.Debugger.Symbol.WorkflowSymbol.Symbols">
            <summary>
            Gets or sets the symbols.
            </summary>
            <value>The symbols.</value>
        </member>
        <member name="M:System.Activities.Debugger.Symbol.WorkflowSymbol.GetChecksum">
            <summary>
            Gets the checksum.
            </summary>
            <returns>System.Byte[].</returns>
        </member>
        <member name="T:System.Activities.Debugger.Symbol.WorkflowSymbol.EncodingFormat">
            <summary>
            The EncodingFormat enumeration.
            </summary>
        </member>
        <member name="F:System.Activities.Debugger.Symbol.WorkflowSymbol.DefaultEncodingFormat">
            <summary>
            The default encoding format
            </summary>
        </member>
        <member name="M:System.Activities.Debugger.Symbol.WorkflowSymbol.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Activities.Debugger.Symbol.WorkflowSymbol"/> class.
            </summary>
        </member>
        <member name="M:System.Activities.Debugger.Symbol.WorkflowSymbol.#ctor(System.IO.BinaryReader,System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:System.Activities.Debugger.Symbol.WorkflowSymbol"/> class.
            </summary>
            <param name="reader">The reader.</param>
            <param name="checksum">The checksum.</param>
            <remarks>
            Binary deserializer.        
            </remarks>
        </member>
        <member name="M:System.Activities.Debugger.Symbol.WorkflowSymbol.Decode(System.String)">
            <summary>
            Decodes the specified symbol string.
            </summary>
            <param name="symbolString">The symbol string.</param>
            <returns>WorkflowSymbol.</returns>
            <exception cref="T:System.Runtime.Serialization.SerializationException"></exception>
            <remarks>
            Decode from Base64 string.        
            </remarks>
        </member>
        <member name="M:System.Activities.Debugger.Symbol.WorkflowSymbol.Encode">
            <summary>
            Encodes this instance.
            </summary>
            <returns>System.String.</returns>
            <remarks>
            Encode to Base64 string        
            </remarks>
        </member>
        <member name="M:System.Activities.Debugger.Symbol.WorkflowSymbol.Encode(System.Activities.Debugger.Symbol.WorkflowSymbol.EncodingFormat)">
            <summary>
            Encodes the specified encoding format.
            </summary>
            <param name="encodingFormat">The encoding format.</param>
            <returns>System.String.</returns>
            <exception cref="T:System.Runtime.Serialization.SerializationException"></exception>
        </member>
        <member name="M:System.Activities.Debugger.Symbol.WorkflowSymbol.ParseBinary(System.Byte[],System.Byte[])">
            <summary>
            Parses the binary.
            </summary>
            <param name="bytes">The bytes.</param>
            <param name="checksum">The checksum.</param>
            <returns>WorkflowSymbol.</returns>
            <remarks>
            Binary deserializer        
            </remarks>
        </member>
        <member name="M:System.Activities.Debugger.Symbol.WorkflowSymbol.Write(System.IO.BinaryWriter)">
            <summary>
            Writes the specified writer.
            </summary>
            <param name="writer">The writer.</param>
            <remarks>
            Binary serializer        
            </remarks>
        </member>
        <member name="M:System.Activities.Debugger.Symbol.WorkflowSymbol.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
            <remarks>
            This is used for String encoding format.        
            </remarks>
        </member>
        <member name="M:System.Activities.Debugger.Symbol.WorkflowSymbol.ParseStringRepresentation(System.String,System.Byte[])">
            <summary>
            Parses the string representation.
            </summary>
            <param name="symbolString">The symbol string.</param>
            <param name="checksum">The checksum.</param>
            <returns>WorkflowSymbol.</returns>
            <remarks>
            Deserialization of string encoding format.        
            </remarks>
        </member>
        <member name="M:System.Activities.Debugger.Symbol.WorkflowSymbol.CalculateChecksum">
            <summary>
            Calculates the checksum.
            </summary>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:System.Activities.Persistence.PersistenceIOParticipant">
            <summary>
            The PersistenceIOParticipant class.
            Implements the <see cref="T:System.Activities.Persistence.PersistenceParticipant" />
            </summary>
            <seealso cref="T:System.Activities.Persistence.PersistenceParticipant" />
        </member>
        <member name="M:System.Activities.Persistence.PersistenceIOParticipant.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Activities.Persistence.PersistenceIOParticipant"/> class.
            </summary>
            <param name="isSaveTransactionRequired">if set to <c>true</c> [is save transaction required].</param>
            <param name="isLoadTransactionRequired">if set to <c>true</c> [is load transaction required].</param>
        </member>
        <member name="M:System.Activities.Persistence.PersistenceIOParticipant.BeginOnSave(System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Object},System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Object},System.TimeSpan,System.AsyncCallback,System.Object)">
            <summary>
            Begins the on save.
            </summary>
            <param name="readWriteValues">The read write values.</param>
            <param name="writeOnlyValues">The write only values.</param>
            <param name="timeout">The timeout.</param>
            <param name="callback">The callback.</param>
            <param name="state">The state.</param>
            <returns>IAsyncResult.</returns>
            <remarks>Passed-in dictionaries are read-only.</remarks>
        </member>
        <member name="M:System.Activities.Persistence.PersistenceIOParticipant.EndOnSave(System.IAsyncResult)">
            <summary>
            Ends the on save.
            </summary>
            <param name="result">The result.</param>
        </member>
        <member name="M:System.Activities.Persistence.PersistenceIOParticipant.BeginOnLoad(System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Object},System.TimeSpan,System.AsyncCallback,System.Object)">
            <summary>
            Begins the on load.
            </summary>
            <param name="readWriteValues">The read write values.</param>
            <param name="timeout">The timeout.</param>
            <param name="callback">The callback.</param>
            <param name="state">The state.</param>
            <returns>IAsyncResult.</returns>
            <remarks>Passed-in dictionary is read-only.</remarks>
        </member>
        <member name="M:System.Activities.Persistence.PersistenceIOParticipant.EndOnLoad(System.IAsyncResult)">
            <summary>
            Ends the on load.
            </summary>
            <param name="result">The result.</param>
        </member>
        <member name="M:System.Activities.Persistence.PersistenceIOParticipant.Abort">
            <summary>
            Aborts this instance.
            </summary>
        </member>
        <member name="M:System.Activities.Persistence.PersistenceIOParticipant.InternalBeginOnSave(System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Object},System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Object},System.TimeSpan,System.AsyncCallback,System.Object)">
            <summary>
            Internals the begin on save.
            </summary>
            <param name="readWriteValues">The read write values.</param>
            <param name="writeOnlyValues">The write only values.</param>
            <param name="timeout">The timeout.</param>
            <param name="callback">The callback.</param>
            <param name="state">The state.</param>
            <returns>IAsyncResult.</returns>
        </member>
        <member name="M:System.Activities.Persistence.PersistenceIOParticipant.InternalEndOnSave(System.IAsyncResult)">
            <summary>
            Internals the end on save.
            </summary>
            <param name="result">The result.</param>
        </member>
        <member name="M:System.Activities.Persistence.PersistenceIOParticipant.InternalBeginOnLoad(System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Object},System.TimeSpan,System.AsyncCallback,System.Object)">
            <summary>
            Internals the begin on load.
            </summary>
            <param name="readWriteValues">The read write values.</param>
            <param name="timeout">The timeout.</param>
            <param name="callback">The callback.</param>
            <param name="state">The state.</param>
            <returns>IAsyncResult.</returns>
        </member>
        <member name="M:System.Activities.Persistence.PersistenceIOParticipant.InternalEndOnLoad(System.IAsyncResult)">
            <summary>
            Internals the end on load.
            </summary>
            <param name="result">The result.</param>
        </member>
        <member name="M:System.Activities.Persistence.PersistenceIOParticipant.InternalAbort">
            <summary>
            Internals the abort.
            </summary>
        </member>
        <member name="T:System.Activities.Expressions.As`2">
            <summary>
            The As class. This class cannot be inherited.
            Implements the <see cref="T:System.Activities.CodeActivity`1" />
            </summary>
            <typeparam name="TOperand">The type of the t operand.</typeparam>
            <typeparam name="TResult">The type of the t result.</typeparam>
            <seealso cref="T:System.Activities.CodeActivity`1" />
        </member>
        <!-- Badly formed XML comment ignored for member "F:System.Activities.Expressions.As`2.operationFunction" -->
        <member name="P:System.Activities.Expressions.As`2.Operand">
            <summary>
            Gets or sets the operand.
            </summary>
            <value>The operand.</value>
        </member>
        <member name="M:System.Activities.Expressions.As`2.CacheMetadata(System.Activities.CodeActivityMetadata)">
            <summary>
            Caches the metadata.
            </summary>
            <param name="metadata">The metadata.</param>
        </member>
        <member name="M:System.Activities.Expressions.As`2.Execute(System.Activities.CodeActivityContext)">
            <summary>
            Executes the specified context.
            </summary>
            <param name="context">The context.</param>
            <returns>TResult.</returns>
        </member>
        <member name="T:System.Activities.Expressions.IndexerReference`2">
            <summary>
            The IndexerReference class. This class cannot be inherited. Implements the <see
            cref="!:CodeActivity&lt;Location&lt;TItem&gt;&gt;" />
            </summary>
            <typeparam name="TOperand">The type of the t operand.</typeparam>
            <typeparam name="TItem">The type of the t item.</typeparam>
            <seealso cref="!:CodeActivity&lt;Location&lt;TItem&gt;&gt;" />
        </member>
        <member name="F:System.Activities.Expressions.IndexerReference`2.funcCache">
            <summary>
            The function cache
            </summary>
        </member>
        <member name="F:System.Activities.Expressions.IndexerReference`2.locker">
            <summary>
            The locker
            </summary>
        </member>
        <member name="F:System.Activities.Expressions.IndexerReference`2.getFunc">
            <summary>
            The get function
            </summary>
        </member>
        <member name="F:System.Activities.Expressions.IndexerReference`2.getMethod">
            <summary>
            The get method
            </summary>
        </member>
        <member name="F:System.Activities.Expressions.IndexerReference`2.indices">
            <summary>
            The indices
            </summary>
        </member>
        <member name="F:System.Activities.Expressions.IndexerReference`2.setFunc">
            <summary>
            The set function
            </summary>
        </member>
        <member name="F:System.Activities.Expressions.IndexerReference`2.setMethod">
            <summary>
            The set method
            </summary>
        </member>
        <member name="P:System.Activities.Expressions.IndexerReference`2.Indices">
            <summary>
            Gets the indices.
            </summary>
            <value>The indices.</value>
        </member>
        <member name="P:System.Activities.Expressions.IndexerReference`2.Operand">
            <summary>
            Gets or sets the operand.
            </summary>
            <value>The operand.</value>
        </member>
        <member name="M:System.Activities.Expressions.IndexerReference`2.CacheMetadata(System.Activities.CodeActivityMetadata)">
            <summary>
            Caches the metadata.
            </summary>
            <param name="metadata">The metadata.</param>
        </member>
        <member name="M:System.Activities.Expressions.IndexerReference`2.Execute(System.Activities.CodeActivityContext)">
            <summary>
            Executes the specified context.
            </summary>
            <param name="context">The context.</param>
            <returns>Location&lt;TItem&gt;.</returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="T:System.Activities.Expressions.IndexerReference`2.IndexerLocation">
            <summary>
            The IndexerLocation class. Implements the <see cref="T:System.Activities.Location`1" />
            </summary>
            <seealso cref="T:System.Activities.Location`1" />
        </member>
        <member name="F:System.Activities.Expressions.IndexerReference`2.IndexerLocation.getFunc">
            <summary>
            The get function
            </summary>
        </member>
        <member name="F:System.Activities.Expressions.IndexerReference`2.IndexerLocation.setFunc">
            <summary>
            The set function
            </summary>
        </member>
        <member name="M:System.Activities.Expressions.IndexerReference`2.IndexerLocation.#ctor(`0,System.Object[],System.Reflection.MethodInfo,System.Reflection.MethodInfo,System.Func{System.Object,System.Object[],System.Object},System.Func{System.Object,System.Object[],System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:System.Activities.Expressions.IndexerReference`2.IndexerLocation" /> class.
            </summary>
            <param name="operand">The operand.</param>
            <param name="indices">The indices.</param>
            <param name="getMethod">The get method.</param>
            <param name="setMethod">The set method.</param>
            <param name="getFunc">The get function.</param>
            <param name="setFunc">The set function.</param>
        </member>
        <member name="P:System.Activities.Expressions.IndexerReference`2.IndexerLocation.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>The value.</value>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="P:System.Activities.Expressions.IndexerReference`2.IndexerLocation.SerializedGetMethod">
            <summary>
            Gets or sets the serialized get method.
            </summary>
            <value>The serialized get method.</value>
        </member>
        <member name="P:System.Activities.Expressions.IndexerReference`2.IndexerLocation.SerializedIndices">
            <summary>
            Gets or sets the serialized indices.
            </summary>
            <value>The serialized indices.</value>
        </member>
        <member name="P:System.Activities.Expressions.IndexerReference`2.IndexerLocation.SerializedOperand">
            <summary>
            Gets or sets the serialized operand.
            </summary>
            <value>The serialized operand.</value>
        </member>
        <member name="P:System.Activities.Expressions.IndexerReference`2.IndexerLocation.SerializedParameters">
            <summary>
            Gets or sets the serialized parameters.
            </summary>
            <value>The serialized parameters.</value>
        </member>
        <member name="P:System.Activities.Expressions.IndexerReference`2.IndexerLocation.SerializedSetMethod">
            <summary>
            Gets or sets the serialized set method.
            </summary>
            <value>The serialized set method.</value>
        </member>
        <member name="T:System.Activities.Expressions.MultidimensionalArrayItemReference`1">
            <summary>
            The MultidimensionalArrayItemReference class. This class cannot be inherited.
            Implements the <see cref="!:System.Activities.CodeActivity&lt;System.Activities.Location&lt;TItem&gt;&gt;" />
            </summary>
            <typeparam name="TItem">The type of the t item.</typeparam>
            <seealso cref="!:System.Activities.CodeActivity&lt;System.Activities.Location&lt;TItem&gt;&gt;" />
        </member>
        <member name="F:System.Activities.Expressions.MultidimensionalArrayItemReference`1.indices">
            <summary>
            The indices
            </summary>
        </member>
        <member name="P:System.Activities.Expressions.MultidimensionalArrayItemReference`1.Array">
            <summary>
            Gets or sets the array.
            </summary>
            <value>The array.</value>
        </member>
        <member name="P:System.Activities.Expressions.MultidimensionalArrayItemReference`1.Indices">
            <summary>
            Gets the indices.
            </summary>
            <value>The indices.</value>
        </member>
        <member name="M:System.Activities.Expressions.MultidimensionalArrayItemReference`1.CacheMetadata(System.Activities.CodeActivityMetadata)">
            <summary>
            Caches the metadata.
            </summary>
            <param name="metadata">The metadata.</param>
        </member>
        <member name="M:System.Activities.Expressions.MultidimensionalArrayItemReference`1.Execute(System.Activities.CodeActivityContext)">
            <summary>
            Executes the specified context.
            </summary>
            <param name="context">The context.</param>
            <returns>Location&lt;TItem&gt;.</returns>
            <exception cref="T:System.InvalidOperationException"></exception>
            <exception cref="T:System.InvalidCastException"></exception>
        </member>
        <member name="T:System.Activities.Expressions.MultidimensionalArrayItemReference`1.MultidimensionArrayLocation">
            <summary>
            The MultidimensionArrayLocation class.
            Implements the <see cref="T:System.Activities.Location`1" />
            </summary>
            <seealso cref="T:System.Activities.Location`1" />
        </member>
        <member name="M:System.Activities.Expressions.MultidimensionalArrayItemReference`1.MultidimensionArrayLocation.#ctor(System.Array,System.Int32[])">
            <summary>
            Initializes a new instance of the <see cref="T:System.Activities.Expressions.MultidimensionalArrayItemReference`1.MultidimensionArrayLocation"/> class.
            </summary>
            <param name="array">The array.</param>
            <param name="indices">The indices.</param>
        </member>
        <member name="P:System.Activities.Expressions.MultidimensionalArrayItemReference`1.MultidimensionArrayLocation.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="P:System.Activities.Expressions.MultidimensionalArrayItemReference`1.MultidimensionArrayLocation.Serializedarray">
            <summary>
            Gets or sets the serializedarray.
            </summary>
            <value>The serializedarray.</value>
        </member>
        <member name="P:System.Activities.Expressions.MultidimensionalArrayItemReference`1.MultidimensionArrayLocation.SerializedIndices">
            <summary>
            Gets or sets the serialized indices.
            </summary>
            <value>The serialized indices.</value>
        </member>
        <member name="T:System.Activities.Expressions.New`1">
            <summary>
            The New class. This class cannot be inherited.
            Implements the <see cref="T:System.Activities.CodeActivity`1" />
            </summary>
            <typeparam name="TResult">The type of the t result.</typeparam>
            <seealso cref="T:System.Activities.CodeActivity`1" />
        </member>
        <member name="P:System.Activities.Expressions.New`1.Arguments">
            <summary>
            Gets the arguments.
            </summary>
            <value>The arguments.</value>
        </member>
        <member name="M:System.Activities.Expressions.New`1.CacheMetadata(System.Activities.CodeActivityMetadata)">
            <summary>
            Caches the metadata.
            </summary>
            <param name="metadata">The metadata.</param>
        </member>
        <member name="M:System.Activities.Expressions.New`1.Execute(System.Activities.CodeActivityContext)">
            <summary>
            Executes the specified context.
            </summary>
            <param name="context">The context.</param>
            <returns>TResult.</returns>
        </member>
        <member name="T:System.Activities.HandleInitializationContext">
            <summary>
            The HandleInitializationContext class. This class cannot be inherited.
            </summary>
        </member>
        <member name="M:System.Activities.HandleInitializationContext.#ctor(System.Activities.Runtime.ActivityExecutor,System.Activities.ActivityInstance)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Activities.HandleInitializationContext"/> class.
            </summary>
            <param name="executor">The executor.</param>
            <param name="scope">The scope.</param>
        </member>
        <member name="P:System.Activities.HandleInitializationContext.OwningActivityInstance">
            <summary>
            Gets the owning activity instance.
            </summary>
            <value>The owning activity instance.</value>
        </member>
        <member name="P:System.Activities.HandleInitializationContext.Executor">
            <summary>
            Gets the executor.
            </summary>
            <value>The executor.</value>
        </member>
        <member name="M:System.Activities.HandleInitializationContext.CreateAndInitializeHandle``1">
            <summary>
            Creates the and initialize handle.
            </summary>
            <typeparam name="THandle">The type of the t handle.</typeparam>
            <returns>THandle.</returns>
        </member>
        <member name="M:System.Activities.HandleInitializationContext.GetExtension``1">
            <summary>
            Gets the extension.
            </summary>
            <typeparam name="T"></typeparam>
            <returns>T.</returns>
        </member>
        <member name="M:System.Activities.HandleInitializationContext.UninitializeHandle(System.Activities.Handle)">
            <summary>
            Uninitializes the handle.
            </summary>
            <param name="handle">The handle.</param>
        </member>
        <member name="T:System.Activities.Hosting.LocationInfo">
            <summary>
            The LocationInfo class. This class cannot be inherited.
            </summary>
        </member>
        <member name="M:System.Activities.Hosting.LocationInfo.#ctor(System.String,System.String,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Activities.Hosting.LocationInfo"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="ownerDisplayName">Display name of the owner.</param>
            <param name="value">The value.</param>
        </member>
        <member name="P:System.Activities.Hosting.LocationInfo.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:System.Activities.Hosting.LocationInfo.OwnerDisplayName">
            <summary>
            Gets the display name of the owner.
            </summary>
            <value>The display name of the owner.</value>
        </member>
        <member name="P:System.Activities.Hosting.LocationInfo.Value">
            <summary>
            Gets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="P:System.Activities.Hosting.LocationInfo.SerializedName">
            <summary>
            Gets or sets the name of the serialized.
            </summary>
            <value>The name of the serialized.</value>
        </member>
        <member name="P:System.Activities.Hosting.LocationInfo.SerializedOwnerDisplayName">
            <summary>
            Gets or sets the display name of the serialized owner.
            </summary>
            <value>The display name of the serialized owner.</value>
        </member>
        <member name="P:System.Activities.Hosting.LocationInfo.SerializedValue">
            <summary>
            Gets or sets the serialized value.
            </summary>
            <value>The serialized value.</value>
        </member>
        <member name="T:System.Activities.Hosting.WorkflowInstance">
            <summary>
            The WorkflowInstance class.
            </summary>
        </member>
        <member name="F:System.Activities.Hosting.WorkflowInstance.hasTrackedResumed">
            <summary>
            Tracking for one-time actions per in-memory instance        
            </summary>
        </member>
        <member name="M:System.Activities.Hosting.WorkflowInstance.#ctor(System.Activities.Activity)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Activities.Hosting.WorkflowInstance"/> class.
            </summary>
            <param name="workflowDefinition">The workflow definition.</param>
        </member>
        <member name="M:System.Activities.Hosting.WorkflowInstance.#ctor(System.Activities.Activity,System.Activities.WorkflowIdentity)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Activities.Hosting.WorkflowInstance"/> class.
            </summary>
            <param name="workflowDefinition">The workflow definition.</param>
            <param name="definitionIdentity">The definition identity.</param>
        </member>
        <member name="P:System.Activities.Hosting.WorkflowInstance.Id">
            <summary>
            Gets the identifier.
            </summary>
            <value>The identifier.</value>
        </member>
        <member name="P:System.Activities.Hosting.WorkflowInstance.SynchronizationContext">
            <summary>
            Gets or sets the synchronization context.
            </summary>
            <value>The synchronization context.</value>
        </member>
        <member name="P:System.Activities.Hosting.WorkflowInstance.HostEnvironment">
            <summary>
            Gets or sets the host environment.
            </summary>
            <value>The host environment.</value>
        </member>
        <member name="P:System.Activities.Hosting.WorkflowInstance.WorkflowDefinition">
            <summary>
            Gets the workflow definition.
            </summary>
            <value>The workflow definition.</value>
        </member>
        <member name="P:System.Activities.Hosting.WorkflowInstance.DefinitionIdentity">
            <summary>
            Gets the definition identity.
            </summary>
            <value>The definition identity.</value>
        </member>
        <member name="P:System.Activities.Hosting.WorkflowInstance.IsReadOnly">
            <summary>
            Gets a value indicating whether this instance is read only.
            </summary>
            <value><c>true</c> if this instance is read only; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:System.Activities.Hosting.WorkflowInstance.SupportsInstanceKeys">
            <summary>
            Gets a value indicating whether [supports instance keys].
            </summary>
            <value><c>true</c> if [supports instance keys]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:System.Activities.Hosting.WorkflowInstance.TrackingProvider">
            <summary>
            Gets the tracking provider.
            </summary>
            <value>The tracking provider.</value>
            <remarks>
            this is going away        
            </remarks>
        </member>
        <member name="P:System.Activities.Hosting.WorkflowInstance.Controller">
            <summary>
            Gets the controller.
            </summary>
            <value>The controller.</value>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:System.Activities.Hosting.WorkflowInstance.GetExtension``1">
            <summary>
            Gets the extension.
            </summary>
            <typeparam name="T"></typeparam>
            <returns>T.</returns>
            <remarks>
            host-facing access to our cascading ExtensionManager resolution        
            </remarks>
        </member>
        <member name="M:System.Activities.Hosting.WorkflowInstance.GetExtensions``1">
            <summary>
            Gets the extensions.
            </summary>
            <typeparam name="T"></typeparam>
            <returns>System.Collections.Generic.IEnumerable&lt;T&gt;.</returns>
        </member>
        <member name="M:System.Activities.Hosting.WorkflowInstance.RegisterExtensionManager(System.Activities.Hosting.WorkflowInstanceExtensionManager)">
            <summary>
            Registers the extension manager.
            </summary>
            <param name="extensionManager">The extension manager.</param>
            <remarks>
            locks down the given extensions manager and runs cache metadata on the workflow definition        
            </remarks>
        </member>
        <member name="M:System.Activities.Hosting.WorkflowInstance.DisposeExtensions">
            <summary>
            Disposes the extensions.
            </summary>
            <remarks>
            dispose the extensions that implement IDisposable        
            </remarks>
        </member>
        <member name="M:System.Activities.Hosting.WorkflowInstance.GetActivitiesBlockingUpdate(System.Object,System.Activities.DynamicUpdate.DynamicUpdateMap)">
            <summary>
            Gets the activities blocking update.
            </summary>
            <param name="deserializedRuntimeState">State of the deserialized runtime.</param>
            <param name="updateMap">The update map.</param>
            <returns>IList&lt;ActivityBlockingUpdate&gt;.</returns>
        </member>
        <member name="M:System.Activities.Hosting.WorkflowInstance.Initialize(System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IList{System.Activities.Handle})">
            <summary>
            Initializes the specified workflow argument values.
            </summary>
            <param name="workflowArgumentValues">The workflow argument values.</param>
            <param name="workflowExecutionProperties">The workflow execution properties.</param>
            <remarks>
            used for Create scenarios where you are providing root information        
            </remarks>
        </member>
        <member name="M:System.Activities.Hosting.WorkflowInstance.Initialize(System.Object)">
            <summary>
            Initializes the specified deserialized runtime state.
            </summary>
            <param name="deserializedRuntimeState">State of the deserialized runtime.</param>
            <remarks>
            used for Load scenarios where you are rehydrating a WorkflowInstance        
            </remarks>
        </member>
        <member name="M:System.Activities.Hosting.WorkflowInstance.Initialize(System.Object,System.Activities.DynamicUpdate.DynamicUpdateMap)">
            <summary>
            Initializes the specified deserialized runtime state.
            </summary>
            <param name="deserializedRuntimeState">State of the deserialized runtime.</param>
            <param name="updateMap">The update map.</param>
            <exception cref="T:System.Activities.DynamicUpdate.InstanceUpdateException"></exception>
        </member>
        <member name="F:System.Activities.Hosting.WorkflowInstanceExtensionCollection.singleTypeCache">
            <summary>
            cache for cases where we have a single match        
            </summary>
        </member>
        <member name="F:System.Activities.Hosting.WorkflowInstanceExtensionCollection.lastTypeCached">
            <summary>
            optimization for common extension in a loop/parallel (like Compensation or Send)        
            </summary>
        </member>
        <member name="F:System.Activities.Hosting.WorkflowInstanceExtensionCollection.extensionManager">
            <summary>
            temporary pointer to our parent manager between ctor and Initialize        
            </summary>
        </member>
        <member name="T:System.Activities.Hosting.WorkflowInstanceExtensionManager">
            <summary>
            The WorkflowInstanceExtensionManager class.
            </summary>
            <remarks>
            One workflow host should have one manager, and one manager should have one catalog.
            One workflow instance should have one container as the instance itself would be
            added as one extension to the container as well    
            </remarks>
        </member>
        <member name="F:System.Activities.Hosting.WorkflowInstanceExtensionManager.EmptyExtensionProviders">
            <summary>
            The empty extension providers
            </summary>
            <remarks>
            using an empty list instead of null simplifies our calculations immensely        
            </remarks>
        </member>
        <member name="M:System.Activities.Hosting.WorkflowInstanceExtensionManager.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Activities.Hosting.WorkflowInstanceExtensionManager"/> class.
            </summary>
        </member>
        <member name="M:System.Activities.Hosting.WorkflowInstanceExtensionManager.Add(System.Object)">
            <summary>
            Adds the specified singleton extension.
            </summary>
            <param name="singletonExtension">The singleton extension.</param>
            <remarks>
            use this method to add the singleton extension        
            </remarks>
        </member>
        <member name="M:System.Activities.Hosting.WorkflowInstanceExtensionManager.Add``1(System.Func{``0})">
            <summary>
            Adds the specified extension creation function.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="extensionCreationFunction">The extension creation function.</param>
            <remarks>
            use this method to add a per-instance extension        
            </remarks>
        </member>
        <member name="M:System.Activities.Hosting.WorkflowInstanceExtensionManager.MakeReadOnly">
            <summary>
            Makes the read only.
            </summary>
        </member>
        <member name="T:System.Activities.Internals.ReflectionExtensions">
            <summary>
            The ReflectionExtensions class.
            </summary>
        </member>
        <member name="M:System.Activities.Internals.ReflectionExtensions.Assembly(System.Type)">
            <summary>
            Assemblies the specified type.
            </summary>
            <param name="type">The type.</param>
            <returns>Assembly.</returns>
        </member>
        <member name="M:System.Activities.Internals.ReflectionExtensions.BaseType(System.Type)">
            <summary>
            Bases the type.
            </summary>
            <param name="type">The type.</param>
            <returns>Type.</returns>
        </member>
        <member name="M:System.Activities.Internals.ReflectionExtensions.ContainsGenericParameters(System.Type)">
            <summary>
            Determines whether [contains generic parameters] [the specified type].
            </summary>
            <param name="type">The type.</param>
            <returns><c>true</c> if [contains generic parameters] [the specified type]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:System.Activities.Internals.ReflectionExtensions.GetConstructor(System.Type,System.Type[])">
            <summary>
            Gets the constructor.
            </summary>
            <param name="type">The type.</param>
            <param name="types">The types.</param>
            <returns>ConstructorInfo.</returns>
            <exception cref="T:System.PlatformNotSupportedException"></exception>
        </member>
        <member name="M:System.Activities.Internals.ReflectionExtensions.GetConstructor(System.Type,System.Reflection.BindingFlags,System.Object,System.Type[],System.Object[])">
            <summary>
            Gets the constructor.
            </summary>
            <param name="type">The type.</param>
            <param name="bindingAttr">The binding attribute.</param>
            <param name="binder">The binder.</param>
            <param name="types">The types.</param>
            <param name="modifiers">The modifiers.</param>
            <returns>ConstructorInfo.</returns>
            <exception cref="T:System.PlatformNotSupportedException"></exception>
        </member>
        <member name="M:System.Activities.Internals.ReflectionExtensions.GetProperty(System.Type,System.String,System.Reflection.BindingFlags)">
            <summary>
            Gets the property.
            </summary>
            <param name="type">The type.</param>
            <param name="name">The name.</param>
            <param name="bindingAttr">The binding attribute.</param>
            <returns>PropertyInfo.</returns>
            <exception cref="T:System.PlatformNotSupportedException"></exception>
        </member>
        <member name="M:System.Activities.Internals.ReflectionExtensions.GetMethod(System.Type,System.String,System.Reflection.BindingFlags,System.Type[],System.Type[])">
            <summary>
            Gets the method.
            </summary>
            <param name="type">The type.</param>
            <param name="methodName">Name of the method.</param>
            <param name="bindingFlags">The binding flags.</param>
            <param name="parameterTypes">The parameter types.</param>
            <param name="genericTypeArguments">The generic type arguments.</param>
            <returns>MethodInfo.</returns>
        </member>
        <member name="M:System.Activities.Internals.ReflectionExtensions.IsAbstract(System.Type)">
            <summary>
            Determines whether the specified type is abstract.
            </summary>
            <param name="type">The type.</param>
            <returns><c>true</c> if the specified type is abstract; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:System.Activities.Internals.ReflectionExtensions.IsClass(System.Type)">
            <summary>
            Determines whether the specified type is class.
            </summary>
            <param name="type">The type.</param>
            <returns><c>true</c> if the specified type is class; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:System.Activities.Internals.ReflectionExtensions.IsDefined(System.Type,System.Type,System.Boolean)">
            <summary>
            Determines whether the specified attribute type is defined.
            </summary>
            <param name="type">The type.</param>
            <param name="attributeType">Type of the attribute.</param>
            <param name="inherit">if set to <c>true</c> [inherit].</param>
            <returns><c>true</c> if the specified attribute type is defined; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:System.Activities.Internals.ReflectionExtensions.IsEnum(System.Type)">
            <summary>
            Determines whether the specified type is enum.
            </summary>
            <param name="type">The type.</param>
            <returns><c>true</c> if the specified type is enum; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:System.Activities.Internals.ReflectionExtensions.IsGenericType(System.Type)">
            <summary>
            Determines whether [is generic type] [the specified type].
            </summary>
            <param name="type">The type.</param>
            <returns><c>true</c> if [is generic type] [the specified type]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:System.Activities.Internals.ReflectionExtensions.IsInterface(System.Type)">
            <summary>
            Determines whether the specified type is interface.
            </summary>
            <param name="type">The type.</param>
            <returns><c>true</c> if the specified type is interface; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:System.Activities.Internals.ReflectionExtensions.IsInstanceOfType(System.Type,System.Object)">
            <summary>
            Determines whether [is instance of type] [the specified o].
            </summary>
            <param name="type">The type.</param>
            <param name="o">The o.</param>
            <returns><c>true</c> if [is instance of type] [the specified o]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:System.Activities.Internals.ReflectionExtensions.IsMarshalByRef(System.Type)">
            <summary>
            Determines whether [is marshal by reference] [the specified type].
            </summary>
            <param name="type">The type.</param>
            <returns><c>true</c> if [is marshal by reference] [the specified type]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:System.Activities.Internals.ReflectionExtensions.IsNotPublic(System.Type)">
            <summary>
            Determines whether [is not public] [the specified type].
            </summary>
            <param name="type">The type.</param>
            <returns><c>true</c> if [is not public] [the specified type]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:System.Activities.Internals.ReflectionExtensions.IsSealed(System.Type)">
            <summary>
            Determines whether the specified type is sealed.
            </summary>
            <param name="type">The type.</param>
            <returns><c>true</c> if the specified type is sealed; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:System.Activities.Internals.ReflectionExtensions.IsValueType(System.Type)">
            <summary>
            Determines whether [is value type] [the specified type].
            </summary>
            <param name="type">The type.</param>
            <returns><c>true</c> if [is value type] [the specified type]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:System.Activities.Internals.ReflectionExtensions.GetInterfaceMap(System.Type,System.Type)">
            <summary>
            Gets the interface map.
            </summary>
            <param name="type">The type.</param>
            <param name="interfaceType">Type of the interface.</param>
            <returns>InterfaceMapping.</returns>
        </member>
        <member name="M:System.Activities.Internals.ReflectionExtensions.GetMember(System.Type,System.String,System.Reflection.BindingFlags)">
            <summary>
            Gets the member.
            </summary>
            <param name="type">The type.</param>
            <param name="name">The name.</param>
            <param name="bindingAttr">The binding attribute.</param>
            <returns>MemberInfo[].</returns>
            <exception cref="T:System.PlatformNotSupportedException"></exception>
        </member>
        <member name="M:System.Activities.Internals.ReflectionExtensions.GetMembers(System.Type,System.Reflection.BindingFlags)">
            <summary>
            Gets the members.
            </summary>
            <param name="type">The type.</param>
            <param name="bindingAttr">The binding attribute.</param>
            <returns>MemberInfo[].</returns>
            <exception cref="T:System.PlatformNotSupportedException"></exception>
        </member>
        <member name="M:System.Activities.Internals.ReflectionExtensions.GetTypeCode(System.Type)">
            <summary>
            Gets the type code.
            </summary>
            <param name="type">The type.</param>
            <returns>TypeCode.</returns>
        </member>
        <member name="M:System.Activities.Internals.ReflectionExtensions.IsPublic(System.Reflection.ConstructorInfo)">
            <summary>
            Determines whether the specified ci is public.
            </summary>
            <param name="ci">The ci.</param>
            <returns><c>true</c> if the specified ci is public; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.PlatformNotSupportedException"></exception>
        </member>
        <member name="M:System.Activities.Internals.ReflectionExtensions.Invoke(System.Reflection.ConstructorInfo,System.Reflection.BindingFlags,System.Object,System.Object[],System.Globalization.CultureInfo)">
            <summary>
            Invokes the specified invoke attribute.
            </summary>
            <param name="ci">The ci.</param>
            <param name="invokeAttr">The invoke attribute.</param>
            <param name="binder">The binder.</param>
            <param name="parameters">The parameters.</param>
            <param name="culture">The culture.</param>
            <returns>System.Object.</returns>
            <exception cref="T:System.PlatformNotSupportedException"></exception>
        </member>
        <member name="M:System.Activities.Internals.ReflectionExtensions.MethodHandle(System.Reflection.MethodBase)">
            <summary>
            Methods the handle.
            </summary>
            <param name="mb">The mb.</param>
            <returns>RuntimeMethodHandle.</returns>
            <exception cref="T:System.PlatformNotSupportedException"></exception>
        </member>
        <member name="M:System.Activities.Internals.ReflectionExtensions.MethodHandle(System.Reflection.MethodInfo)">
            <summary>
            Methods the handle.
            </summary>
            <param name="mi">The mi.</param>
            <returns>RuntimeMethodHandle.</returns>
            <exception cref="T:System.PlatformNotSupportedException"></exception>
        </member>
        <member name="M:System.Activities.Internals.ReflectionExtensions.ReflectedType(System.Reflection.MethodInfo)">
            <summary>
            Reflecteds the type.
            </summary>
            <param name="mi">The mi.</param>
            <returns>Type.</returns>
            <exception cref="T:System.PlatformNotSupportedException"></exception>
        </member>
        <member name="M:System.Activities.Internals.ReflectionExtensions.ParamArrayType(System.Reflection.ParameterInfo)">
            <summary>
            If the ParameterInfo represents a "params" array, return the Type of that params array.
            Otherwise, return null.
            </summary>
            <param name="parameterInfo">The parameter information.</param>
            <returns>Type.</returns>
        </member>
        <member name="M:System.Activities.Internals.ReflectionExtensions.ParameterTypeMatch(System.Reflection.ParameterInfo,System.Type)">
            <summary>
            Returns true if the type of the ParameterInfo matches parameterType or
            if parameterType is null and the ParameterInfo has a default value (optional parameter)
            </summary>
            <param name="parameterInfo">The parameter information.</param>
            <param name="parameterType">Type of the parameter.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:System.Activities.Internals.ReflectionExtensions.LastParameterInfoMatchesRemainingParameters(System.Reflection.ParameterInfo[],System.Type[])">
            <summary>
            Returns true if the last formal parameter (parameterInfos) matches the last of the parameterTypes,
            taking into account the possibility that the last formal parameter is a "params" array.
            </summary>
            <param name="parameterInfos">The parameter infos.</param>
            <param name="parameterTypes">The parameter types.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:System.Activities.Internals.ReflectionExtensions.ParametersMatch(System.Reflection.ParameterInfo[],System.Type[])">
            <summary>
            Returns true if the specified ParameterInfo[] (formal parameters)
            matches the specified Type[] (actual parameters).
            Takes into account optional parameters (with default values) and the last
            formal parameter being a "params" array.
            </summary>
            <param name="parameterInfos">The parameter infos.</param>
            <param name="parameterTypes">The parameter types.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:System.Activities.Location">
            <summary>
            The Location class.
            </summary>
        </member>
        <member name="M:System.Activities.Location.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Activities.Location" /> class.
            </summary>
        </member>
        <member name="P:System.Activities.Location.BufferGetsOnCollapse">
            <summary>
            Gets a value indicating whether [buffer gets on collapse].
            </summary>
            <value><c>true</c> if [buffer gets on collapse]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:System.Activities.Location.LocationType">
            <summary>
            Gets the type of the location.
            </summary>
            <value>The type of the location.</value>
        </member>
        <member name="P:System.Activities.Location.TemporaryResolutionEnvironment">
            <summary>
            Gets the temporary resolution environment.
            </summary>
            <value>The temporary resolution environment.</value>
            <remarks>
            When we are resolving an expression that resolves to a reference to a location we need
            some way of notifying the LocationEnvironment that it should extract the inner location
            and throw away the outer one. OutArgument and InOutArgument create these
            TemporaryResolutionLocations if their expression resolution goes async and
            LocationEnvironment gets rid of them in CollapseTemporaryResolutionLocations().
            </remarks>
        </member>
        <member name="P:System.Activities.Location.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="P:System.Activities.Location.CanBeMapped">
            <summary>
            Gets a value indicating whether this instance can be mapped.
            </summary>
            <value><c>true</c> if this instance can be mapped; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:System.Activities.Location.SerializedTemporaryResolutionData">
            <summary>
            Gets or sets the serialized temporary resolution data.
            </summary>
            <value>The serialized temporary resolution data.</value>
        </member>
        <member name="P:System.Activities.Location.ValueCore">
            <summary>
            Gets or sets the value core.
            </summary>
            <value>The value core.</value>
        </member>
        <member name="M:System.Activities.Location.CreateDefaultValue">
            <summary>
            Creates the default value.
            </summary>
            <returns>System.Object.</returns>
        </member>
        <member name="M:System.Activities.Location.CreateReference(System.Boolean)">
            <summary>
            Creates the reference.
            </summary>
            <param name="bufferGets">if set to <c>true</c> [buffer gets].</param>
            <returns>Location.</returns>
        </member>
        <member name="M:System.Activities.Location.SetTemporaryResolutionData(System.Activities.Runtime.LocationEnvironment,System.Boolean)">
            <summary>
            Sets the temporary resolution data.
            </summary>
            <param name="resolutionEnvironment">The resolution environment.</param>
            <param name="bufferGetsOnCollapse">if set to <c>true</c> [buffer gets on collapse].</param>
        </member>
        <member name="T:System.Activities.Location.ReferenceLocation">
            <summary>
            The ReferenceLocation class.
            Implements the <see cref="T:System.Activities.Location" />
            </summary>
            <seealso cref="T:System.Activities.Location" />
        </member>
        <member name="M:System.Activities.Location.ReferenceLocation.#ctor(System.Activities.Location,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Activities.Location.ReferenceLocation"/> class.
            </summary>
            <param name="innerLocation">The inner location.</param>
            <param name="bufferGets">if set to <c>true</c> [buffer gets].</param>
        </member>
        <member name="P:System.Activities.Location.ReferenceLocation.LocationType">
            <summary>
            Gets the type of the location.
            </summary>
            <value>The type of the location.</value>
        </member>
        <member name="P:System.Activities.Location.ReferenceLocation.ValueCore">
            <summary>
            Gets or sets the value core.
            </summary>
            <value>The value core.</value>
        </member>
        <member name="P:System.Activities.Location.ReferenceLocation.SerializedInnerLocation">
            <summary>
            Gets or sets the serialized inner location.
            </summary>
            <value>The serialized inner location.</value>
        </member>
        <member name="P:System.Activities.Location.ReferenceLocation.SerializedBufferGets">
            <summary>
            Gets or sets a value indicating whether [serialized buffer gets].
            </summary>
            <value><c>true</c> if [serialized buffer gets]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:System.Activities.Location.ReferenceLocation.SerializedBufferedValue">
            <summary>
            Gets or sets the serialized buffered value.
            </summary>
            <value>The serialized buffered value.</value>
        </member>
        <member name="M:System.Activities.Location.ReferenceLocation.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="T:System.Activities.Location.TemporaryResolutionData">
            <summary>
            The TemporaryResolutionData structure.
            </summary>
        </member>
        <member name="P:System.Activities.Location.TemporaryResolutionData.TemporaryResolutionEnvironment">
            <summary>
            Gets or sets the temporary resolution environment.
            </summary>
            <value>The temporary resolution environment.</value>
        </member>
        <member name="P:System.Activities.Location.TemporaryResolutionData.BufferGetsOnCollapse">
            <summary>
            Gets or sets a value indicating whether [buffer gets on collapse].
            </summary>
            <value><c>true</c> if [buffer gets on collapse]; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:System.Activities.Location`1">
            <summary>
            The Location class. Implements the <see cref="T:System.Activities.Location" />
            </summary>
            <typeparam name="T"></typeparam>
            <seealso cref="T:System.Activities.Location" />
        </member>
        <member name="M:System.Activities.Location`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Activities.Location`1" /> class.
            </summary>
        </member>
        <member name="P:System.Activities.Location`1.LocationType">
            <summary>
            Gets the type of the location.
            </summary>
            <value>The type of the location.</value>
        </member>
        <member name="P:System.Activities.Location`1.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="P:System.Activities.Location`1.TypedValue">
            <summary>
            Gets or sets the typed value.
            </summary>
            <value>The typed value.</value>
        </member>
        <member name="P:System.Activities.Location`1.ValueCore">
            <summary>
            Gets or sets the value core.
            </summary>
            <value>The value core.</value>
        </member>
        <member name="M:System.Activities.Location`1.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="T:System.Activities.Location`1.ReferenceLocation">
            <summary>
            The ReferenceLocation class.
            Implements the <see cref="T:System.Activities.Location`1" />
            </summary>
            <seealso cref="T:System.Activities.Location`1" />
        </member>
        <member name="M:System.Activities.Location`1.ReferenceLocation.#ctor(System.Activities.Location{`0},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Activities.Location`1.ReferenceLocation"/> class.
            </summary>
            <param name="innerLocation">The inner location.</param>
            <param name="bufferGets">if set to <c>true</c> [buffer gets].</param>
        </member>
        <member name="P:System.Activities.Location`1.ReferenceLocation.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="P:System.Activities.Location`1.ReferenceLocation.SerializedInnerLocation">
            <summary>
            Gets or sets the serialized inner location.
            </summary>
            <value>The serialized inner location.</value>
        </member>
        <member name="P:System.Activities.Location`1.ReferenceLocation.SerializedBufferGets">
            <summary>
            Gets or sets a value indicating whether [serialized buffer gets].
            </summary>
            <value><c>true</c> if [serialized buffer gets]; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:System.Activities.Location`1.ReferenceLocation.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="M:System.Activities.NativeActivityMetadata.AddChild(System.Activities.Activity,System.Object)">
            <summary>
            Adds the child.
            </summary>
            <param name="child">The child.</param>
            <param name="origin">The origin.</param>
        </member>
        <member name="M:System.Activities.NativeActivityMetadata.SetImplementationVariablesCollection(System.Collections.ObjectModel.Collection{System.Activities.Variable})">
            <summary>
            Sets the implementation variables collection.
            </summary>
            <param name="implementationVariables">The implementation variables.</param>
        </member>
        <member name="T:System.Activities.OutArgument">
            <summary>
            The OutArgument class.
            Implements the <see cref="T:System.Activities.Argument" />
            </summary>
            <seealso cref="T:System.Activities.Argument" />
        </member>
        <member name="M:System.Activities.OutArgument.CreateReference(System.Activities.OutArgument,System.String)">
            <summary>
            Creates the reference.
            </summary>
            <param name="argumentToReference">The argument to reference.</param>
            <param name="referencedArgumentName">Name of the referenced argument.</param>
            <returns>OutArgument.</returns>
        </member>
        <member name="M:System.Activities.OutArgument.CreateReference(System.Activities.InOutArgument,System.String)">
            <summary>
            Creates the reference.
            </summary>
            <param name="argumentToReference">The argument to reference.</param>
            <param name="referencedArgumentName">Name of the referenced argument.</param>
            <returns>OutArgument.</returns>
        </member>
        <member name="T:System.Activities.OutArgument`1">
            <summary>
            The OutArgument class. This class cannot be inherited.
            Implements the <see cref="T:System.Activities.OutArgument" />
            </summary>
            <typeparam name="T"></typeparam>
            <seealso cref="T:System.Activities.OutArgument" />
        </member>
        <member name="M:System.Activities.OutArgument`1.#ctor(System.Activities.Variable)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Activities.OutArgument`1"/> class.
            </summary>
            <param name="variable">The variable.</param>
        </member>
        <member name="M:System.Activities.OutArgument`1.#ctor(System.Activities.DelegateArgument)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Activities.OutArgument`1"/> class.
            </summary>
            <param name="delegateArgument">The delegate argument.</param>
        </member>
        <member name="M:System.Activities.OutArgument`1.#ctor(System.Linq.Expressions.Expression{System.Func{System.Activities.ActivityContext,`0}})">
            <summary>
            Initializes a new instance of the <see cref="T:System.Activities.OutArgument`1"/> class.
            </summary>
            <param name="expression">The expression.</param>
        </member>
        <member name="M:System.Activities.OutArgument`1.#ctor(System.Activities.Activity{System.Activities.Location{`0}})">
            <summary>
            Initializes a new instance of the <see cref="T:System.Activities.OutArgument`1"/> class.
            </summary>
            <param name="expression">The expression.</param>
        </member>
        <member name="M:System.Activities.OutArgument`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Activities.OutArgument`1"/> class.
            </summary>
        </member>
        <member name="P:System.Activities.OutArgument`1.Expression">
            <summary>
            Gets or sets the expression.
            </summary>
            <value>The expression.</value>
        </member>
        <member name="M:System.Activities.OutArgument`1.op_Implicit(System.Activities.Variable)~System.Activities.OutArgument{`0}">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Activities.Variable"/> to <see cref="T:System.Activities.OutArgument`1"/>.
            </summary>
            <param name="variable">The variable.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:System.Activities.OutArgument`1.op_Implicit(System.Activities.DelegateArgument)~System.Activities.OutArgument{`0}">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Activities.DelegateArgument"/> to <see cref="T:System.Activities.OutArgument`1"/>.
            </summary>
            <param name="delegateArgument">The delegate argument.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:System.Activities.OutArgument`1.op_Implicit(System.Activities.Activity{System.Activities.Location{`0}})~System.Activities.OutArgument{`0}">
            <summary>
            Performs an implicit conversion from <see cref="!:Activity&lt;Location&lt;T&gt;&gt;"/> to <see cref="T:System.Activities.OutArgument`1"/>.
            </summary>
            <param name="expression">The expression.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:System.Activities.OutArgument`1.FromVariable(System.Activities.Variable)">
            <summary>
            Froms the variable.
            </summary>
            <param name="variable">The variable.</param>
            <returns>OutArgument&lt;T&gt;.</returns>
        </member>
        <member name="M:System.Activities.OutArgument`1.FromDelegateArgument(System.Activities.DelegateArgument)">
            <summary>
            Froms the delegate argument.
            </summary>
            <param name="delegateArgument">The delegate argument.</param>
            <returns>OutArgument&lt;T&gt;.</returns>
        </member>
        <member name="M:System.Activities.OutArgument`1.FromExpression(System.Activities.Activity{System.Activities.Location{`0}})">
            <summary>
            Froms the expression.
            </summary>
            <param name="expression">The expression.</param>
            <returns>OutArgument&lt;T&gt;.</returns>
        </member>
        <member name="M:System.Activities.OutArgument`1.GetLocation(System.Activities.ActivityContext)">
            <summary>
            Gets the location.
            </summary>
            <param name="context">The context.</param>
            <returns>Location&lt;T&gt;.</returns>
            <remarks>
            Soft-Link: This method is referenced through reflection by
            ExpressionUtilities.TryRewriteLambdaExpression.  Update that
            file if the signature changes.        
            </remarks>
        </member>
        <member name="M:System.Activities.OutArgument`1.Get(System.Activities.ActivityContext)">
            <summary>
            Gets the specified context.
            </summary>
            <param name="context">The context.</param>
            <returns>T.</returns>
            <remarks>
            Soft-Link: This method is referenced through reflection by
            ExpressionUtilities.TryRewriteLambdaExpression.  Update that
            file if the signature changes.        
            </remarks>
        </member>
        <member name="M:System.Activities.OutArgument`1.Set(System.Activities.ActivityContext,`0)">
            <summary>
            Sets the specified context.
            </summary>
            <param name="context">The context.</param>
            <param name="value">The value.</param>
        </member>
        <member name="T:System.Activities.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:System.Activities.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:System.Activities.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:System.Activities.Properties.Resources.DoesNotHandleAnyExceptionsComingFromRollback">
            <summary>
              Looks up a localized string similar to Doesn&apos;t handle any exceptions coming from Rollback..
            </summary>
        </member>
        <member name="P:System.Activities.Properties.Resources.ShouldOnlyBeCalledWhenArgumentIsBound">
            <summary>
              Looks up a localized string similar to should only be called when argument is bound.
            </summary>
        </member>
        <member name="P:System.Activities.Properties.Resources.ThisActivityShouldNeverBeExecutedItIsADummyActivity">
            <summary>
              Looks up a localized string similar to This activity should never be executed. It is a dummy activity.
            </summary>
        </member>
        <member name="P:System.Activities.Properties.Resources.ThisShouldOnlyBeCalledForNonEmptyBindings">
            <summary>
              Looks up a localized string similar to This should only be called for non-empty bindings..
            </summary>
        </member>
        <member name="P:System.Activities.Properties.Resources.WeAlwaysHaveAnOriginalTransaction">
            <summary>
              Looks up a localized string similar to We always have an original transaction..
            </summary>
        </member>
        <member name="P:System.Activities.Properties.Resources.WeShouldNotCallIdUnlessWeHaveARuntimeArgument">
            <summary>
              Looks up a localized string similar to We shouldn&apos;t call Id unless we have a runtime argument..
            </summary>
        </member>
        <member name="P:System.Activities.Properties.Resources.WeShouldOnlyAddRecordsIfWeHaveATrackingProvider">
            <summary>
              Looks up a localized string similar to We should only add records if we have a tracking provider..
            </summary>
        </member>
        <member name="P:System.Activities.Properties.Resources.WeShouldOnlyTryToTrackIfWeHaveATrackingProvider">
            <summary>
              Looks up a localized string similar to We should only try to track if we have a tracking provider..
            </summary>
        </member>
        <member name="T:System.Activities.RuntimeArgument">
            <summary>
            The RuntimeArgument class. This class cannot be inherited.
            Implements the <see cref="T:System.Activities.LocationReference" />
            </summary>
            <seealso cref="T:System.Activities.LocationReference" />
        </member>
        <member name="T:System.Activities.RuntimeArgument.CRCHashCode">
            <summary>
            This class implements iSCSI CRC-32 check outlined in IETF RFC 3720.
            it's marked internal so that DataModel CIT can access it        
            </summary>
        </member>
        <member name="F:System.Activities.RuntimeArgument.CRCHashCode.polynomial">
            <summary>
            Reflected value for iSCSI CRC-32 polynomial 0x1edc6f41            
            </summary>
        </member>
        <member name="M:System.Activities.RuntimeArgument.#ctor(System.String,System.Type,System.Nullable{System.Activities.ArgumentDirection})">
            <summary>
            Initializes a new instance of the <see cref="T:System.Activities.RuntimeArgument"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="argumentType">Type of the argument.</param>
            <param name="direction">The direction.</param>
        </member>
        <member name="M:System.Activities.RuntimeArgument.#ctor(System.String,System.Type,System.Nullable{System.Activities.ArgumentDirection},System.Collections.Generic.List{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:System.Activities.RuntimeArgument"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="argumentType">Type of the argument.</param>
            <param name="direction">The direction.</param>
            <param name="overloadGroupNames">The overload group names.</param>
        </member>
        <member name="M:System.Activities.RuntimeArgument.#ctor(System.String,System.Type,System.Nullable{System.Activities.ArgumentDirection},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Activities.RuntimeArgument"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="argumentType">Type of the argument.</param>
            <param name="direction">The direction.</param>
            <param name="isRequired">if set to <c>true</c> [is required].</param>
        </member>
        <member name="M:System.Activities.RuntimeArgument.#ctor(System.String,System.Type,System.Nullable{System.Activities.ArgumentDirection},System.Boolean,System.Collections.Generic.List{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:System.Activities.RuntimeArgument"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="argumentType">Type of the argument.</param>
            <param name="direction">The direction.</param>
            <param name="isRequired">if set to <c>true</c> [is required].</param>
            <param name="overloadGroupNames">The overload group names.</param>
        </member>
        <member name="M:System.Activities.RuntimeArgument.#ctor(System.String,System.Type,System.Activities.ArgumentDirection,System.Boolean,System.Collections.Generic.List{System.String},System.ComponentModel.PropertyDescriptor,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Activities.RuntimeArgument"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="argumentType">Type of the argument.</param>
            <param name="direction">The direction.</param>
            <param name="isRequired">if set to <c>true</c> [is required].</param>
            <param name="overloadGroups">The overload groups.</param>
            <param name="bindingProperty">The binding property.</param>
            <param name="propertyOwner">The property owner.</param>
        </member>
        <member name="M:System.Activities.RuntimeArgument.#ctor(System.String,System.Type,System.Activities.ArgumentDirection,System.Boolean,System.Collections.Generic.List{System.String},System.Activities.Argument)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Activities.RuntimeArgument"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="argumentType">Type of the argument.</param>
            <param name="direction">The direction.</param>
            <param name="isRequired">if set to <c>true</c> [is required].</param>
            <param name="overloadGroups">The overload groups.</param>
            <param name="argument">The argument.</param>
        </member>
        <member name="P:System.Activities.RuntimeArgument.EvaluationOrderComparer">
            <summary>
            Gets the evaluation order comparer.
            </summary>
            <value>The evaluation order comparer.</value>
        </member>
        <member name="P:System.Activities.RuntimeArgument.NameCore">
            <summary>
            Gets the name core.
            </summary>
            <value>The name core.</value>
        </member>
        <member name="P:System.Activities.RuntimeArgument.TypeCore">
            <summary>
            Gets the type core.
            </summary>
            <value>The type core.</value>
        </member>
        <member name="P:System.Activities.RuntimeArgument.Direction">
            <summary>
            Gets the direction.
            </summary>
            <value>The direction.</value>
        </member>
        <member name="P:System.Activities.RuntimeArgument.IsRequired">
            <summary>
            Gets a value indicating whether this instance is required.
            </summary>
            <value><c>true</c> if this instance is required; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:System.Activities.RuntimeArgument.OverloadGroupNames">
            <summary>
            Gets the overload group names.
            </summary>
            <value>The overload group names.</value>
        </member>
        <member name="P:System.Activities.RuntimeArgument.BoundArgument">
            <summary>
            Gets or sets the bound argument.
            </summary>
            <value>The bound argument.</value>
            <remarks>
            We allow this to be set an unlimited number of times.  We also allow it to be set back to null.                
            </remarks>
        </member>
        <member name="P:System.Activities.RuntimeArgument.IsResult">
            <summary>
            Gets a value indicating whether this instance is result.
            </summary>
            <value><c>true</c> if this instance is result; otherwise, <c>false</c>.</value>
            <exception cref="T:System.InvalidOperationException"></exception>
            <remarks>
            returns true if this is the "Result" argument of an <see cref="T:System.Activities.Activity`1"/>
            </remarks>
        </member>
        <member name="M:System.Activities.RuntimeArgument.TryPopulateValue(System.Activities.Runtime.LocationEnvironment,System.Activities.ActivityInstance,System.Activities.Runtime.ActivityExecutor,System.Object,System.Activities.Location,System.Boolean)">
            <summary>
            Tries the populate value.
            </summary>
            <param name="targetEnvironment">The target environment.</param>
            <param name="targetActivityInstance">The target activity instance.</param>
            <param name="executor">The executor.</param>
            <param name="argumentValueOverride">The argument value override.</param>
            <param name="resultLocation">The result location.</param>
            <param name="skipFastPath">if set to <c>true</c> [skip fast path].</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:System.Activities.RuntimeArgument.GetLocation(System.Activities.ActivityContext)">
            <summary>
            Gets the location.
            </summary>
            <param name="context">The context.</param>
            <returns>Location.</returns>
            <exception cref="T:System.InvalidOperationException">
            </exception>
        </member>
        <member name="M:System.Activities.RuntimeArgument.Get(System.Activities.ActivityContext)">
            <summary>
            Gets the specified context.
            </summary>
            <param name="context">The context.</param>
            <returns>System.Nullable&lt;System.Object&gt;.</returns>
            <remarks>
            Soft-Link: This method is referenced through reflection by
            ExpressionUtilities.TryRewriteLambdaExpression.  Update that
            file if the signature changes.        
            </remarks>
        </member>
        <member name="M:System.Activities.RuntimeArgument.Get``1(System.Activities.ActivityContext)">
            <summary>
            Gets the specified context.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="context">The context.</param>
            <returns>T.</returns>
            <remarks>
            Soft-Link: This method is referenced through reflection by
            ExpressionUtilities.TryRewriteLambdaExpression.  Update that
            file if the signature changes.        
            </remarks>
        </member>
        <member name="M:System.Activities.RuntimeArgument.Set(System.Activities.ActivityContext,System.Object)">
            <summary>
            Sets the specified context.
            </summary>
            <param name="context">The context.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:System.Activities.RuntimeArgument.InternalGetLocation(System.Activities.Runtime.LocationEnvironment)">
            <summary>
            This method exists for the Debugger        
            </summary>
            <param name="environment">The environment.</param>
            <returns>Location.</returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:System.Activities.RuntimeArgument.ProcessViolation(System.Activities.Activity,System.String)">
            <summary>
            Processes the violation.
            </summary>
            <param name="owner">The owner.</param>
            <param name="errorMessage">The error message.</param>
            <returns>ValidationError.</returns>
        </member>
        <member name="M:System.Activities.RuntimeArgument.ThrowIfNotInTree">
            <summary>
            Throws if not in tree.
            </summary>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:System.Activities.RuntimeArgument.EnsureHash">
            <summary>Ensures the hash.</summary>
        </member>
        <member name="T:System.Activities.RuntimeArgument.InternalEvaluationOrderComparer">
            <summary>
            The InternalEvaluationOrderComparer class.
            Implements the <see cref="!:System.Collections.Generic.IComparer&lt;System.Activities.RuntimeArgument&gt;" />
            </summary>
            <seealso cref="!:System.Collections.Generic.IComparer&lt;System.Activities.RuntimeArgument&gt;" />
        </member>
        <member name="M:System.Activities.RuntimeArgument.InternalEvaluationOrderComparer.Compare(System.Activities.RuntimeArgument,System.Activities.RuntimeArgument)">
            <summary>
            Compares two objects and returns a value indicating whether one is less than, equal to, or greater than the other.
            </summary>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
            <returns>A signed integer that indicates the relative values of <paramref name="x" /> and <paramref name="y" />, as shown in the following table.
            Value
            Meaning
            Less than zero
            <paramref name="x" /> is less than <paramref name="y" />.
            Zero
            <paramref name="x" /> equals <paramref name="y" />.
            Greater than zero
            <paramref name="x" /> is greater than <paramref name="y" />.</returns>
        </member>
        <member name="M:System.Activities.RuntimeArgument.InternalEvaluationOrderComparer.CompareNameHashes(System.Activities.RuntimeArgument,System.Activities.RuntimeArgument)">
            <summary>
            Compares the name hashes.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="F:System.Activities.Runtime.ActivityExecutor._emptyWorkItemPool">
            <summary>
            work item pools (for performance)
            </summary>
        </member>
        <member name="F:System.Activities.Runtime.ActivityExecutor._codeActivityContextPool">
            <summary>
            context pools (for performance)
            </summary>
        </member>
        <member name="P:System.Activities.Runtime.ActivityExecutor.EmptyEnvironment">
            <summary>
            This only gets accessed by root activities which are resolving arguments. Since that
            could at most be the real root and any secondary roots it doesn't seem necessary to cache
            the empty environment.
            </summary>
        </member>
        <member name="P:System.Activities.Runtime.ActivityExecutor.WorkflowIdentity">
            <summary>
            Gets or sets the workflow identity.
            </summary>
            <value>The workflow identity.</value>
        </member>
        <member name="P:System.Activities.Runtime.ActivityExecutor.SerializedProgramMapping">
            <summary>
            map from activity names to (active) associated activity instances
            </summary>
        </member>
        <member name="P:System.Activities.Runtime.ActivityExecutor.RootPropertyManager">
            <summary>
            may be null
            </summary>
        </member>
        <member name="P:System.Activities.Runtime.ActivityExecutor.Handles">
            <summary>
            Gets the handles.
            </summary>
            <value>The handles.</value>
        </member>
        <member name="M:System.Activities.Runtime.ActivityExecutor.ExecuteInResolutionContextUntyped(System.Activities.ActivityInstance,System.Activities.ActivityWithResult,System.Int64,System.Activities.Location)">
            <summary>
            evaluate an argument/variable expression using fast-path optimizations
            </summary>
            <param name="parentInstance"></param>
            <param name="expressionActivity"></param>
            <param name="instanceId"></param>
            <param name="resultLocation"></param>
        </member>
        <member name="M:System.Activities.Runtime.ActivityExecutor.ExecuteInResolutionContext``1(System.Activities.ActivityInstance,System.Activities.Activity{``0})">
            <summary>
            evaluate an argument/variable expression using fast-path optimizations
            </summary>
            <typeparam name="T"></typeparam>
            <param name="parentInstance"></param>
            <param name="expressionActivity"></param>
            <returns></returns>
        </member>
        <member name="M:System.Activities.Runtime.ActivityExecutor.GetIgnorableResultLocation(System.Activities.RuntimeArgument)">
            <summary>
            This is called by RuntimeArgument.GetLocation (via
            ActivityContext.GetIgnorableResultLocation) when the user tries to access the Result
            argument on an activity being run with SkipArgumentResolution.
            </summary>
            <param name="resultArgument"></param>
            <returns></returns>
        </member>
        <member name="M:System.Activities.Runtime.ActivityExecutor.IsDebugged">
            <summary>
            Whether it is being debugged.
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.Activities.Runtime.ActivityExecutor.PauseWhenPersistable">
            <summary>
            Called from an arbitrary thread
            </summary>
        </member>
        <member name="M:System.Activities.Runtime.ActivityExecutor.System#Transactions#IEnlistmentNotification#Prepare(System.Transactions.PreparingEnlistment)">
             <summary>
            Note - There is a scenario in the TransactedReceiveScope while dealing with server side WCF dispatcher created transactions,
            the activity instance will end up calling BeginCommit before finishing up its execution. By this we allow the executing TransactedReceiveScope activity to
            complete and the executor is "free" to respond to this Prepare notification as part of the commit processing of that server side transaction
             </summary>
             <param name="preparingEnlistment"></param>
        </member>
        <member name="T:System.Activities.Runtime.ActivityExecutor.EmptyDelegateActivity">
            <summary>
            This is used in ScheduleDelegate when the handler is null. We use this dummy activity to
            set as the 'Activity' of the completed ActivityInstance.
            </summary>
        </member>
        <member name="T:System.Activities.Runtime.ActivityExecutor.RuntimeTransactionData">
            <summary>
            This class is not DataContract since we only create instances of it while we are in
            no-persist zones
            </summary>
        </member>
        <member name="F:System.Activities.Runtime.ActivityInstanceMap.instanceMapping">
            <summary>
            map from activities to (active) associated activity instances        
            </summary>
        </member>
        <member name="M:System.Activities.Runtime.ActivityInstanceMap.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Activities.Runtime.ActivityInstanceMap" /> class.
            </summary>
        </member>
        <member name="T:System.Activities.Runtime.AsyncResult">
            <summary>
            The AsyncResult class. Implements the <see cref="T:System.IAsyncResult" />
            </summary>
            <seealso cref="T:System.IAsyncResult" />
            <remarks>AsyncResult starts acquired; Complete releases.</remarks>
        </member>
        <member name="P:System.Activities.Runtime.AsyncResult.OnCompleting">
            <summary>
            Gets or sets the on completing.
            </summary>
            <value>The on completing.</value>
            <remarks>used in conjunction with PrepareAsyncCompletion to allow for finally blocks</remarks>
        </member>
        <member name="P:System.Activities.Runtime.AsyncResult.VirtualCallback">
            <summary>
            Gets or sets the virtual callback.
            </summary>
            <value>The virtual callback.</value>
            <remarks>
            subclasses like TraceAsyncResult can use this to wrap the callback functionality in a scope
            </remarks>
        </member>
        <member name="M:System.Activities.Runtime.AsyncResult.OnContinueAsyncCompletion(System.IAsyncResult)">
            <summary>
            Called when [continue asynchronous completion].
            </summary>
            <param name="result">The result.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
            <remarks>
            Note: this should be only derived by the TransactedAsyncResult        
            </remarks>
        </member>
        <member name="M:System.Activities.Runtime.AsyncResult.SetBeforePrepareAsyncCompletionAction(System.Action)">
            <summary>
            Sets the before prepare asynchronous completion action.
            </summary>
            <param name="beforePrepareAsyncCompletionAction">The before prepare asynchronous completion action.</param>
            <remarks>
            Note: this should be used only by the TransactedAsyncResult        
            </remarks>
        </member>
        <member name="M:System.Activities.Runtime.AsyncResult.SetCheckSyncValidationFunc(System.Func{System.IAsyncResult,System.Boolean})">
            <summary>
            Sets the check synchronize validation function.
            </summary>
            <param name="checkSyncValidationFunc">The check synchronize validation function.</param>
            <remarks>
            Note: this should be used only by the TransactedAsyncResult        
            </remarks>
        </member>
        <member name="M:System.Activities.Runtime.AsyncResult.ThrowInvalidAsyncResult(System.IAsyncResult)">
            <summary>
            Throws the invalid asynchronous result.
            </summary>
            <param name="result">The result.</param>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="F:System.Activities.Runtime.AsyncResult.disposedValue">
            <summary>
            To detect redundant calls
            </summary>
        </member>
        <member name="M:System.Activities.Runtime.AsyncResult.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing">
            <c>true</c> to release both managed and unmanaged resources; <c>false</c> to release
            only unmanaged resources.
            </param>
        </member>
        <member name="M:System.Activities.Runtime.AsyncResult.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:System.Activities.Runtime.AsyncResult" /> class.
            </summary>
        </member>
        <member name="M:System.Activities.Runtime.AsyncResult.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting
            unmanaged resources.
            </summary>
        </member>
        <member name="M:System.Activities.Runtime.ExceptionTrace.AsError``1(System.AggregateException,System.String)">
            <summary>
            Extracts the first inner exception of type <typeparamref name="TPreferredException"/>
            from the <see cref="T:System.AggregateException"/> if one is present.
            </summary>
            <remarks>
            If no <typeparamref name="TPreferredException"/> inner exception is present, this
            method returns the first inner exception.   All inner exceptions will be traced,
            including the one returned.   The containing <paramref name="aggregateException"/>
            will not be traced unless there are no inner exceptions.
            </remarks>
            <typeparam name="TPreferredException">The preferred type of inner exception to extract.   
            Use <c>typeof(Exception)</c> to extract the first exception regardless of type.</typeparam>
            <param name="aggregateException">The <see cref="T:System.AggregateException"/> to examine.</param>
            <param name="eventSource">The event source to trace.</param>
            <returns>The extracted exception.  It will not be <c>null</c> 
            but it may not be of type <typeparamref name="TPreferredException"/>.</returns>
        </member>
        <member name="T:System.Activities.Runtime.ExecuteSynchronousExpressionWorkItem">
            <summary>
            Evaluates a new-fast-path (SkipArgumentsResolution and Not UseOldFastPath) expression
            </summary>
        </member>
        <member name="M:System.Activities.Runtime.ExecuteSynchronousExpressionWorkItem.#ctor">
            <summary>
            Initializes a new instance of the ExecuteSynchronousExpressionWorkItem class.
            Called by the pool.
            </summary>
        </member>
        <member name="P:System.Activities.Runtime.ExecuteSynchronousExpressionWorkItem.System#Activities#Runtime#ActivityInstanceMap#IActivityReference#Activity">
            <summary>
            Gets the Activity reference to serialize at persistence
            </summary>
        </member>
        <member name="M:System.Activities.Runtime.ExecuteSynchronousExpressionWorkItem.Initialize(System.Activities.ActivityInstance,System.Activities.ActivityWithResult,System.Int64,System.Activities.Location,System.Activities.Runtime.ResolveNextArgumentWorkItem)">
            <summary>
            Called each time a work item is acquired from the pool
            </summary>
            <param name="parentInstance">The ActivityInstance containin the variable or argument that contains this expression</param>
            <param name="expressionActivity">The expression to evaluate</param>
            <param name="instanceId">The ActivityInstanceID to use for expressionActivity</param>
            <param name="resultLocation">Location where the result of expressionActivity should be placed</param>
            <param name="nextArgumentWorkItem">WorkItem to execute after this one</param>
        </member>
        <member name="M:System.Activities.Runtime.ExecuteSynchronousExpressionWorkItem.TraceScheduled">
            <summary>
            Trace when we're scheduled
            </summary>
        </member>
        <member name="M:System.Activities.Runtime.ExecuteSynchronousExpressionWorkItem.TraceStarting">
            <summary>
            Trace when we start
            </summary>
        </member>
        <member name="M:System.Activities.Runtime.ExecuteSynchronousExpressionWorkItem.TraceCompleted">
            <summary>
            Trace when we complete
            </summary>
        </member>
        <member name="M:System.Activities.Runtime.ExecuteSynchronousExpressionWorkItem.Execute(System.Activities.Runtime.ActivityExecutor,System.Activities.Runtime.BookmarkManager)">
            <summary>
            Execute the work item
            </summary>
            <param name="executor">The executor</param>
            <param name="bookmarkManager">The bookmark manager</param>
            <returns>True to continue executing work items, false to yield the thread</returns>
        </member>
        <member name="M:System.Activities.Runtime.ExecuteSynchronousExpressionWorkItem.System#Activities#Runtime#ActivityInstanceMap#IActivityReference#Load(System.Activities.Activity,System.Activities.Runtime.ActivityInstanceMap)">
            <summary>
            Fix up activity reference after persistence
            </summary>
            <param name="activity">The persisted activity reference</param>
            <param name="instanceMap">The map containing persisted activity references</param>
        </member>
        <member name="M:System.Activities.Runtime.ExecuteSynchronousExpressionWorkItem.ReleaseToPool(System.Activities.Runtime.ActivityExecutor)">
            <summary>
            Release work item back to pool
            </summary>
            <param name="executor">Executor that owns the work item.</param>
        </member>
        <member name="T:System.Activities.Runtime.InsufficientMemoryException">
            <summary>
            The InsufficientMemoryException class.
            Implements the <see cref="T:System.Exception" />
            </summary>
            <seealso cref="T:System.Exception" />
        </member>
        <member name="M:System.Activities.Runtime.InsufficientMemoryException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Activities.Runtime.InsufficientMemoryException"/> class.
            </summary>
        </member>
        <member name="M:System.Activities.Runtime.InsufficientMemoryException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Activities.Runtime.InsufficientMemoryException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:System.Activities.Runtime.InsufficientMemoryException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Activities.Runtime.InsufficientMemoryException"/> class.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (<see langword="Nothing" /> in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="T:System.Activities.Runtime.LocationEnvironment">
            <summary>
            The LocationEnvironment class. This class cannot be inherited.
            Implements the <see cref="T:System.Activities.Runtime.ActivityInstanceMap.IActivityReferenceWithEnvironment" />
            </summary>
            <seealso cref="T:System.Activities.Runtime.ActivityInstanceMap.IActivityReferenceWithEnvironment" />
        </member>
        <member name="F:System.Activities.Runtime.LocationEnvironment.locationsToUnregister">
            <summary>
            These two fields should be null unless we're in between calls to Update() and
            OnDeserialized(). Therefore they should never need to serialize.        
            </summary>
        </member>
        <member name="M:System.Activities.Runtime.LocationEnvironment.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Activities.Runtime.LocationEnvironment"/> class.
            </summary>
        </member>
        <member name="M:System.Activities.Runtime.LocationEnvironment.#ctor(System.Activities.Runtime.LocationEnvironment,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Activities.Runtime.LocationEnvironment"/> class.
            </summary>
            <param name="parent">The parent.</param>
            <param name="capacity">The capacity.</param>
            <remarks>
            this ctor overload is to be exclusively used by DU for creating a LocationEnvironment for
            "noSymbols" ActivityInstance        
            </remarks>
        </member>
        <member name="M:System.Activities.Runtime.LocationEnvironment.#ctor(System.Activities.Runtime.ActivityExecutor,System.Activities.Activity)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Activities.Runtime.LocationEnvironment"/> class.
            </summary>
            <param name="executor">The executor.</param>
            <param name="definition">The definition.</param>
        </member>
        <member name="M:System.Activities.Runtime.LocationEnvironment.#ctor(System.Activities.Runtime.ActivityExecutor,System.Activities.Activity,System.Activities.Runtime.LocationEnvironment,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Activities.Runtime.LocationEnvironment"/> class.
            </summary>
            <param name="executor">The executor.</param>
            <param name="definition">The definition.</param>
            <param name="parent">The parent.</param>
            <param name="capacity">The capacity.</param>
        </member>
        <member name="T:System.Activities.Runtime.LocationEnvironment.GetNewVariableIndex">
            <summary>
            Delegate GetNewVariableIndex
            </summary>
            <param name="oldIndex">The old index.</param>
            <returns>System.Nullable&lt;System.Int32&gt;.</returns>
        </member>
        <member name="P:System.Activities.Runtime.LocationEnvironment.System#Activities#Runtime#ActivityInstanceMap#IActivityReference#Activity">
            <summary>
            Gets the activity.
            </summary>
            <value>The activity.</value>
        </member>
        <member name="P:System.Activities.Runtime.LocationEnvironment.Definition">
            <summary>
            Gets the definition.
            </summary>
            <value>The definition.</value>
        </member>
        <member name="P:System.Activities.Runtime.LocationEnvironment.Handles">
            <summary>
            Gets the handles.
            </summary>
            <value>The handles.</value>
            <remarks>
            This list keeps track of handles that are created and initialized.        
            </remarks>
        </member>
        <member name="P:System.Activities.Runtime.LocationEnvironment.HasHandles">
            <summary>
            Gets a value indicating whether this instance has handles.
            </summary>
            <value><c>true</c> if this instance has handles; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:System.Activities.Runtime.LocationEnvironment.HasOwnerCompleted">
            <summary>
            Gets a value indicating whether this instance has owner completed.
            </summary>
            <value><c>true</c> if this instance has owner completed; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:System.Activities.Runtime.LocationEnvironment.Parent">
            <summary>
            Gets or sets the parent.
            </summary>
            <value>The parent.</value>
        </member>
        <member name="P:System.Activities.Runtime.LocationEnvironment.SerializedHandles">
            <summary>
            Gets or sets the serialized handles.
            </summary>
            <value>The serialized handles.</value>
        </member>
        <member name="P:System.Activities.Runtime.LocationEnvironment.SerializedHasMappableLocations">
            <summary>
            Gets or sets a value indicating whether [serialized has mappable locations].
            </summary>
            <value><c>true</c> if [serialized has mappable locations]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:System.Activities.Runtime.LocationEnvironment.SerializedHasOwnerCompleted">
            <summary>
            Gets or sets a value indicating whether [serialized has owner completed].
            </summary>
            <value><c>true</c> if [serialized has owner completed]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:System.Activities.Runtime.LocationEnvironment.SerializedReferenceCountMinusOne">
            <summary>
            Gets or sets the serialized reference count minus one.
            </summary>
            <value>The serialized reference count minus one.</value>
            <remarks>
            We store refCount - 1 because it is more likely to be zero and skipped by serialization        
            </remarks>
        </member>
        <member name="M:System.Activities.Runtime.LocationEnvironment.System#Activities#Runtime#ActivityInstanceMap#IActivityReference#Load(System.Activities.Activity,System.Activities.Runtime.ActivityInstanceMap)">
            <summary>
            Loads.
            </summary>
            <param name="activity">The activity.</param>
            <param name="instanceMap">The instance map.</param>
        </member>
        <member name="M:System.Activities.Runtime.LocationEnvironment.System#Activities#Runtime#ActivityInstanceMap#IActivityReferenceWithEnvironment#UpdateEnvironment(System.Activities.DynamicUpdate.EnvironmentUpdateMap,System.Activities.Activity)">
            <summary>
            Updates the environment.
            </summary>
            <param name="map">The map.</param>
            <param name="activity">The activity.</param>
        </member>
        <member name="M:System.Activities.Runtime.LocationEnvironment.AddHandle(System.Activities.Handle)">
            <summary>
            Adds the handle.
            </summary>
            <param name="handleToAdd">The handle to add.</param>
        </member>
        <member name="M:System.Activities.Runtime.LocationEnvironment.AddReference">
            <summary>
            Note that the owner should never call this as the first AddReference is assumed        
            </summary>
        </member>
        <member name="M:System.Activities.Runtime.LocationEnvironment.CollapseTemporaryResolutionLocation(System.Activities.Location)">
            <summary>
            Called after an argument is added in Dynamic Update, when we need to collapse just one
            location rather than the whole environment        
            </summary>
            <param name="location">The location.</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:System.Activities.Runtime.LocationEnvironment.CollapseTemporaryResolutionLocations" -->
        <member name="M:System.Activities.Runtime.LocationEnvironment.Declare(System.Activities.LocationReference,System.Activities.Location,System.Activities.ActivityInstance)">
            <summary>
            Declares the specified location reference.
            </summary>
            <param name="locationReference">The location reference.</param>
            <param name="location">The location.</param>
            <param name="activityInstance">The activity instance.</param>
        </member>
        <member name="M:System.Activities.Runtime.LocationEnvironment.DeclareHandle(System.Activities.LocationReference,System.Activities.Location,System.Activities.ActivityInstance)">
            <summary>
            Declares the handle.
            </summary>
            <param name="locationReference">The location reference.</param>
            <param name="location">The location.</param>
            <param name="activityInstance">The activity instance.</param>
        </member>
        <member name="T:System.Activities.Runtime.MappableObjectManager">
            <summary>
            The MappableObjectManager class.
            </summary>
        </member>
        <member name="M:System.Activities.Runtime.MappableObjectManager.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Activities.Runtime.MappableObjectManager"/> class.
            </summary>
        </member>
        <member name="P:System.Activities.Runtime.MappableObjectManager.Count">
            <summary>
            Gets the count.
            </summary>
            <value>The count.</value>
        </member>
        <member name="P:System.Activities.Runtime.MappableObjectManager.SerializedMappableLocations">
            <summary>
            Gets or sets the serialized mappable locations.
            </summary>
            <value>The serialized mappable locations.</value>
        </member>
        <member name="M:System.Activities.Runtime.MappableObjectManager.GatherMappableVariables">
            <summary>
            Gathers the mappable variables.
            </summary>
            <returns>System.Nullable&lt;IDictionary&lt;System.String, LocationInfo&gt;&gt;.</returns>
        </member>
        <member name="M:System.Activities.Runtime.MappableObjectManager.Register(System.Activities.Location,System.Activities.Activity,System.Activities.LocationReference,System.Activities.ActivityInstance)">
            <summary>
            Registers the specified location.
            </summary>
            <param name="location">The location.</param>
            <param name="activity">The activity.</param>
            <param name="locationOwner">The location owner.</param>
            <param name="activityInstance">The activity instance.</param>
        </member>
        <member name="M:System.Activities.Runtime.MappableObjectManager.Unregister(System.Activities.Location)">
            <summary>
            Unregisters the specified location.
            </summary>
            <param name="location">The location.</param>
        </member>
        <member name="T:System.Activities.Runtime.MappableObjectManager.MappableLocation">
            <summary>
            The MappableLocation class.
            </summary>
        </member>
        <member name="M:System.Activities.Runtime.MappableObjectManager.MappableLocation.#ctor(System.Activities.LocationReference,System.Activities.Activity,System.Activities.ActivityInstance,System.Activities.Location)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Activities.Runtime.MappableObjectManager.MappableLocation" /> class.
            </summary>
            <param name="locationOwner">The location owner.</param>
            <param name="activity">The activity.</param>
            <param name="activityInstance">The activity instance.</param>
            <param name="location">The location.</param>
        </member>
        <member name="P:System.Activities.Runtime.MappableObjectManager.MappableLocation.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:System.Activities.Runtime.MappableObjectManager.MappableLocation.OwnerDisplayName">
            <summary>
            Gets the display name of the owner.
            </summary>
            <value>The display name of the owner.</value>
        </member>
        <member name="P:System.Activities.Runtime.MappableObjectManager.MappableLocation.Location">
            <summary>
            Gets the location.
            </summary>
            <value>The location.</value>
        </member>
        <member name="P:System.Activities.Runtime.MappableObjectManager.MappableLocation.MappingKeyName">
            <summary>
            Gets the name of the mapping key.
            </summary>
            <value>The name of the mapping key.</value>
        </member>
        <member name="P:System.Activities.Runtime.MappableObjectManager.MappableLocation.SerializedLocation">
            <summary>
            Gets or sets the serialized location.
            </summary>
            <value>The serialized location.</value>
        </member>
        <member name="P:System.Activities.Runtime.MappableObjectManager.MappableLocation.SerializedMappingKeyName">
            <summary>
            Gets or sets the name of the serialized mapping key.
            </summary>
            <value>The name of the serialized mapping key.</value>
        </member>
        <member name="P:System.Activities.Runtime.MappableObjectManager.MappableLocation.SerializedName">
            <summary>
            Gets or sets the name of the serialized.
            </summary>
            <value>The name of the serialized.</value>
        </member>
        <member name="P:System.Activities.Runtime.MappableObjectManager.MappableLocation.SerializedOwnerDisplayName">
            <summary>
            Gets or sets the display name of the serialized owner.
            </summary>
            <value>The display name of the serialized owner.</value>
        </member>
        <member name="T:System.Activities.Runtime.Scheduler">
            <summary>
            The Scheduler class.
            </summary>
        </member>
        <member name="F:System.Activities.Runtime.Scheduler.continueAction">
            <summary>
            The continue action
            </summary>
        </member>
        <member name="F:System.Activities.Runtime.Scheduler.yieldSilentlyAction">
            <summary>
            The yield silently action
            </summary>
        </member>
        <member name="F:System.Activities.Runtime.Scheduler.abortAction">
            <summary>
            The abort action
            </summary>
        </member>
        <member name="F:System.Activities.Runtime.Scheduler.onScheduledWorkCallback">
            <summary>
            The on scheduled work callback
            </summary>
        </member>
        <member name="F:System.Activities.Runtime.Scheduler.synchronizationContext">
            <summary>
            The synchronization context
            </summary>
        </member>
        <member name="F:System.Activities.Runtime.Scheduler.isPausing">
            <summary>
            The is pausing
            </summary>
        </member>
        <member name="F:System.Activities.Runtime.Scheduler.resumeTraceRequired">
            <summary>
            The resume trace required
            </summary>
        </member>
        <member name="F:System.Activities.Runtime.Scheduler.callbacks">
            <summary>
            The callbacks
            </summary>
        </member>
        <member name="F:System.Activities.Runtime.Scheduler.workItemQueue">
            <summary>
            The work item queue
            </summary>
        </member>
        <member name="M:System.Activities.Runtime.Scheduler.#ctor(System.Activities.Runtime.Scheduler.Callbacks)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Activities.Runtime.Scheduler"/> class.
            </summary>
            <param name="callbacks">The callbacks.</param>
        </member>
        <member name="P:System.Activities.Runtime.Scheduler.Continue">
            <summary>
            Gets the continue.
            </summary>
            <value>The continue.</value>
        </member>
        <member name="P:System.Activities.Runtime.Scheduler.YieldSilently">
            <summary>
            Gets the yield silently.
            </summary>
            <value>The yield silently.</value>
        </member>
        <member name="P:System.Activities.Runtime.Scheduler.Abort">
            <summary>
            Gets the abort.
            </summary>
            <value>The abort.</value>
        </member>
        <member name="P:System.Activities.Runtime.Scheduler.IsRunning">
            <summary>
            Gets a value indicating whether this instance is running.
            </summary>
            <value><c>true</c> if this instance is running; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:System.Activities.Runtime.Scheduler.IsIdle">
            <summary>
            Gets a value indicating whether this instance is idle.
            </summary>
            <value><c>true</c> if this instance is idle; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:System.Activities.Runtime.Scheduler.SerializedFirstWorkItem">
            <summary>
            Gets or sets the serialized first work item.
            </summary>
            <value>The serialized first work item.</value>
        </member>
        <member name="P:System.Activities.Runtime.Scheduler.SerializedWorkItemQueue">
            <summary>
            Gets or sets the serialized work item queue.
            </summary>
            <value>The serialized work item queue.</value>
        </member>
        <member name="M:System.Activities.Runtime.Scheduler.FillInstanceMap(System.Activities.Runtime.ActivityInstanceMap)">
            <summary>
            Fills the instance map.
            </summary>
            <param name="instanceMap">The instance map.</param>
        </member>
        <member name="M:System.Activities.Runtime.Scheduler.CreateNotifyUnhandledExceptionAction(System.Exception,System.Activities.ActivityInstance)">
            <summary>
            Creates the notify unhandled exception action.
            </summary>
            <param name="exception">The exception.</param>
            <param name="sourceInstance">The source instance.</param>
            <returns>RequestedAction.</returns>
        </member>
        <member name="M:System.Activities.Runtime.Scheduler.ClearAllWorkItems(System.Activities.Runtime.ActivityExecutor)">
            <summary>
            Clears all work items.
            </summary>
            <param name="executor">The executor.</param>
        </member>
        <member name="M:System.Activities.Runtime.Scheduler.OnDeserialized(System.Activities.Runtime.Scheduler.Callbacks)">
            <summary>
            Called when [deserialized].
            </summary>
            <param name="callbacks">The callbacks.</param>
        </member>
        <member name="M:System.Activities.Runtime.Scheduler.InternalResume(System.Activities.Runtime.Scheduler.RequestedAction)">
            <summary>
            Internals the resume.
            </summary>
            <param name="action">The action.</param>
            <remarks>This method should only be called when we relinquished the thread but did not
            complete the operation (silent yield is the current example)</remarks>
        </member>
        <member name="M:System.Activities.Runtime.Scheduler.Initialize(System.Activities.Runtime.Scheduler.Callbacks)">
            <summary>
            Initializes the specified callbacks.
            </summary>
            <param name="callbacks">The callbacks.</param>
            <remarks>called from ctor and OnDeserialized intialization paths</remarks>
        </member>
        <member name="M:System.Activities.Runtime.Scheduler.Open(System.Threading.SynchronizationContext)">
            <summary>
            Opens the specified synchronization context.
            </summary>
            <param name="synchronizationContext">The synchronization context.</param>
        </member>
        <member name="M:System.Activities.Runtime.Scheduler.Open(System.Activities.Runtime.Scheduler)">
            <summary>
            Opens the specified old scheduler.
            </summary>
            <param name="oldScheduler">The old scheduler.</param>
        </member>
        <member name="M:System.Activities.Runtime.Scheduler.ScheduleWork(System.Boolean)">
            <summary>
            Schedules the work.
            </summary>
            <param name="notifyStart">if set to <c>true</c> [notify start].</param>
        </member>
        <member name="M:System.Activities.Runtime.Scheduler.NotifyWorkCompletion">
            <summary>
            Notifies the work completion.
            </summary>
        </member>
        <member name="M:System.Activities.Runtime.Scheduler.Pause">
            <summary>
            Pauses this instance.
            </summary>
            <remarks>signal the scheduler to stop processing work. If we are processing work
            then we will catch this signal at our next iteration. Pause process completes
            when idle is signalled. Can be called while we're processing work since
            the worst thing that could happen in a race is that we pause one extra work item later</remarks>
        </member>
        <member name="M:System.Activities.Runtime.Scheduler.MarkRunning">
            <summary>
            Marks the running.
            </summary>
        </member>
        <member name="M:System.Activities.Runtime.Scheduler.Resume">
            <summary>
            Resumes this instance.
            </summary>
        </member>
        <member name="M:System.Activities.Runtime.Scheduler.PushWork(System.Activities.Runtime.WorkItem)">
            <summary>
            Pushes the work.
            </summary>
            <param name="workItem">The work item.</param>
        </member>
        <member name="M:System.Activities.Runtime.Scheduler.EnqueueWork(System.Activities.Runtime.WorkItem)">
            <summary>
            Enqueues the work.
            </summary>
            <param name="workItem">The work item.</param>
        </member>
        <member name="M:System.Activities.Runtime.Scheduler.OnScheduledWork(System.Object)">
            <summary>
            Called when [scheduled work].
            </summary>
            <param name="state">The state.</param>
        </member>
        <member name="T:System.Activities.Runtime.Scheduler.Callbacks">
            <summary>
            The Callbacks structure.
            </summary>
        </member>
        <member name="F:System.Activities.Runtime.Scheduler.Callbacks.activityExecutor">
            <summary>
            The activity executor
            </summary>
        </member>
        <member name="M:System.Activities.Runtime.Scheduler.Callbacks.#ctor(System.Activities.Runtime.ActivityExecutor)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Activities.Runtime.Scheduler.Callbacks"/> struct.
            </summary>
            <param name="activityExecutor">The activity executor.</param>
        </member>
        <member name="P:System.Activities.Runtime.Scheduler.Callbacks.WorkflowInstanceId">
            <summary>
            Gets the workflow instance identifier.
            </summary>
            <value>The workflow instance identifier.</value>
        </member>
        <member name="P:System.Activities.Runtime.Scheduler.Callbacks.IsAbortPending">
            <summary>
            Gets a value indicating whether this instance is abort pending.
            </summary>
            <value><c>true</c> if this instance is abort pending; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:System.Activities.Runtime.Scheduler.Callbacks.IsCompleted">
            <summary>
            Gets a value indicating whether this instance is completed.
            </summary>
            <value><c>true</c> if this instance is completed; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:System.Activities.Runtime.Scheduler.Callbacks.ExecuteWorkItem(System.Activities.Runtime.WorkItem)">
            <summary>
            Executes the work item.
            </summary>
            <param name="workItem">The work item.</param>
            <returns>RequestedAction.</returns>
        </member>
        <member name="M:System.Activities.Runtime.Scheduler.Callbacks.SchedulerIdle">
            <summary>
            Schedulers the idle.
            </summary>
        </member>
        <member name="M:System.Activities.Runtime.Scheduler.Callbacks.ThreadAcquired">
            <summary>
            Threads the acquired.
            </summary>
        </member>
        <member name="M:System.Activities.Runtime.Scheduler.Callbacks.NotifyUnhandledException(System.Exception,System.Activities.ActivityInstance)">
            <summary>
            Notifies the unhandled exception.
            </summary>
            <param name="exception">The exception.</param>
            <param name="source">The source.</param>
        </member>
        <member name="T:System.Activities.Runtime.Scheduler.RequestedAction">
            <summary>
            The RequestedAction class.
            </summary>
        </member>
        <member name="M:System.Activities.Runtime.Scheduler.RequestedAction.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Activities.Runtime.Scheduler.RequestedAction"/> class.
            </summary>
        </member>
        <member name="T:System.Activities.Runtime.Scheduler.ContinueAction">
            <summary>
            The ContinueAction class.
            Implements the <see cref="T:System.Activities.Runtime.Scheduler.RequestedAction" />
            </summary>
            <seealso cref="T:System.Activities.Runtime.Scheduler.RequestedAction" />
        </member>
        <member name="M:System.Activities.Runtime.Scheduler.ContinueAction.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Activities.Runtime.Scheduler.ContinueAction"/> class.
            </summary>
        </member>
        <member name="T:System.Activities.Runtime.Scheduler.YieldSilentlyAction">
            <summary>
            The YieldSilentlyAction class.
            Implements the <see cref="T:System.Activities.Runtime.Scheduler.RequestedAction" />
            </summary>
            <seealso cref="T:System.Activities.Runtime.Scheduler.RequestedAction" />
        </member>
        <member name="M:System.Activities.Runtime.Scheduler.YieldSilentlyAction.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Activities.Runtime.Scheduler.YieldSilentlyAction"/> class.
            </summary>
        </member>
        <member name="T:System.Activities.Runtime.Scheduler.AbortAction">
            <summary>
            The AbortAction class.
            Implements the <see cref="T:System.Activities.Runtime.Scheduler.RequestedAction" />
            </summary>
            <seealso cref="T:System.Activities.Runtime.Scheduler.RequestedAction" />
        </member>
        <member name="M:System.Activities.Runtime.Scheduler.AbortAction.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Activities.Runtime.Scheduler.AbortAction"/> class.
            </summary>
        </member>
        <member name="T:System.Activities.Runtime.Scheduler.NotifyUnhandledExceptionAction">
            <summary>
            The NotifyUnhandledExceptionAction class.
            Implements the <see cref="T:System.Activities.Runtime.Scheduler.RequestedAction" />
            </summary>
            <seealso cref="T:System.Activities.Runtime.Scheduler.RequestedAction" />
        </member>
        <member name="M:System.Activities.Runtime.Scheduler.NotifyUnhandledExceptionAction.#ctor(System.Exception,System.Activities.ActivityInstance)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Activities.Runtime.Scheduler.NotifyUnhandledExceptionAction"/> class.
            </summary>
            <param name="exception">The exception.</param>
            <param name="source">The source.</param>
        </member>
        <member name="P:System.Activities.Runtime.Scheduler.NotifyUnhandledExceptionAction.Exception">
            <summary>
            Gets or sets the exception.
            </summary>
            <value>The exception.</value>
        </member>
        <member name="P:System.Activities.Runtime.Scheduler.NotifyUnhandledExceptionAction.Source">
            <summary>
            Gets or sets the source.
            </summary>
            <value>The source.</value>
        </member>
        <member name="M:System.Activities.Runtime.TypeHelper.Convert``1(System.Object)">
            <summary>
            Converts the specified source.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source">The source.</param>
            <returns>T.</returns>
            <exception cref="T:System.InvalidCastException">
            </exception>
            <remarks>
            handles not only the simple cast, but also value type widening, etc.        
            </remarks>
        </member>
        <member name="P:System.Activities.Statements.Catch.ExceptionType">
            <summary>
            Gets the type of the exception.
            </summary>
            <value>The type of the exception.</value>
        </member>
        <member name="T:System.Activities.Statements.CompensationExtension">
            <summary>
            The CompensationExtension class. Implements the <see
            cref="T:System.Activities.Persistence.PersistenceParticipant" /> Implements the <see
            cref="T:System.Activities.Hosting.IWorkflowInstanceExtension" />
            </summary>
            <seealso cref="T:System.Activities.Persistence.PersistenceParticipant" />
            <seealso cref="T:System.Activities.Hosting.IWorkflowInstanceExtension" />
        </member>
        <member name="F:System.Activities.Statements.CompensationExtension.compensationExtensionData">
            <summary>
            The compensation extension data
            </summary>
        </member>
        <member name="F:System.Activities.Statements.CompensationExtension.compensationNamespace">
            <summary>
            The compensation namespace
            </summary>
        </member>
        <member name="F:System.Activities.Statements.CompensationExtension.compensationTokenTable">
            <summary>
            The compensation token table
            </summary>
        </member>
        <member name="M:System.Activities.Statements.CompensationExtension.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Activities.Statements.CompensationExtension" /> class.
            </summary>
        </member>
        <member name="P:System.Activities.Statements.CompensationExtension.CompensationTokenTable">
            <summary>
            Gets the compensation token table.
            </summary>
            <value>The compensation token table.</value>
        </member>
        <member name="P:System.Activities.Statements.CompensationExtension.Id">
            <summary>
            Gets or sets the identifier.
            </summary>
            <value>The identifier.</value>
        </member>
        <member name="P:System.Activities.Statements.CompensationExtension.Instance">
            <summary>
            Gets the instance.
            </summary>
            <value>The instance.</value>
        </member>
        <member name="P:System.Activities.Statements.CompensationExtension.IsWorkflowCompensationBehaviorScheduled">
            <summary>
            Gets a value indicating whether this instance is workflow compensation behavior scheduled.
            </summary>
            <value>
            <c>true</c> if this instance is workflow compensation behavior scheduled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:System.Activities.Statements.CompensationExtension.WorkflowCompensation">
            <summary>
            Gets or sets the workflow compensation.
            </summary>
            <value>The workflow compensation.</value>
        </member>
        <member name="P:System.Activities.Statements.CompensationExtension.WorkflowCompensationScheduled">
            <summary>
            Gets the workflow compensation scheduled.
            </summary>
            <value>The workflow compensation scheduled.</value>
        </member>
        <member name="P:System.Activities.Statements.CompensationExtension.WorkflowConfirmation">
            <summary>
            Gets or sets the workflow confirmation.
            </summary>
            <value>The workflow confirmation.</value>
        </member>
        <member name="M:System.Activities.Statements.CompensationExtension.System#Activities#Hosting#IWorkflowInstanceExtension#GetAdditionalExtensions">
            <summary>
            Gets the additional extensions.
            </summary>
            <returns>IEnumerable&lt;System.Object&gt;.</returns>
        </member>
        <member name="M:System.Activities.Statements.CompensationExtension.System#Activities#Hosting#IWorkflowInstanceExtension#SetInstance(System.Activities.Hosting.WorkflowInstanceProxy)">
            <summary>
            Sets the instance.
            </summary>
            <param name="instance">The instance.</param>
        </member>
        <member name="M:System.Activities.Statements.CompensationExtension.Add(System.Int64,System.Activities.Statements.CompensationTokenData)">
            <summary>
            Adds the specified compensation identifier.
            </summary>
            <param name="compensationId">The compensation identifier.</param>
            <param name="compensationToken">The compensation token.</param>
        </member>
        <member name="M:System.Activities.Statements.CompensationExtension.FindBookmark(System.Int64,System.Activities.Statements.CompensationBookmarkName)">
            <summary>
            Finds the bookmark.
            </summary>
            <param name="compensationId">The compensation identifier.</param>
            <param name="bookmarkName">Name of the bookmark.</param>
            <returns>Bookmark.</returns>
        </member>
        <member name="M:System.Activities.Statements.CompensationExtension.Get(System.Int64)">
            <summary>
            Gets the specified compensation identifier.
            </summary>
            <param name="compensationId">The compensation identifier.</param>
            <returns>CompensationTokenData.</returns>
        </member>
        <member name="M:System.Activities.Statements.CompensationExtension.GetNextId">
            <summary>
            Gets the next identifier.
            </summary>
            <returns>System.Int64.</returns>
        </member>
        <member name="M:System.Activities.Statements.CompensationExtension.NotifyMessage(System.Activities.NativeActivityContext,System.Int64,System.Activities.Statements.CompensationBookmarkName)">
            <summary>
            Notifies the message.
            </summary>
            <param name="context">The context.</param>
            <param name="compensationId">The compensation identifier.</param>
            <param name="compensationBookmark">The compensation bookmark.</param>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:System.Activities.Statements.CompensationExtension.Remove(System.Int64)">
            <summary>
            Removes the specified compensation identifier.
            </summary>
            <param name="compensationId">The compensation identifier.</param>
        </member>
        <member name="M:System.Activities.Statements.CompensationExtension.SetupWorkflowCompensationBehavior(System.Activities.NativeActivityContext,System.Activities.BookmarkCallback,System.Activities.Activity)">
            <summary>
            Setups the workflow compensation behavior.
            </summary>
            <param name="context">The context.</param>
            <param name="callback">The callback.</param>
            <param name="workflowCompensationBehavior">The workflow compensation behavior.</param>
        </member>
        <member name="M:System.Activities.Statements.CompensationExtension.CollectValues(System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Object}@,System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Object}@)">
            <summary>
            Collects the values.
            </summary>
            <param name="readWriteValues">The read write values.</param>
            <param name="writeOnlyValues">The write only values.</param>
        </member>
        <member name="M:System.Activities.Statements.CompensationExtension.PublishValues(System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Object})">
            <summary>
            Publishes the values.
            </summary>
            <param name="readWriteValues">The read write values.</param>
            <exception cref="T:System.ArgumentNullException">readWriteValues</exception>
        </member>
        <member name="T:System.Activities.Statements.DoWhile">
            <summary>
            The DoWhile class. This class cannot be inherited. Implements the <see
            cref="T:System.Activities.NativeActivity" />
            </summary>
            <seealso cref="T:System.Activities.NativeActivity" />
        </member>
        <member name="F:System.Activities.Statements.DoWhile.onBodyComplete">
            <summary>
            The on body complete
            </summary>
        </member>
        <member name="F:System.Activities.Statements.DoWhile.onConditionComplete">
            <summary>
            The on condition complete
            </summary>
        </member>
        <member name="F:System.Activities.Statements.DoWhile.variables">
            <summary>
            The variables
            </summary>
        </member>
        <member name="M:System.Activities.Statements.DoWhile.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Activities.Statements.DoWhile" /> class.
            </summary>
        </member>
        <member name="M:System.Activities.Statements.DoWhile.#ctor(System.Linq.Expressions.Expression{System.Func{System.Activities.ActivityContext,System.Boolean}})">
            <summary>
            Initializes a new instance of the <see cref="T:System.Activities.Statements.DoWhile" /> class.
            </summary>
            <param name="condition">The condition.</param>
        </member>
        <member name="M:System.Activities.Statements.DoWhile.#ctor(System.Activities.Activity{System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:System.Activities.Statements.DoWhile" /> class.
            </summary>
            <param name="condition">The condition.</param>
        </member>
        <member name="P:System.Activities.Statements.DoWhile.Body">
            <summary>
            Gets or sets the body.
            </summary>
            <value>The body.</value>
        </member>
        <member name="P:System.Activities.Statements.DoWhile.Condition">
            <summary>
            Gets or sets the condition.
            </summary>
            <value>The condition.</value>
        </member>
        <member name="P:System.Activities.Statements.DoWhile.Variables">
            <summary>
            Gets the variables.
            </summary>
            <value>The variables.</value>
        </member>
        <member name="M:System.Activities.Statements.DoWhile.CacheMetadata(System.Activities.NativeActivityMetadata)">
            <summary>
            Caches the metadata.
            </summary>
            <param name="metadata">The metadata.</param>
        </member>
        <member name="M:System.Activities.Statements.DoWhile.Execute(System.Activities.NativeActivityContext)">
            <summary>
            Executes the specified context.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:System.Activities.Statements.DoWhile.OnCreateDynamicUpdateMap(System.Activities.DynamicUpdate.NativeActivityUpdateMapMetadata,System.Activities.Activity)">
            <summary>
            Called when [create dynamic update map].
            </summary>
            <param name="metadata">The metadata.</param>
            <param name="originalActivity">The original activity.</param>
        </member>
        <member name="M:System.Activities.Statements.DoWhile.OnBodyComplete(System.Activities.NativeActivityContext,System.Activities.ActivityInstance)">
            <summary>
            Called when [body complete].
            </summary>
            <param name="context">The context.</param>
            <param name="completedInstance">The completed instance.</param>
        </member>
        <member name="M:System.Activities.Statements.DoWhile.OnConditionComplete(System.Activities.NativeActivityContext,System.Activities.ActivityInstance,System.Boolean)">
            <summary>
            Called when [condition complete].
            </summary>
            <param name="context">The context.</param>
            <param name="completedInstance">The completed instance.</param>
            <param name="result">if set to <c>true</c> [result].</param>
        </member>
        <member name="M:System.Activities.Statements.DoWhile.ScheduleCondition(System.Activities.NativeActivityContext)">
            <summary>
            Schedules the condition.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="T:System.Activities.Statements.FlowNode">
            <summary>
            The FlowNode class.
            </summary>
        </member>
        <member name="F:System.Activities.Statements.FlowNode.cacheId">
            <summary>
            The cache identifier
            </summary>
        </member>
        <member name="M:System.Activities.Statements.FlowNode.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Activities.Statements.FlowNode" /> class.
            </summary>
        </member>
        <member name="P:System.Activities.Statements.FlowNode.ChildActivity">
            <summary>
            Gets the child activity.
            </summary>
            <value>The child activity.</value>
        </member>
        <member name="P:System.Activities.Statements.FlowNode.Index">
            <summary>
            Gets or sets the index.
            </summary>
            <value>The index.</value>
        </member>
        <member name="P:System.Activities.Statements.FlowNode.IsOpen">
            <summary>
            Gets a value indicating whether this instance is open.
            </summary>
            <value><c>true</c> if this instance is open; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:System.Activities.Statements.FlowNode.Owner">
            <summary>
            Gets the owner.
            </summary>
            <value>The owner.</value>
        </member>
        <member name="M:System.Activities.Statements.FlowNode.GetChildActivities(System.Collections.Generic.ICollection{System.Activities.Activity})">
            <summary>
            Gets the child activities.
            </summary>
            <param name="children">The children.</param>
        </member>
        <member name="M:System.Activities.Statements.FlowNode.GetConnectedNodes(System.Collections.Generic.IList{System.Activities.Statements.FlowNode})">
            <summary>
            Gets the connected nodes.
            </summary>
            <param name="connections">The connections.</param>
        </member>
        <member name="M:System.Activities.Statements.FlowNode.OnOpen(System.Activities.Statements.Flowchart,System.Activities.NativeActivityMetadata)">
            <summary>
            Called when [open].
            </summary>
            <param name="owner">The owner.</param>
            <param name="metadata">The metadata.</param>
        </member>
        <member name="M:System.Activities.Statements.FlowNode.Open(System.Activities.Statements.Flowchart,System.Activities.NativeActivityMetadata)">
            <summary>
            Opens the specified owner.
            </summary>
            <param name="owner">The owner.</param>
            <param name="metadata">The metadata.</param>
            <returns>
            <c>true</c> if this is the first time we've visited this node during this pass,
            <c>false</c> otherwise.
            </returns>
        </member>
        <member name="T:System.Activities.Statements.FlowSwitch`1">
            <summary>
            The FlowSwitch class. This class cannot be inherited. Implements the <see
            cref="T:System.Activities.Statements.FlowNode" /> Implements the <see
            cref="T:System.Activities.Statements.IFlowSwitch" />
            </summary>
            <typeparam name="T"></typeparam>
            <seealso cref="T:System.Activities.Statements.FlowNode" />
            <seealso cref="T:System.Activities.Statements.IFlowSwitch" />
        </member>
        <member name="F:System.Activities.Statements.FlowSwitch`1.cases">
            <summary>
            The cases
            </summary>
        </member>
        <member name="F:System.Activities.Statements.FlowSwitch`1.DefaultDisplayName">
            <summary>
            The default display name
            </summary>
        </member>
        <member name="F:System.Activities.Statements.FlowSwitch`1.onSwitchCompleted">
            <summary>
            The on switch completed
            </summary>
        </member>
        <member name="M:System.Activities.Statements.FlowSwitch`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Activities.Statements.FlowSwitch`1" /> class.
            </summary>
        </member>
        <member name="P:System.Activities.Statements.FlowSwitch`1.Cases">
            <summary>
            Gets the cases.
            </summary>
            <value>The cases.</value>
        </member>
        <member name="P:System.Activities.Statements.FlowSwitch`1.Default">
            <summary>
            Gets or sets the default.
            </summary>
            <value>The default.</value>
        </member>
        <member name="P:System.Activities.Statements.FlowSwitch`1.DisplayName">
            <summary>
            Gets or sets the display name.
            </summary>
            <value>The display name.</value>
        </member>
        <member name="P:System.Activities.Statements.FlowSwitch`1.Expression">
            <summary>
            Gets or sets the expression.
            </summary>
            <value>The expression.</value>
        </member>
        <member name="P:System.Activities.Statements.FlowSwitch`1.ChildActivity">
            <summary>
            Gets the child activity.
            </summary>
            <value>The child activity.</value>
        </member>
        <member name="M:System.Activities.Statements.FlowSwitch`1.System#Activities#Statements#IFlowSwitch#Execute(System.Activities.NativeActivityContext,System.Activities.Statements.Flowchart)">
            <summary>
            Executes the specified context.
            </summary>
            <param name="context">The context.</param>
            <param name="parent">The parent.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:System.Activities.Statements.FlowSwitch`1.System#Activities#Statements#IFlowSwitch#GetNextNode(System.Object)">
            <summary>
            Gets the next node.
            </summary>
            <param name="value">The value.</param>
            <returns>FlowNode.</returns>
        </member>
        <member name="M:System.Activities.Statements.FlowSwitch`1.GetConnectedNodes(System.Collections.Generic.IList{System.Activities.Statements.FlowNode})">
            <summary>
            Gets the connected nodes.
            </summary>
            <param name="connections">The connections.</param>
        </member>
        <member name="M:System.Activities.Statements.FlowSwitch`1.OnOpen(System.Activities.Statements.Flowchart,System.Activities.NativeActivityMetadata)">
            <summary>
            Called when [open].
            </summary>
            <param name="owner">The owner.</param>
            <param name="metadata">The metadata.</param>
        </member>
        <member name="M:System.Activities.Statements.FlowSwitch`1.GetSwitchCompletedCallback(System.Activities.Statements.Flowchart)">
            <summary>
            Gets the switch completed callback.
            </summary>
            <param name="parent">The parent.</param>
            <returns>CompletionCallback&lt;T&gt;.</returns>
        </member>
        <member name="T:System.Activities.Statements.HandleScope`1">
            <summary>
            The HandleScope class. This class cannot be inherited.
            Implements the <see cref="T:System.Activities.NativeActivity" />
            </summary>
            <typeparam name="THandle">The type of the handle.</typeparam>
            <seealso cref="T:System.Activities.NativeActivity" />
        </member>
        <member name="M:System.Activities.Statements.HandleScope`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Activities.Statements.HandleScope`1"/> class.
            </summary>
        </member>
        <member name="P:System.Activities.Statements.HandleScope`1.Handle">
            <summary>
            Gets or sets the handle.
            </summary>
            <value>The handle.</value>
        </member>
        <member name="P:System.Activities.Statements.HandleScope`1.Body">
            <summary>
            Gets or sets the body.
            </summary>
            <value>The body.</value>
        </member>
        <member name="M:System.Activities.Statements.HandleScope`1.CacheMetadata(System.Activities.NativeActivityMetadata)">
            <summary>
            Caches the metadata.
            </summary>
            <param name="metadata">The metadata.</param>
        </member>
        <member name="M:System.Activities.Statements.HandleScope`1.Execute(System.Activities.NativeActivityContext)">
            <summary>
            Executes the specified context.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="T:System.Activities.Statements.InternalState">
            <summary>
            InternalState is internal representation of State.
            </summary>
        </member>
        <member name="P:System.Activities.Statements.InternalState.EventManager">
            <summary>
            Gets or sets EventManager is used to globally manage event queue such that triggered events can be processed in order.
            </summary>
        </member>
        <member name="P:System.Activities.Statements.InternalState.Entry">
            <summary>
            Gets Entry activity that will be executed when state is entering.
            </summary>
        </member>
        <member name="P:System.Activities.Statements.InternalState.Exit">
            <summary>
            Gets Exit activity that will be executed when state is leaving.
            </summary>
        </member>
        <member name="P:System.Activities.Statements.InternalState.IsFinal">
            <summary>
            Gets a value indicating whether this state is a final state or not.
            </summary>
        </member>
        <member name="P:System.Activities.Statements.InternalState.StateId">
            <summary>
            Gets StateId, which is the identifier of a state. It's unique within a StateMachine.
            </summary>
        </member>
        <member name="P:System.Activities.Statements.InternalState.Transitions">
            <summary>
            Gets Transitions collection contains transitions on this state.
            </summary>
        </member>
        <member name="P:System.Activities.Statements.InternalState.Variables">
            <summary>
            Gets Variables collection contains Variables on this state.
            </summary>
        </member>
        <member name="P:System.Activities.Statements.InternalState.StateMachineName">
            <summary>
            Gets the display name of the parent state machine of the state.
            Used for tracking purpose only.
            </summary>
        </member>
        <member name="M:System.Activities.Statements.InternalState.UpdateEventManager(System.Activities.DynamicUpdate.NativeActivityUpdateContext,System.Activities.Statements.StateMachineEventManager)">
            <summary>
            Used for Dynamic Update: after the instance is updated, if the statemachine is already transitioning, the index of the to-be-scheduled state 
            would need to be updated.
            </summary>
            <param name="updateContext">Dynamic Update context</param>
            <param name="eventManager">Internal StateMachineEventManager</param>
            <returns>True, 1. if update is successful and the instanced is updated with the new indexes, and 2 all the trigger ID in the queue are updated;
            false otherwise and the update should fail.</returns>
        </member>
        <member name="T:System.Activities.Statements.InternalTransition">
            <summary>
            InternalTransition is internal representation of transition.
            Its difference from transition is that if several transition share the same trigger, all of them belongs to the same internal transition.
            Their different conditions, actions, Tos would be put into TransitionDataList.
            </summary>
        </member>
        <member name="P:System.Activities.Statements.InternalTransition.InternalTransitionIndex">
            <summary>
            Gets or sets the index of this InternalTransition in internalTransitions list of its parent state.
            </summary>
        </member>
        <member name="P:System.Activities.Statements.InternalTransition.IsUnconditional">
            <summary>
            Gets a value indicating whether this transition is unconditional.
            </summary>
        </member>
        <member name="P:System.Activities.Statements.InternalTransition.TransitionDataList">
            <summary>
            Gets TransitionDataList contains Tos, Conditions, Actions of different transitions which share the same trigger.
            </summary>
        </member>
        <member name="P:System.Activities.Statements.InternalTransition.Trigger">
            <summary>
            Gets or sets trigger object of this internal transition.
            </summary>
        </member>
        <member name="T:System.Activities.Statements.State">
            <summary>
            This class represents a State in a StateMachine.
            </summary>
        </member>
        <member name="P:System.Activities.Statements.State.DisplayName">
            <summary>
            Gets or sets DisplayName of the State.
            </summary>
        </member>
        <member name="P:System.Activities.Statements.State.Entry">
            <summary>
            Gets or sets entry action of the State. It is executed when the StateMachine enters the State. 
            It's optional.
            </summary>
        </member>
        <member name="P:System.Activities.Statements.State.Exit">
            <summary>
            Gets or sets exit action of the State. It is executed when the StateMachine leaves the State. 
            It's optional.
            </summary>
        </member>
        <member name="P:System.Activities.Statements.State.Transitions">
            <summary>
            Gets Transitions collection contains all outgoing Transitions from the State.
            </summary>
        </member>
        <member name="P:System.Activities.Statements.State.Variables">
            <summary>
            Gets Variables which can be used within the scope of State and its Transitions collection.
            </summary>
        </member>
        <member name="P:System.Activities.Statements.State.IsFinal">
            <summary>
            Gets or sets a value indicating whether the State is a final State.
            </summary>
        </member>
        <member name="P:System.Activities.Statements.State.InternalState">
            <summary>
            Gets Internal activity representation of state.
            </summary>
        </member>
        <member name="P:System.Activities.Statements.State.PassNumber">
            <summary>
            Gets or sets PassNumber is used to detect re-visiting when traversing states in StateMachine. 
            </summary>
        </member>
        <member name="P:System.Activities.Statements.State.Reachable">
            <summary>
            Gets or sets a value indicating whether state can be reached via transitions.
            </summary>
        </member>
        <member name="P:System.Activities.Statements.State.StateId">
            <summary>
            Gets or sets StateId is unique within a StateMachine.
            </summary>
        </member>
        <member name="P:System.Activities.Statements.State.StateMachineName">
            <summary>
            Gets or sets the display name of the parent state machine of the state.
            Used for tracking purpose only.
            </summary>
        </member>
        <member name="M:System.Activities.Statements.State.ClearInternalState">
            <summary>
            Clear internal state. 
            </summary>
        </member>
        <member name="T:System.Activities.Statements.StateMachine">
            <summary>
            This class represents a StateMachine which contains States and Variables.
            </summary>
        </member>
        <member name="M:System.Activities.Statements.StateMachine.#ctor">
            <summary>
            It's constructor.
            </summary>
        </member>
        <member name="P:System.Activities.Statements.StateMachine.InitialState">
            <summary>
            Gets or sets the start point of the StateMachine.
            </summary>
        </member>
        <member name="P:System.Activities.Statements.StateMachine.States">
            <summary>
            Gets all root level States in the StateMachine.
            </summary>
        </member>
        <member name="P:System.Activities.Statements.StateMachine.Variables">
            <summary>
            Gets Variables which can be used within StateMachine scope.
            </summary>
        </member>
        <member name="M:System.Activities.Statements.StateMachine.CacheMetadata(System.Activities.NativeActivityMetadata)">
            <summary>
            Perform State Machine validation, in the following order:
            1. Mark all states in States collection with an Id.
            2. Traverse all states via declared transitions, and mark reachable states.
            3. Validate transitions, states, and state machine
            Finally, declare arguments and variables of state machine, and declare states and transitions as activitydelegates.
            </summary>
            <param name="metadata">NativeActivityMetadata reference</param>
        </member>
        <member name="M:System.Activities.Statements.StateMachine.Execute(System.Activities.NativeActivityContext)">
            <summary>
            Execution of StateMachine
            </summary>
            <param name="context">NativeActivityContext reference</param>
        </member>
        <member name="M:System.Activities.Statements.StateMachine.ProcessStates(System.Activities.NativeActivityMetadata)">
            <summary>
            Create internal states
            </summary>
            <param name="metadata">NativeActivityMetadata reference.</param>
        </member>
        <member name="T:System.Activities.Statements.StateMachine.StateMachineEventManagerFactory">
            <summary>
            Originally, the Default value for StateMachineEventManager variable in StateMachine activity,
            is initialized via a LambdaValue activity. However, PartialTrust environment does not support 
            LambdaValue activity that references any local variables or non-public members.
            The recommended approach is to convert the LambdaValue to an equivalent internal CodeActivity.
            </summary>
        </member>
        <member name="T:System.Activities.Statements.StateMachineEventManager">
            <summary>
            StateMachineEventManager is used to manage triggered events globally.
            </summary>
        </member>
        <member name="M:System.Activities.Statements.StateMachineEventManager.#ctor">
            <summary>
            Constructor to do initialization.
            </summary>
        </member>
        <member name="P:System.Activities.Statements.StateMachineEventManager.CurrentBeingProcessedEvent">
            <summary>
            Gets or sets the trigger index of current being processed event.
            </summary>
        </member>
        <member name="P:System.Activities.Statements.StateMachineEventManager.CurrentConditionIndex">
            <summary>
            Gets or sets the CurrentConditionIndex denotes the index of condition is being evaluated.
            </summary>
        </member>
        <member name="P:System.Activities.Statements.StateMachineEventManager.OnTransition">
            <summary>
            Gets or sets a value indicating whether StateMachine is on the way of transition.
            </summary>
        </member>
        <member name="P:System.Activities.Statements.StateMachineEventManager.Queue">
            <summary>
            Gets the EventManager queue.
            </summary>
        </member>
        <member name="P:System.Activities.Statements.StateMachineEventManager.CanProcessEventImmediately">
            <summary>
            Gets a value indicating whether StateMachineManger is ready to process an event immediately.
            </summary>
        </member>
        <member name="M:System.Activities.Statements.StateMachineEventManager.AddActiveBookmark(System.Activities.Bookmark)">
            <summary>
            When StateMachine enters a state, condition evaluation bookmark of that state would be added to activeBookmarks collection.
            </summary>
            <param name="bookmark">Bookmark reference.</param>
        </member>
        <member name="M:System.Activities.Statements.StateMachineEventManager.GetNextCompletedEvent">
            <summary>
            Gets next completed events queue.
            </summary>
            <returns>Top TriggerCompletedEvent item in the queue.</returns>
        </member>
        <member name="M:System.Activities.Statements.StateMachineEventManager.IsReferredByBeingProcessedEvent(System.Activities.Bookmark)">
            <summary>
            This method is used to denote whether a given bookmark is referred by currently processed event.
            </summary>
            <param name="bookmark">Bookmark reference.</param>
            <returns>True is the bookmark references to the event being processed.</returns>
        </member>
        <member name="M:System.Activities.Statements.StateMachineEventManager.RegisterCompletedEvent(System.Activities.Statements.TriggerCompletedEvent,System.Boolean@)">
            <summary>
            Register a completed event and returns whether the event could be processed immediately.
            </summary>
            <param name="completedEvent">TriggerCompletedEvent reference.</param>
            <param name="canBeProcessedImmediately">True if the Condition can be evaluated.</param>
        </member>
        <member name="M:System.Activities.Statements.StateMachineEventManager.RemoveActiveBookmark(System.Activities.Bookmark)">
            <summary>
            When StateMachine leaves a state, condition evaluation bookmark of that state would be removed from activeBookmarks collection.
            </summary>
            <param name="bookmark">Bookmark reference.</param>
        </member>
        <member name="T:System.Activities.Statements.StateMachineExtension">
            <summary>
            StateMachineExtension is used to resume a bookmark outside StateMachine.
            </summary>
        </member>
        <member name="M:System.Activities.Statements.StateMachineExtension.GetAdditionalExtensions">
            <summary>
            Used to get additional extensions.
            </summary>
            <returns>Returns a IEnumerable of extensions</returns>
        </member>
        <member name="M:System.Activities.Statements.StateMachineExtension.SetInstance(System.Activities.Hosting.WorkflowInstanceProxy)">
            <summary>
            called with the targe instance under WorkflowInstance.Initialize
            </summary>
            <param name="instance">The value of WorkflowInstanceProxy</param>
        </member>
        <member name="M:System.Activities.Statements.StateMachineExtension.ResumeBookmark(System.Activities.Bookmark)">
            <summary>
            Used to resume bookmark outside workflow.
            </summary>
            <param name="bookmark">The value of Bookmark to be resumed</param>
        </member>
        <member name="T:System.Activities.Statements.StateMachineIdHelper">
            <summary>
            Helper methods which are used by both StateMachine and State.
            </summary>
        </member>
        <member name="M:System.Activities.Statements.StateMachineIdHelper.GetChildStateIndex(System.String,System.String)">
            <summary>
            Given current stateId and descendant Id, this method returns Id of direct child state of current state.
            This direct child state is either the state which descendantId represents or one of ancestor states of it.
            </summary>
            <param name="stateId">Internal StateId of StateMachine.</param>
            <param name="descendantId">Internal StateId of the state.</param>
            <returns>Index position of the state in the state machine.</returns>
        </member>
        <member name="M:System.Activities.Statements.StateMachineIdHelper.GenerateStateId(System.String,System.Int32)">
            <summary>
            Return the StateId, which is the identifier of a state.
            </summary>
            <param name="parentId">Internal StateId of the parent activity, which is StateMachine.</param>
            <param name="index">Internal index of the state within StateMachine.</param>
            <returns>Unique identifier of a state within StateMachine.</returns>
        </member>
        <member name="M:System.Activities.Statements.StateMachineIdHelper.GenerateTransitionId(System.String,System.Int32)">
            <summary>
            Return the TransitionId, which is the identifier of a transition.
            </summary>
            <param name="stateid">Internal StateId of the state.</param>
            <param name="transitionIndex">Internal index of the transition within state.</param>
            <returns>Unique identifier of a transition within a state.</returns>
        </member>
        <member name="M:System.Activities.Statements.StateMachineIdHelper.IsAncestor(System.String,System.String)">
            <summary>
            This method is used to see whether state1 is one of ancestors of state2.
            </summary>
            <param name="state1Id">Internal StateId of the state1.</param>
            <param name="state2Id">Internal StateId of the state2.</param>
            <returns>True if the state2.Id is identified as a child for state1.</returns>
        </member>
        <member name="T:System.Activities.Statements.Tracking.StateMachineStateQuery">
            <summary>
            When added to the Queries, subscribes to state machine state execution records.
            </summary>
        </member>
        <member name="M:System.Activities.Statements.Tracking.StateMachineStateQuery.#ctor">
            <summary>
            Constructor of StateMachineTrackingQuery.
            </summary>
        </member>
        <member name="P:System.Activities.Statements.Tracking.StateMachineStateQuery.Name">
            <summary>
            Gets the name that distinguishes this tracking record.
            </summary>
        </member>
        <member name="T:System.Activities.Statements.Tracking.StateMachineStateRecord">
            <summary>
            Represents a tracking record that is created when an state machine instance transitions to a state.
            </summary>
        </member>
        <member name="M:System.Activities.Statements.Tracking.StateMachineStateRecord.#ctor">
            <summary>
            Initializes a new instance of the StateMachineStateRecord class.
            </summary>
        </member>
        <member name="P:System.Activities.Statements.Tracking.StateMachineStateRecord.StateMachineName">
            <summary>
            Gets the display name of the State Machine activity that contains the state.
            </summary>
        </member>
        <member name="P:System.Activities.Statements.Tracking.StateMachineStateRecord.StateName">
            <summary>
            Gets the display name of executing state when the record is generated.
            </summary>
        </member>
        <member name="M:System.Activities.Statements.Tracking.StateMachineStateRecord.Clone">
            <summary>
            Creates a copy of the StateMachineTrackingRecord. (Overrides CustomTrackingRecord.Clone().)
            </summary>
            <returns>A copy of the StateMachineTrackingRecord instance.</returns>
        </member>
        <member name="T:System.Activities.Statements.Transition">
            <summary>
            This class represents a Transition of a State.
            </summary>
        </member>
        <member name="P:System.Activities.Statements.Transition.Action">
            <summary>
            Gets or sets the Action activity which should be executed when the Transtion is taken.
            It's optional.
            </summary>
        </member>
        <member name="P:System.Activities.Statements.Transition.Condition">
            <summary>
            Gets or sets the Condition to decide whether the Transition should be taken after the Trigger activity is completed.
            It's optional. 
            If the Condition is null, the Transition would always be taken when the Trigger activity is completed.
            </summary>
        </member>
        <member name="P:System.Activities.Statements.Transition.DisplayName">
            <summary>
            Gets or sets DisplayName of the Transition
            </summary>
        </member>
        <member name="P:System.Activities.Statements.Transition.To">
            <summary>
            Gets or sets the target State of the Transition.
            It's required.
            </summary>
        </member>
        <member name="P:System.Activities.Statements.Transition.Trigger">
            <summary>
            Gets or sets the Trigger activity of the Transition.
            When the Trigger activity is completed, the StateMachine will start to evaluate whether the Transition should be taken.
            It's required.
            </summary>
        </member>
        <member name="P:System.Activities.Statements.Transition.ActiveTrigger">
            <summary>
            Gets the actual Trigger activity object that should be used when scheduling Transition trigger
            between states.
            Returns the Trigger object if if it is defined by the user; otherwise, return the null trigger.
            </summary>
        </member>
        <member name="P:System.Activities.Statements.Transition.Id">
            <summary>
            Gets or sets Transition Id, which is unique within a State inside a StateMachine.
            </summary>
        </member>
        <member name="P:System.Activities.Statements.Transition.Source">
            <summary>
            Gets or sets Source, which represents source state of transition
            </summary>
        </member>
        <member name="T:System.Activities.Statements.TransitionData">
            <summary>
            TransitionData is used by InternalTransition to store data from Transition.
            </summary>
        </member>
        <member name="P:System.Activities.Statements.TransitionData.Action">
            <summary>
            Gets or sets Action of transition.
            </summary>
        </member>
        <member name="P:System.Activities.Statements.TransitionData.Condition">
            <summary>
            Gets or sets Condition of transition.
            If condition is null, it means it's an unconditional transition.
            </summary>
        </member>
        <member name="P:System.Activities.Statements.TransitionData.To">
            <summary>
            Gets or sets To of transition, which represent the target InternalState.
            </summary>
        </member>
        <member name="T:System.Activities.Statements.TriggerCompletedEvent">
            <summary>
            TriggerCompletedEvent represents an event which is triggered when a trigger is completed.
            </summary>
        </member>
        <member name="P:System.Activities.Statements.TriggerCompletedEvent.Bookmark">
            <summary>
            Gets or sets Bookmark that starts evaluating condition(s).
            </summary>
        </member>
        <member name="P:System.Activities.Statements.TriggerCompletedEvent.TriggedId">
            <summary>
            Gets or sets TriggerId, which is unique within a state
            </summary>
        </member>
        <member name="M:System.Activities.TD.TrackingRecordDroppedIsEnabled">
            <summary>
            Check if trace definition is enabled
            Event description ID=39456, Level=Warning, Channel=debug
            </summary>
        </member>
        <member name="M:System.Activities.TD.TrackingRecordDropped(System.Int64,System.Guid)">
            <summary>
            Gets trace definition like: Size of tracking record {0} exceeds maximum allowed by the ETW session for provider {1}
            Event description ID=39456, Level=Warning, Channel=debug
            </summary>
            <param name="RecordNumber">Parameter 0 for event: Size of tracking record {0} exceeds maximum allowed by the ETW session for provider {1}</param>
            <param name="ProviderId">Parameter 1 for event: Size of tracking record {0} exceeds maximum allowed by the ETW session for provider {1}</param>
        </member>
        <member name="M:System.Activities.TD.TrackingRecordRaisedIsEnabled">
            <summary>
            Check if trace definition is enabled
            Event description ID=39457, Level=informational, Channel=debug
            </summary>
        </member>
        <member name="M:System.Activities.TD.TrackingRecordRaised(System.String,System.String)">
            <summary>
            Gets trace definition like: Tracking Record {0} raised to {1}.
            Event description ID=39457, Level=informational, Channel=debug
            </summary>
            <param name="param0">Parameter 0 for event: Tracking Record {0} raised to {1}.</param>
            <param name="param1">Parameter 1 for event: Tracking Record {0} raised to {1}.</param>
        </member>
        <member name="M:System.Activities.TD.TrackingRecordTruncatedIsEnabled">
            <summary>
            Check if trace definition is enabled
            Event description ID=39458, Level=Warning, Channel=debug
            </summary>
        </member>
        <member name="M:System.Activities.TD.TrackingRecordTruncated(System.Int64,System.Guid)">
            <summary>
            Gets trace definition like: Truncated tracking record {0} written to ETW session with provider {1}. Variables/annotations/user data have been removed
            Event description ID=39458, Level=Warning, Channel=debug
            </summary>
            <param name="RecordNumber">Parameter 0 for event: Truncated tracking record {0} written to ETW session with provider {1}. Variables/annotations/user data have been removed</param>
            <param name="ProviderId">Parameter 1 for event: Truncated tracking record {0} written to ETW session with provider {1}. Variables/annotations/user data have been removed</param>
        </member>
        <member name="M:System.Activities.TD.TrackingDataExtractedIsEnabled">
            <summary>
            Check if trace definition is enabled
            Event description ID=39459, Level=verbose, Channel=debug
            </summary>
        </member>
        <member name="M:System.Activities.TD.TrackingDataExtracted(System.String,System.String)">
            <summary>
            Gets trace definition like: Tracking data {0} extracted in activity {1}.
            Event description ID=39459, Level=verbose, Channel=debug
            </summary>
            <param name="Data">Parameter 0 for event: Tracking data {0} extracted in activity {1}.</param>
            <param name="Activity">Parameter 1 for event: Tracking data {0} extracted in activity {1}.</param>
        </member>
        <member name="M:System.Activities.TD.SwitchCaseNotFoundIsEnabled">
            <summary>
            Check if trace definition is enabled
            Event description ID=1223, Level=Informational, Channel=debug
            </summary>
        </member>
        <member name="M:System.Activities.TD.SwitchCaseNotFound(System.String)">
            <summary>
            Gets trace definition like: The Switch activity '{0}' could not find a Case activity matching the Expression result.
            Event description ID=1223, Level=Informational, Channel=debug
            </summary>
            <param name="param0">Parameter 0 for event: The Switch activity '{0}' could not find a Case activity matching the Expression result.</param>
        </member>
        <member name="M:System.Activities.TD.TryCatchExceptionFromTryIsEnabled">
            <summary>
            Check if trace definition is enabled
            Event description ID=2576, Level=Informational, Channel=debug
            </summary>
        </member>
        <member name="M:System.Activities.TD.TryCatchExceptionFromTry(System.String,System.String)">
            <summary>
            Gets trace definition like: The TryCatch activity '{0}' has caught an exception of type '{1}'.
            Event description ID=2576, Level=Informational, Channel=debug
            </summary>
            <param name="param0">Parameter 0 for event: The TryCatch activity '{0}' has caught an exception of type '{1}'.</param>
            <param name="param1">Parameter 1 for event: The TryCatch activity '{0}' has caught an exception of type '{1}'.</param>
        </member>
        <member name="M:System.Activities.TD.TryCatchExceptionDuringCancelationIsEnabled">
            <summary>
            Check if trace definition is enabled
            Event description ID=2577, Level=Warning, Channel=debug
            </summary>
        </member>
        <member name="M:System.Activities.TD.TryCatchExceptionDuringCancelation(System.String)">
            <summary>
            Gets trace definition like: A child activity of the TryCatch activity '{0}' has thrown an exception during cancelation.
            Event description ID=2577, Level=Warning, Channel=debug
            </summary>
            <param name="param0">Parameter 0 for event: A child activity of the TryCatch activity '{0}' has thrown an exception during cancelation.</param>
        </member>
        <member name="M:System.Activities.TD.TryCatchExceptionFromCatchOrFinallyIsEnabled">
            <summary>
            Check if trace definition is enabled
            Event description ID=2578, Level=Warning, Channel=debug
            </summary>
        </member>
        <member name="M:System.Activities.TD.TryCatchExceptionFromCatchOrFinally(System.String)">
            <summary>
            Gets trace definition like: A Catch or Finally activity that is associated with the TryCatch activity '{0}' has thrown an exception.
            Event description ID=2578, Level=Warning, Channel=debug
            </summary>
            <param name="param0">Parameter 0 for event: A Catch or Finally activity that is associated with the TryCatch activity '{0}' has thrown an exception.</param>
        </member>
        <member name="M:System.Activities.TD.CompleteBookmarkWorkItemIsEnabled">
            <summary>
            Check if trace definition is enabled
            Event description ID=1023, Level=verbose, Channel=debug
            </summary>
        </member>
        <member name="M:System.Activities.TD.CompleteBookmarkWorkItem(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Gets trace definition like: A BookmarkWorkItem has completed for Activity '{0}', DisplayName: '{1}', InstanceId: '{2}'. BookmarkName: {3}, BookmarkScope: {4}.
            Event description ID=1023, Level=verbose, Channel=debug
            </summary>
            <param name="param0">Parameter 0 for event: A BookmarkWorkItem has completed for Activity '{0}', DisplayName: '{1}', InstanceId: '{2}'. BookmarkName: {3}, BookmarkScope: {4}.</param>
            <param name="param1">Parameter 1 for event: A BookmarkWorkItem has completed for Activity '{0}', DisplayName: '{1}', InstanceId: '{2}'. BookmarkName: {3}, BookmarkScope: {4}.</param>
            <param name="param2">Parameter 2 for event: A BookmarkWorkItem has completed for Activity '{0}', DisplayName: '{1}', InstanceId: '{2}'. BookmarkName: {3}, BookmarkScope: {4}.</param>
            <param name="param3">Parameter 3 for event: A BookmarkWorkItem has completed for Activity '{0}', DisplayName: '{1}', InstanceId: '{2}'. BookmarkName: {3}, BookmarkScope: {4}.</param>
            <param name="param4">Parameter 4 for event: A BookmarkWorkItem has completed for Activity '{0}', DisplayName: '{1}', InstanceId: '{2}'. BookmarkName: {3}, BookmarkScope: {4}.</param>
        </member>
        <member name="M:System.Activities.TD.CompleteCancelActivityWorkItemIsEnabled">
            <summary>
            Check if trace definition is enabled
            Event description ID=1019, Level=verbose, Channel=debug
            </summary>
        </member>
        <member name="M:System.Activities.TD.CompleteCancelActivityWorkItem(System.String,System.String,System.String)">
            <summary>
            Gets trace definition like: A CancelActivityWorkItem has completed for Activity '{0}', DisplayName: '{1}', InstanceId: '{2}'.
            Event description ID=1019, Level=verbose, Channel=debug
            </summary>
            <param name="param0">Parameter 0 for event: A CancelActivityWorkItem has completed for Activity '{0}', DisplayName: '{1}', InstanceId: '{2}'.</param>
            <param name="param1">Parameter 1 for event: A CancelActivityWorkItem has completed for Activity '{0}', DisplayName: '{1}', InstanceId: '{2}'.</param>
            <param name="param2">Parameter 2 for event: A CancelActivityWorkItem has completed for Activity '{0}', DisplayName: '{1}', InstanceId: '{2}'.</param>
        </member>
        <member name="M:System.Activities.TD.CompleteCompletionWorkItemIsEnabled">
            <summary>
            Check if trace definition is enabled
            Event description ID=1016, Level=verbose, Channel=debug
            </summary>
        </member>
        <member name="M:System.Activities.TD.CompleteCompletionWorkItem(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Gets trace definition like: A CompletionWorkItem has completed for parent Activity '{0}', DisplayName: '{1}', InstanceId: '{2}'. Completed Activity '{3}', DisplayName: '{4}', InstanceId: '{5}'.
            Event description ID=1016, Level=verbose, Channel=debug
            </summary>
            <param name="param0">Parameter 0 for event: A CompletionWorkItem has completed for parent Activity '{0}', DisplayName: '{1}', InstanceId: '{2}'. Completed Activity '{3}', DisplayName: '{4}', InstanceId: '{5}'.</param>
            <param name="param1">Parameter 1 for event: A CompletionWorkItem has completed for parent Activity '{0}', DisplayName: '{1}', InstanceId: '{2}'. Completed Activity '{3}', DisplayName: '{4}', InstanceId: '{5}'.</param>
            <param name="param2">Parameter 2 for event: A CompletionWorkItem has completed for parent Activity '{0}', DisplayName: '{1}', InstanceId: '{2}'. Completed Activity '{3}', DisplayName: '{4}', InstanceId: '{5}'.</param>
            <param name="param3">Parameter 3 for event: A CompletionWorkItem has completed for parent Activity '{0}', DisplayName: '{1}', InstanceId: '{2}'. Completed Activity '{3}', DisplayName: '{4}', InstanceId: '{5}'.</param>
            <param name="param4">Parameter 4 for event: A CompletionWorkItem has completed for parent Activity '{0}', DisplayName: '{1}', InstanceId: '{2}'. Completed Activity '{3}', DisplayName: '{4}', InstanceId: '{5}'.</param>
            <param name="param5">Parameter 5 for event: A CompletionWorkItem has completed for parent Activity '{0}', DisplayName: '{1}', InstanceId: '{2}'. Completed Activity '{3}', DisplayName: '{4}', InstanceId: '{5}'.</param>
        </member>
        <member name="M:System.Activities.TD.CompleteExecuteActivityWorkItemIsEnabled">
            <summary>
            Check if trace definition is enabled
            Event description ID=1013, Level=verbose, Channel=debug
            </summary>
        </member>
        <member name="M:System.Activities.TD.CompleteExecuteActivityWorkItem(System.String,System.String,System.String)">
            <summary>
            Gets trace definition like: An ExecuteActivityWorkItem has completed for Activity '{0}', DisplayName: '{1}', InstanceId: '{2}'.
            Event description ID=1013, Level=verbose, Channel=debug
            </summary>
            <param name="param0">Parameter 0 for event: An ExecuteActivityWorkItem has completed for Activity '{0}', DisplayName: '{1}', InstanceId: '{2}'.</param>
            <param name="param1">Parameter 1 for event: An ExecuteActivityWorkItem has completed for Activity '{0}', DisplayName: '{1}', InstanceId: '{2}'.</param>
            <param name="param2">Parameter 2 for event: An ExecuteActivityWorkItem has completed for Activity '{0}', DisplayName: '{1}', InstanceId: '{2}'.</param>
        </member>
        <member name="M:System.Activities.TD.CompleteFaultWorkItemIsEnabled">
            <summary>
            Check if trace definition is enabled
            Event description ID=1031, Level=verbose, Channel=debug
            </summary>
        </member>
        <member name="M:System.Activities.TD.CompleteFaultWorkItem(System.String,System.String,System.String,System.String,System.String,System.String,System.Exception)">
            <summary>
            Gets trace definition like: A FaultWorkItem has completed for Activity '{0}', DisplayName: '{1}', InstanceId: '{2}'. The exception was propagated from Activity '{3}', DisplayName: '{4}', InstanceId: '{5}'.
            Event description ID=1031, Level=verbose, Channel=debug
            </summary>
            <param name="param0">Parameter 0 for event: A FaultWorkItem has completed for Activity '{0}', DisplayName: '{1}', InstanceId: '{2}'. The exception was propagated from Activity '{3}', DisplayName: '{4}', InstanceId: '{5}'.</param>
            <param name="param1">Parameter 1 for event: A FaultWorkItem has completed for Activity '{0}', DisplayName: '{1}', InstanceId: '{2}'. The exception was propagated from Activity '{3}', DisplayName: '{4}', InstanceId: '{5}'.</param>
            <param name="param2">Parameter 2 for event: A FaultWorkItem has completed for Activity '{0}', DisplayName: '{1}', InstanceId: '{2}'. The exception was propagated from Activity '{3}', DisplayName: '{4}', InstanceId: '{5}'.</param>
            <param name="param3">Parameter 3 for event: A FaultWorkItem has completed for Activity '{0}', DisplayName: '{1}', InstanceId: '{2}'. The exception was propagated from Activity '{3}', DisplayName: '{4}', InstanceId: '{5}'.</param>
            <param name="param4">Parameter 4 for event: A FaultWorkItem has completed for Activity '{0}', DisplayName: '{1}', InstanceId: '{2}'. The exception was propagated from Activity '{3}', DisplayName: '{4}', InstanceId: '{5}'.</param>
            <param name="param5">Parameter 5 for event: A FaultWorkItem has completed for Activity '{0}', DisplayName: '{1}', InstanceId: '{2}'. The exception was propagated from Activity '{3}', DisplayName: '{4}', InstanceId: '{5}'.</param>
            <param name="exception">Exception associated with the event</param>
        </member>
        <member name="M:System.Activities.TD.CompleteRuntimeWorkItemIsEnabled">
            <summary>
            Check if trace definition is enabled
            Event description ID=1034, Level=verbose, Channel=debug
            </summary>
        </member>
        <member name="M:System.Activities.TD.CompleteRuntimeWorkItem(System.String,System.String,System.String)">
            <summary>
            Gets trace definition like: A runtime work item has completed for Activity '{0}', DisplayName: '{1}', InstanceId: '{2}'.
            Event description ID=1034, Level=verbose, Channel=debug
            </summary>
            <param name="param0">Parameter 0 for event: A runtime work item has completed for Activity '{0}', DisplayName: '{1}', InstanceId: '{2}'.</param>
            <param name="param1">Parameter 1 for event: A runtime work item has completed for Activity '{0}', DisplayName: '{1}', InstanceId: '{2}'.</param>
            <param name="param2">Parameter 2 for event: A runtime work item has completed for Activity '{0}', DisplayName: '{1}', InstanceId: '{2}'.</param>
        </member>
        <member name="M:System.Activities.TD.CompleteTransactionContextWorkItemIsEnabled">
            <summary>
            Check if trace definition is enabled
            Event description ID=1028, Level=verbose, Channel=debug
            </summary>
        </member>
        <member name="M:System.Activities.TD.CompleteTransactionContextWorkItem(System.String,System.String,System.String)">
            <summary>
            Gets trace definition like: A TransactionContextWorkItem has completed for Activity '{0}', DisplayName: '{1}', InstanceId: '{2}'.
            Event description ID=1028, Level=verbose, Channel=debug
            </summary>
            <param name="param0">Parameter 0 for event: A TransactionContextWorkItem has completed for Activity '{0}', DisplayName: '{1}', InstanceId: '{2}'.</param>
            <param name="param1">Parameter 1 for event: A TransactionContextWorkItem has completed for Activity '{0}', DisplayName: '{1}', InstanceId: '{2}'.</param>
            <param name="param2">Parameter 2 for event: A TransactionContextWorkItem has completed for Activity '{0}', DisplayName: '{1}', InstanceId: '{2}'.</param>
        </member>
        <member name="M:System.Activities.TD.CreateBookmarkIsEnabled">
            <summary>
            Check if trace definition is enabled
            Event description ID=1020, Level=verbose, Channel=debug
            </summary>
        </member>
        <member name="M:System.Activities.TD.CreateBookmark(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Gets trace definition like: A Bookmark has been created for Activity '{0}', DisplayName: '{1}', InstanceId: '{2}'.  BookmarkName: {3}, BookmarkScope: {4}.
            Event description ID=1020, Level=verbose, Channel=debug
            </summary>
            <param name="param0">Parameter 0 for event: A Bookmark has been created for Activity '{0}', DisplayName: '{1}', InstanceId: '{2}'.  BookmarkName: {3}, BookmarkScope: {4}.</param>
            <param name="param1">Parameter 1 for event: A Bookmark has been created for Activity '{0}', DisplayName: '{1}', InstanceId: '{2}'.  BookmarkName: {3}, BookmarkScope: {4}.</param>
            <param name="param2">Parameter 2 for event: A Bookmark has been created for Activity '{0}', DisplayName: '{1}', InstanceId: '{2}'.  BookmarkName: {3}, BookmarkScope: {4}.</param>
            <param name="param3">Parameter 3 for event: A Bookmark has been created for Activity '{0}', DisplayName: '{1}', InstanceId: '{2}'.  BookmarkName: {3}, BookmarkScope: {4}.</param>
            <param name="param4">Parameter 4 for event: A Bookmark has been created for Activity '{0}', DisplayName: '{1}', InstanceId: '{2}'.  BookmarkName: {3}, BookmarkScope: {4}.</param>
        </member>
        <member name="M:System.Activities.TD.CreateBookmarkScopeIsEnabled">
            <summary>
            Check if trace definition is enabled
            Event description ID=1024, Level=verbose, Channel=debug
            </summary>
        </member>
        <member name="M:System.Activities.TD.CreateBookmarkScope(System.String)">
            <summary>
            Gets trace definition like: A BookmarkScope has been created: {0}.
            Event description ID=1024, Level=verbose, Channel=debug
            </summary>
            <param name="param0">Parameter 0 for event: A BookmarkScope has been created: {0}.</param>
        </member>
        <member name="M:System.Activities.TD.EnterNoPersistBlockIsEnabled">
            <summary>
            Check if trace definition is enabled
            Event description ID=1038, Level=verbose, Channel=debug
            </summary>
        </member>
        <member name="M:System.Activities.TD.EnterNoPersistBlock">
            <summary>
            Gets trace definition like: Entering a no persist block.
            Event description ID=1038, Level=verbose, Channel=debug
            </summary>
        </member>
        <member name="M:System.Activities.TD.ExitNoPersistBlockIsEnabled">
            <summary>
            Check if trace definition is enabled
            Event description ID=1039, Level=verbose, Channel=debug
            </summary>
        </member>
        <member name="M:System.Activities.TD.ExitNoPersistBlock">
            <summary>
            Gets trace definition like: Exiting a no persist block.
            Event description ID=1039, Level=verbose, Channel=debug
            </summary>
        </member>
        <member name="M:System.Activities.TD.InArgumentBoundIsEnabled">
            <summary>
            Check if trace definition is enabled
            Event description ID=1040, Level=verbose, Channel=debug
            </summary>
        </member>
        <member name="M:System.Activities.TD.InArgumentBound(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Gets trace definition like: In argument '{0}' on Activity '{1}', DisplayName: '{2}', InstanceId: '{3}' has been bound with value: {4}.
            Event description ID=1040, Level=verbose, Channel=debug
            </summary>
            <param name="param0">Parameter 0 for event: In argument '{0}' on Activity '{1}', DisplayName: '{2}', InstanceId: '{3}' has been bound with value: {4}.</param>
            <param name="param1">Parameter 1 for event: In argument '{0}' on Activity '{1}', DisplayName: '{2}', InstanceId: '{3}' has been bound with value: {4}.</param>
            <param name="param2">Parameter 2 for event: In argument '{0}' on Activity '{1}', DisplayName: '{2}', InstanceId: '{3}' has been bound with value: {4}.</param>
            <param name="param3">Parameter 3 for event: In argument '{0}' on Activity '{1}', DisplayName: '{2}', InstanceId: '{3}' has been bound with value: {4}.</param>
            <param name="param4">Parameter 4 for event: In argument '{0}' on Activity '{1}', DisplayName: '{2}', InstanceId: '{3}' has been bound with value: {4}.</param>
        </member>
        <member name="M:System.Activities.TD.RuntimeTransactionCompleteIsEnabled">
            <summary>
            Check if trace definition is enabled
            Event description ID=1037, Level=verbose, Channel=debug
            </summary>
        </member>
        <member name="M:System.Activities.TD.RuntimeTransactionComplete(System.String)">
            <summary>
            Gets trace definition like: The runtime transaction has completed with the state '{0}'.
            Event description ID=1037, Level=verbose, Channel=debug
            </summary>
            <param name="param0">Parameter 0 for event: The runtime transaction has completed with the state '{0}'.</param>
        </member>
        <member name="M:System.Activities.TD.RuntimeTransactionCompletionRequestedIsEnabled">
            <summary>
            Check if trace definition is enabled
            Event description ID=1036, Level=verbose, Channel=debug
            </summary>
        </member>
        <member name="M:System.Activities.TD.RuntimeTransactionCompletionRequested(System.String,System.String,System.String)">
            <summary>
            Gets trace definition like: Activity '{0}', DisplayName: '{1}', InstanceId: '{2}' has scheduled completion of the runtime transaction.
            Event description ID=1036, Level=verbose, Channel=debug
            </summary>
            <param name="param0">Parameter 0 for event: Activity '{0}', DisplayName: '{1}', InstanceId: '{2}' has scheduled completion of the runtime transaction.</param>
            <param name="param1">Parameter 1 for event: Activity '{0}', DisplayName: '{1}', InstanceId: '{2}' has scheduled completion of the runtime transaction.</param>
            <param name="param2">Parameter 2 for event: Activity '{0}', DisplayName: '{1}', InstanceId: '{2}' has scheduled completion of the runtime transaction.</param>
        </member>
        <member name="M:System.Activities.TD.RuntimeTransactionSetIsEnabled">
            <summary>
            Check if trace definition is enabled
            Event description ID=1035, Level=verbose, Channel=debug
            </summary>
        </member>
        <member name="M:System.Activities.TD.RuntimeTransactionSet(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Gets trace definition like: The runtime transaction has been set by Activity '{0}', DisplayName: '{1}', InstanceId: '{2}'.  Execution isolated to Activity '{3}', DisplayName: '{4}', InstanceId: '{5}'.
            Event description ID=1035, Level=verbose, Channel=debug
            </summary>
            <param name="param0">Parameter 0 for event: The runtime transaction has been set by Activity '{0}', DisplayName: '{1}', InstanceId: '{2}'.  Execution isolated to Activity '{3}', DisplayName: '{4}', InstanceId: '{5}'.</param>
            <param name="param1">Parameter 1 for event: The runtime transaction has been set by Activity '{0}', DisplayName: '{1}', InstanceId: '{2}'.  Execution isolated to Activity '{3}', DisplayName: '{4}', InstanceId: '{5}'.</param>
            <param name="param2">Parameter 2 for event: The runtime transaction has been set by Activity '{0}', DisplayName: '{1}', InstanceId: '{2}'.  Execution isolated to Activity '{3}', DisplayName: '{4}', InstanceId: '{5}'.</param>
            <param name="param3">Parameter 3 for event: The runtime transaction has been set by Activity '{0}', DisplayName: '{1}', InstanceId: '{2}'.  Execution isolated to Activity '{3}', DisplayName: '{4}', InstanceId: '{5}'.</param>
            <param name="param4">Parameter 4 for event: The runtime transaction has been set by Activity '{0}', DisplayName: '{1}', InstanceId: '{2}'.  Execution isolated to Activity '{3}', DisplayName: '{4}', InstanceId: '{5}'.</param>
            <param name="param5">Parameter 5 for event: The runtime transaction has been set by Activity '{0}', DisplayName: '{1}', InstanceId: '{2}'.  Execution isolated to Activity '{3}', DisplayName: '{4}', InstanceId: '{5}'.</param>
        </member>
        <member name="M:System.Activities.TD.ScheduleBookmarkWorkItemIsEnabled">
            <summary>
            Check if trace definition is enabled
            Event description ID=1021, Level=verbose, Channel=debug
            </summary>
        </member>
        <member name="M:System.Activities.TD.ScheduleBookmarkWorkItem(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Gets trace definition like: A BookmarkWorkItem has been scheduled for Activity '{0}', DisplayName: '{1}', InstanceId: '{2}'.  BookmarkName: {3}, BookmarkScope: {4}.
            Event description ID=1021, Level=verbose, Channel=debug
            </summary>
            <param name="param0">Parameter 0 for event: A BookmarkWorkItem has been scheduled for Activity '{0}', DisplayName: '{1}', InstanceId: '{2}'.  BookmarkName: {3}, BookmarkScope: {4}.</param>
            <param name="param1">Parameter 1 for event: A BookmarkWorkItem has been scheduled for Activity '{0}', DisplayName: '{1}', InstanceId: '{2}'.  BookmarkName: {3}, BookmarkScope: {4}.</param>
            <param name="param2">Parameter 2 for event: A BookmarkWorkItem has been scheduled for Activity '{0}', DisplayName: '{1}', InstanceId: '{2}'.  BookmarkName: {3}, BookmarkScope: {4}.</param>
            <param name="param3">Parameter 3 for event: A BookmarkWorkItem has been scheduled for Activity '{0}', DisplayName: '{1}', InstanceId: '{2}'.  BookmarkName: {3}, BookmarkScope: {4}.</param>
            <param name="param4">Parameter 4 for event: A BookmarkWorkItem has been scheduled for Activity '{0}', DisplayName: '{1}', InstanceId: '{2}'.  BookmarkName: {3}, BookmarkScope: {4}.</param>
        </member>
        <member name="M:System.Activities.TD.ScheduleCancelActivityWorkItemIsEnabled">
            <summary>
            Check if trace definition is enabled
            Event description ID=1017, Level=verbose, Channel=debug
            </summary>
        </member>
        <member name="M:System.Activities.TD.ScheduleCancelActivityWorkItem(System.String,System.String,System.String)">
            <summary>
            Gets trace definition like: A CancelActivityWorkItem has been scheduled for Activity '{0}', DisplayName: '{1}', InstanceId: '{2}'.
            Event description ID=1017, Level=verbose, Channel=debug
            </summary>
            <param name="param0">Parameter 0 for event: A CancelActivityWorkItem has been scheduled for Activity '{0}', DisplayName: '{1}', InstanceId: '{2}'.</param>
            <param name="param1">Parameter 1 for event: A CancelActivityWorkItem has been scheduled for Activity '{0}', DisplayName: '{1}', InstanceId: '{2}'.</param>
            <param name="param2">Parameter 2 for event: A CancelActivityWorkItem has been scheduled for Activity '{0}', DisplayName: '{1}', InstanceId: '{2}'.</param>
        </member>
        <member name="M:System.Activities.TD.ScheduleCompletionWorkItemIsEnabled">
            <summary>
            Check if trace definition is enabled
            Event description ID=1014, Level=verbose, Channel=debug
            </summary>
        </member>
        <member name="M:System.Activities.TD.ScheduleCompletionWorkItem(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Gets trace definition like: A CompletionWorkItem has been scheduled for parent Activity '{0}', DisplayName: '{1}', InstanceId: '{2}'.  Completed Activity '{3}', DisplayName: '{4}', InstanceId: '{5}'.
            Event description ID=1014, Level=verbose, Channel=debug
            </summary>
            <param name="param0">Parameter 0 for event: A CompletionWorkItem has been scheduled for parent Activity '{0}', DisplayName: '{1}', InstanceId: '{2}'.  Completed Activity '{3}', DisplayName: '{4}', InstanceId: '{5}'.</param>
            <param name="param1">Parameter 1 for event: A CompletionWorkItem has been scheduled for parent Activity '{0}', DisplayName: '{1}', InstanceId: '{2}'.  Completed Activity '{3}', DisplayName: '{4}', InstanceId: '{5}'.</param>
            <param name="param2">Parameter 2 for event: A CompletionWorkItem has been scheduled for parent Activity '{0}', DisplayName: '{1}', InstanceId: '{2}'.  Completed Activity '{3}', DisplayName: '{4}', InstanceId: '{5}'.</param>
            <param name="param3">Parameter 3 for event: A CompletionWorkItem has been scheduled for parent Activity '{0}', DisplayName: '{1}', InstanceId: '{2}'.  Completed Activity '{3}', DisplayName: '{4}', InstanceId: '{5}'.</param>
            <param name="param4">Parameter 4 for event: A CompletionWorkItem has been scheduled for parent Activity '{0}', DisplayName: '{1}', InstanceId: '{2}'.  Completed Activity '{3}', DisplayName: '{4}', InstanceId: '{5}'.</param>
            <param name="param5">Parameter 5 for event: A CompletionWorkItem has been scheduled for parent Activity '{0}', DisplayName: '{1}', InstanceId: '{2}'.  Completed Activity '{3}', DisplayName: '{4}', InstanceId: '{5}'.</param>
        </member>
        <member name="M:System.Activities.TD.ScheduleExecuteActivityWorkItemIsEnabled">
            <summary>
            Check if trace definition is enabled
            Event description ID=1011, Level=verbose, Channel=debug
            </summary>
        </member>
        <member name="M:System.Activities.TD.ScheduleExecuteActivityWorkItem(System.String,System.String,System.String)">
            <summary>
            Gets trace definition like: An ExecuteActivityWorkItem has been scheduled for Activity '{0}', DisplayName: '{1}', InstanceId: '{2}'.
            Event description ID=1011, Level=verbose, Channel=debug
            </summary>
            <param name="param0">Parameter 0 for event: An ExecuteActivityWorkItem has been scheduled for Activity '{0}', DisplayName: '{1}', InstanceId: '{2}'.</param>
            <param name="param1">Parameter 1 for event: An ExecuteActivityWorkItem has been scheduled for Activity '{0}', DisplayName: '{1}', InstanceId: '{2}'.</param>
            <param name="param2">Parameter 2 for event: An ExecuteActivityWorkItem has been scheduled for Activity '{0}', DisplayName: '{1}', InstanceId: '{2}'.</param>
        </member>
        <member name="M:System.Activities.TD.ScheduleFaultWorkItemIsEnabled">
            <summary>
            Check if trace definition is enabled
            Event description ID=1029, Level=verbose, Channel=debug
            </summary>
        </member>
        <member name="M:System.Activities.TD.ScheduleFaultWorkItem(System.String,System.String,System.String,System.String,System.String,System.String,System.Exception)">
            <summary>
            Gets trace definition like: A FaultWorkItem has been scheduled for Activity '{0}', DisplayName: '{1}', InstanceId: '{2}'.  The exception was propagated from Activity '{3}', DisplayName: '{4}', InstanceId: '{5}'.
            Event description ID=1029, Level=verbose, Channel=debug
            </summary>
            <param name="param0">Parameter 0 for event: A FaultWorkItem has been scheduled for Activity '{0}', DisplayName: '{1}', InstanceId: '{2}'.  The exception was propagated from Activity '{3}', DisplayName: '{4}', InstanceId: '{5}'.</param>
            <param name="param1">Parameter 1 for event: A FaultWorkItem has been scheduled for Activity '{0}', DisplayName: '{1}', InstanceId: '{2}'.  The exception was propagated from Activity '{3}', DisplayName: '{4}', InstanceId: '{5}'.</param>
            <param name="param2">Parameter 2 for event: A FaultWorkItem has been scheduled for Activity '{0}', DisplayName: '{1}', InstanceId: '{2}'.  The exception was propagated from Activity '{3}', DisplayName: '{4}', InstanceId: '{5}'.</param>
            <param name="param3">Parameter 3 for event: A FaultWorkItem has been scheduled for Activity '{0}', DisplayName: '{1}', InstanceId: '{2}'.  The exception was propagated from Activity '{3}', DisplayName: '{4}', InstanceId: '{5}'.</param>
            <param name="param4">Parameter 4 for event: A FaultWorkItem has been scheduled for Activity '{0}', DisplayName: '{1}', InstanceId: '{2}'.  The exception was propagated from Activity '{3}', DisplayName: '{4}', InstanceId: '{5}'.</param>
            <param name="param5">Parameter 5 for event: A FaultWorkItem has been scheduled for Activity '{0}', DisplayName: '{1}', InstanceId: '{2}'.  The exception was propagated from Activity '{3}', DisplayName: '{4}', InstanceId: '{5}'.</param>
            <param name="exception">Exception associated with the event</param>
        </member>
        <member name="M:System.Activities.TD.ScheduleRuntimeWorkItemIsEnabled">
            <summary>
            Check if trace definition is enabled
            Event description ID=1032, Level=verbose, Channel=debug
            </summary>
        </member>
        <member name="M:System.Activities.TD.ScheduleRuntimeWorkItem(System.String,System.String,System.String)">
            <summary>
            Gets trace definition like: A runtime work item has been scheduled for Activity '{0}', DisplayName: '{1}', InstanceId: '{2}'.
            Event description ID=1032, Level=verbose, Channel=debug
            </summary>
            <param name="param0">Parameter 0 for event: A runtime work item has been scheduled for Activity '{0}', DisplayName: '{1}', InstanceId: '{2}'.</param>
            <param name="param1">Parameter 1 for event: A runtime work item has been scheduled for Activity '{0}', DisplayName: '{1}', InstanceId: '{2}'.</param>
            <param name="param2">Parameter 2 for event: A runtime work item has been scheduled for Activity '{0}', DisplayName: '{1}', InstanceId: '{2}'.</param>
        </member>
        <member name="M:System.Activities.TD.ScheduleTransactionContextWorkItemIsEnabled">
            <summary>
            Check if trace definition is enabled
            Event description ID=1026, Level=verbose, Channel=debug
            </summary>
        </member>
        <member name="M:System.Activities.TD.ScheduleTransactionContextWorkItem(System.String,System.String,System.String)">
            <summary>
            Gets trace definition like: A TransactionContextWorkItem has been scheduled for Activity '{0}', DisplayName: '{1}', InstanceId: '{2}'.
            Event description ID=1026, Level=verbose, Channel=debug
            </summary>
            <param name="param0">Parameter 0 for event: A TransactionContextWorkItem has been scheduled for Activity '{0}', DisplayName: '{1}', InstanceId: '{2}'.</param>
            <param name="param1">Parameter 1 for event: A TransactionContextWorkItem has been scheduled for Activity '{0}', DisplayName: '{1}', InstanceId: '{2}'.</param>
            <param name="param2">Parameter 2 for event: A TransactionContextWorkItem has been scheduled for Activity '{0}', DisplayName: '{1}', InstanceId: '{2}'.</param>
        </member>
        <member name="M:System.Activities.TD.StartBookmarkWorkItemIsEnabled">
            <summary>
            Check if trace definition is enabled
            Event description ID=1022, Level=verbose, Channel=debug
            </summary>
        </member>
        <member name="M:System.Activities.TD.StartBookmarkWorkItem(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Gets trace definition like: Starting execution of a BookmarkWorkItem for Activity '{0}', DisplayName: '{1}', InstanceId: '{2}'.  BookmarkName: {3}, BookmarkScope: {4}.
            Event description ID=1022, Level=verbose, Channel=debug
            </summary>
            <param name="param0">Parameter 0 for event: Starting execution of a BookmarkWorkItem for Activity '{0}', DisplayName: '{1}', InstanceId: '{2}'.  BookmarkName: {3}, BookmarkScope: {4}.</param>
            <param name="param1">Parameter 1 for event: Starting execution of a BookmarkWorkItem for Activity '{0}', DisplayName: '{1}', InstanceId: '{2}'.  BookmarkName: {3}, BookmarkScope: {4}.</param>
            <param name="param2">Parameter 2 for event: Starting execution of a BookmarkWorkItem for Activity '{0}', DisplayName: '{1}', InstanceId: '{2}'.  BookmarkName: {3}, BookmarkScope: {4}.</param>
            <param name="param3">Parameter 3 for event: Starting execution of a BookmarkWorkItem for Activity '{0}', DisplayName: '{1}', InstanceId: '{2}'.  BookmarkName: {3}, BookmarkScope: {4}.</param>
            <param name="param4">Parameter 4 for event: Starting execution of a BookmarkWorkItem for Activity '{0}', DisplayName: '{1}', InstanceId: '{2}'.  BookmarkName: {3}, BookmarkScope: {4}.</param>
        </member>
        <member name="M:System.Activities.TD.StartCancelActivityWorkItemIsEnabled">
            <summary>
            Check if trace definition is enabled
            Event description ID=1018, Level=verbose, Channel=debug
            </summary>
        </member>
        <member name="M:System.Activities.TD.StartCancelActivityWorkItem(System.String,System.String,System.String)">
            <summary>
            Gets trace definition like: Starting execution of a CancelActivityWorkItem for Activity '{0}', DisplayName: '{1}', InstanceId: '{2}'.
            Event description ID=1018, Level=verbose, Channel=debug
            </summary>
            <param name="param0">Parameter 0 for event: Starting execution of a CancelActivityWorkItem for Activity '{0}', DisplayName: '{1}', InstanceId: '{2}'.</param>
            <param name="param1">Parameter 1 for event: Starting execution of a CancelActivityWorkItem for Activity '{0}', DisplayName: '{1}', InstanceId: '{2}'.</param>
            <param name="param2">Parameter 2 for event: Starting execution of a CancelActivityWorkItem for Activity '{0}', DisplayName: '{1}', InstanceId: '{2}'.</param>
        </member>
        <member name="M:System.Activities.TD.StartCompletionWorkItemIsEnabled">
            <summary>
            Check if trace definition is enabled
            Event description ID=1015, Level=verbose, Channel=debug
            </summary>
        </member>
        <member name="M:System.Activities.TD.StartCompletionWorkItem(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Gets trace definition like: Starting execution of a CompletionWorkItem for parent Activity '{0}', DisplayName: '{1}', InstanceId: '{2}'. Completed Activity '{3}', DisplayName: '{4}', InstanceId: '{5}'.
            Event description ID=1015, Level=verbose, Channel=debug
            </summary>
            <param name="param0">Parameter 0 for event: Starting execution of a CompletionWorkItem for parent Activity '{0}', DisplayName: '{1}', InstanceId: '{2}'. Completed Activity '{3}', DisplayName: '{4}', InstanceId: '{5}'.</param>
            <param name="param1">Parameter 1 for event: Starting execution of a CompletionWorkItem for parent Activity '{0}', DisplayName: '{1}', InstanceId: '{2}'. Completed Activity '{3}', DisplayName: '{4}', InstanceId: '{5}'.</param>
            <param name="param2">Parameter 2 for event: Starting execution of a CompletionWorkItem for parent Activity '{0}', DisplayName: '{1}', InstanceId: '{2}'. Completed Activity '{3}', DisplayName: '{4}', InstanceId: '{5}'.</param>
            <param name="param3">Parameter 3 for event: Starting execution of a CompletionWorkItem for parent Activity '{0}', DisplayName: '{1}', InstanceId: '{2}'. Completed Activity '{3}', DisplayName: '{4}', InstanceId: '{5}'.</param>
            <param name="param4">Parameter 4 for event: Starting execution of a CompletionWorkItem for parent Activity '{0}', DisplayName: '{1}', InstanceId: '{2}'. Completed Activity '{3}', DisplayName: '{4}', InstanceId: '{5}'.</param>
            <param name="param5">Parameter 5 for event: Starting execution of a CompletionWorkItem for parent Activity '{0}', DisplayName: '{1}', InstanceId: '{2}'. Completed Activity '{3}', DisplayName: '{4}', InstanceId: '{5}'.</param>
        </member>
        <member name="M:System.Activities.TD.StartExecuteActivityWorkItemIsEnabled">
            <summary>
            Check if trace definition is enabled
            Event description ID=1012, Level=verbose, Channel=debug
            </summary>
        </member>
        <member name="M:System.Activities.TD.StartExecuteActivityWorkItem(System.String,System.String,System.String)">
            <summary>
            Gets trace definition like: Starting execution of an ExecuteActivityWorkItem for Activity '{0}', DisplayName: '{1}', InstanceId: '{2}'.
            Event description ID=1012, Level=verbose, Channel=debug
            </summary>
            <param name="param0">Parameter 0 for event: Starting execution of an ExecuteActivityWorkItem for Activity '{0}', DisplayName: '{1}', InstanceId: '{2}'.</param>
            <param name="param1">Parameter 1 for event: Starting execution of an ExecuteActivityWorkItem for Activity '{0}', DisplayName: '{1}', InstanceId: '{2}'.</param>
            <param name="param2">Parameter 2 for event: Starting execution of an ExecuteActivityWorkItem for Activity '{0}', DisplayName: '{1}', InstanceId: '{2}'.</param>
        </member>
        <member name="M:System.Activities.TD.StartFaultWorkItemIsEnabled">
            <summary>
            Check if trace definition is enabled
            Event description ID=1030, Level=verbose, Channel=debug
            </summary>
        </member>
        <member name="M:System.Activities.TD.StartFaultWorkItem(System.String,System.String,System.String,System.String,System.String,System.String,System.Exception)">
            <summary>
            Gets trace definition like: Starting execution of a FaultWorkItem for Activity '{0}', DisplayName: '{1}', InstanceId: '{2}'.  The exception was propagated from Activity '{3}', DisplayName: '{4}', InstanceId: '{5}'.
            Event description ID=1030, Level=verbose, Channel=debug
            </summary>
            <param name="param0">Parameter 0 for event: Starting execution of a FaultWorkItem for Activity '{0}', DisplayName: '{1}', InstanceId: '{2}'.  The exception was propagated from Activity '{3}', DisplayName: '{4}', InstanceId: '{5}'.</param>
            <param name="param1">Parameter 1 for event: Starting execution of a FaultWorkItem for Activity '{0}', DisplayName: '{1}', InstanceId: '{2}'.  The exception was propagated from Activity '{3}', DisplayName: '{4}', InstanceId: '{5}'.</param>
            <param name="param2">Parameter 2 for event: Starting execution of a FaultWorkItem for Activity '{0}', DisplayName: '{1}', InstanceId: '{2}'.  The exception was propagated from Activity '{3}', DisplayName: '{4}', InstanceId: '{5}'.</param>
            <param name="param3">Parameter 3 for event: Starting execution of a FaultWorkItem for Activity '{0}', DisplayName: '{1}', InstanceId: '{2}'.  The exception was propagated from Activity '{3}', DisplayName: '{4}', InstanceId: '{5}'.</param>
            <param name="param4">Parameter 4 for event: Starting execution of a FaultWorkItem for Activity '{0}', DisplayName: '{1}', InstanceId: '{2}'.  The exception was propagated from Activity '{3}', DisplayName: '{4}', InstanceId: '{5}'.</param>
            <param name="param5">Parameter 5 for event: Starting execution of a FaultWorkItem for Activity '{0}', DisplayName: '{1}', InstanceId: '{2}'.  The exception was propagated from Activity '{3}', DisplayName: '{4}', InstanceId: '{5}'.</param>
            <param name="exception">Exception associated with the event</param>
        </member>
        <member name="M:System.Activities.TD.StartRuntimeWorkItemIsEnabled">
            <summary>
            Check if trace definition is enabled
            Event description ID=1033, Level=verbose, Channel=debug
            </summary>
        </member>
        <member name="M:System.Activities.TD.StartRuntimeWorkItem(System.String,System.String,System.String)">
            <summary>
            Gets trace definition like: Starting execution of a runtime work item for Activity '{0}', DisplayName: '{1}', InstanceId: '{2}'.
            Event description ID=1033, Level=verbose, Channel=debug
            </summary>
            <param name="param0">Parameter 0 for event: Starting execution of a runtime work item for Activity '{0}', DisplayName: '{1}', InstanceId: '{2}'.</param>
            <param name="param1">Parameter 1 for event: Starting execution of a runtime work item for Activity '{0}', DisplayName: '{1}', InstanceId: '{2}'.</param>
            <param name="param2">Parameter 2 for event: Starting execution of a runtime work item for Activity '{0}', DisplayName: '{1}', InstanceId: '{2}'.</param>
        </member>
        <member name="M:System.Activities.TD.StartTransactionContextWorkItemIsEnabled">
            <summary>
            Check if trace definition is enabled
            Event description ID=1027, Level=verbose, Channel=debug
            </summary>
        </member>
        <member name="M:System.Activities.TD.StartTransactionContextWorkItem(System.String,System.String,System.String)">
            <summary>
            Gets trace definition like: Starting execution of a TransactionContextWorkItem for Activity '{0}', DisplayName: '{1}', InstanceId: '{2}'.
            Event description ID=1027, Level=verbose, Channel=debug
            </summary>
            <param name="param0">Parameter 0 for event: Starting execution of a TransactionContextWorkItem for Activity '{0}', DisplayName: '{1}', InstanceId: '{2}'.</param>
            <param name="param1">Parameter 1 for event: Starting execution of a TransactionContextWorkItem for Activity '{0}', DisplayName: '{1}', InstanceId: '{2}'.</param>
            <param name="param2">Parameter 2 for event: Starting execution of a TransactionContextWorkItem for Activity '{0}', DisplayName: '{1}', InstanceId: '{2}'.</param>
        </member>
        <member name="M:System.Activities.TD.BookmarkScopeInitializedIsEnabled">
            <summary>
            Check if trace definition is enabled
            Event description ID=1025, Level=verbose, Channel=debug
            </summary>
        </member>
        <member name="M:System.Activities.TD.BookmarkScopeInitialized(System.String,System.String)">
            <summary>
            Gets trace definition like: The BookmarkScope that had TemporaryId: '{0}' has been initialized with Id: '{1}'.
            Event description ID=1025, Level=verbose, Channel=debug
            </summary>
            <param name="param0">Parameter 0 for event: The BookmarkScope that had TemporaryId: '{0}' has been initialized with Id: '{1}'.</param>
            <param name="param1">Parameter 1 for event: The BookmarkScope that had TemporaryId: '{0}' has been initialized with Id: '{1}'.</param>
        </member>
        <member name="M:System.Activities.TD.WorkflowActivityResumeIsEnabled">
            <summary>
            Check if trace definition is enabled
            Event description ID=1104, Level=informational, Channel=debug
            </summary>
        </member>
        <member name="M:System.Activities.TD.WorkflowActivityResume(System.Guid)">
            <summary>
            Gets trace definition like: WorkflowInstance Id: '{0}' E2E Activity
            Event description ID=1104, Level=informational, Channel=debug
            </summary>
            <param name="Id">Parameter 0 for event: WorkflowInstance Id: '{0}' E2E Activity</param>
        </member>
        <member name="M:System.Activities.TD.WorkflowActivityStartIsEnabled">
            <summary>
            Check if trace definition is enabled
            Event description ID=1101, Level=informational, Channel=debug
            </summary>
        </member>
        <member name="M:System.Activities.TD.WorkflowActivityStart(System.Guid)">
            <summary>
            Gets trace definition like: WorkflowInstance Id: '{0}' E2E Activity
            Event description ID=1101, Level=informational, Channel=debug
            </summary>
            <param name="Id">Parameter 0 for event: WorkflowInstance Id: '{0}' E2E Activity</param>
        </member>
        <member name="M:System.Activities.TD.WorkflowActivityStopIsEnabled">
            <summary>
            Check if trace definition is enabled
            Event description ID=1102, Level=informational, Channel=debug
            </summary>
        </member>
        <member name="M:System.Activities.TD.WorkflowActivityStop(System.Guid)">
            <summary>
            Gets trace definition like: WorkflowInstance Id: '{0}' E2E Activity
            Event description ID=1102, Level=informational, Channel=debug
            </summary>
            <param name="Id">Parameter 0 for event: WorkflowInstance Id: '{0}' E2E Activity</param>
        </member>
        <member name="M:System.Activities.TD.WorkflowActivitySuspendIsEnabled">
            <summary>
            Check if trace definition is enabled
            Event description ID=1103, Level=informational, Channel=debug
            </summary>
        </member>
        <member name="M:System.Activities.TD.WorkflowActivitySuspend(System.Guid)">
            <summary>
            Gets trace definition like: WorkflowInstance Id: '{0}' E2E Activity
            Event description ID=1103, Level=informational, Channel=debug
            </summary>
            <param name="Id">Parameter 0 for event: WorkflowInstance Id: '{0}' E2E Activity</param>
        </member>
        <member name="M:System.Activities.TD.ActivityCompletedIsEnabled">
            <summary>
            Check if trace definition is enabled
            Event description ID=1010, Level=informational, Channel=debug
            </summary>
        </member>
        <member name="M:System.Activities.TD.ActivityCompleted(System.String,System.String,System.String,System.String)">
            <summary>
            Gets trace definition like: Activity '{0}', DisplayName: '{1}', InstanceId: '{2}' has completed in the '{3}' state.
            Event description ID=1010, Level=informational, Channel=debug
            </summary>
            <param name="param0">Parameter 0 for event: Activity '{0}', DisplayName: '{1}', InstanceId: '{2}' has completed in the '{3}' state.</param>
            <param name="param1">Parameter 1 for event: Activity '{0}', DisplayName: '{1}', InstanceId: '{2}' has completed in the '{3}' state.</param>
            <param name="param2">Parameter 2 for event: Activity '{0}', DisplayName: '{1}', InstanceId: '{2}' has completed in the '{3}' state.</param>
            <param name="param3">Parameter 3 for event: Activity '{0}', DisplayName: '{1}', InstanceId: '{2}' has completed in the '{3}' state.</param>
        </member>
        <member name="M:System.Activities.TD.ActivityScheduledIsEnabled">
            <summary>
            Check if trace definition is enabled
            Event description ID=1009, Level=informational, Channel=debug
            </summary>
        </member>
        <member name="M:System.Activities.TD.ActivityScheduled(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Gets trace definition like: Parent Activity '{0}', DisplayName: '{1}', InstanceId: '{2}' scheduled child Activity '{3}', DisplayName: '{4}', InstanceId: '{5}'.
            Event description ID=1009, Level=informational, Channel=debug
            </summary>
            <param name="param0">Parameter 0 for event: Parent Activity '{0}', DisplayName: '{1}', InstanceId: '{2}' scheduled child Activity '{3}', DisplayName: '{4}', InstanceId: '{5}'.</param>
            <param name="param1">Parameter 1 for event: Parent Activity '{0}', DisplayName: '{1}', InstanceId: '{2}' scheduled child Activity '{3}', DisplayName: '{4}', InstanceId: '{5}'.</param>
            <param name="param2">Parameter 2 for event: Parent Activity '{0}', DisplayName: '{1}', InstanceId: '{2}' scheduled child Activity '{3}', DisplayName: '{4}', InstanceId: '{5}'.</param>
            <param name="param3">Parameter 3 for event: Parent Activity '{0}', DisplayName: '{1}', InstanceId: '{2}' scheduled child Activity '{3}', DisplayName: '{4}', InstanceId: '{5}'.</param>
            <param name="param4">Parameter 4 for event: Parent Activity '{0}', DisplayName: '{1}', InstanceId: '{2}' scheduled child Activity '{3}', DisplayName: '{4}', InstanceId: '{5}'.</param>
            <param name="param5">Parameter 5 for event: Parent Activity '{0}', DisplayName: '{1}', InstanceId: '{2}' scheduled child Activity '{3}', DisplayName: '{4}', InstanceId: '{5}'.</param>
        </member>
        <member name="M:System.Activities.TD.WorkflowInstanceAbortedIsEnabled">
            <summary>
            Check if trace definition is enabled
            Event description ID=1004, Level=informational, Channel=debug
            </summary>
        </member>
        <member name="M:System.Activities.TD.WorkflowInstanceAborted(System.String,System.Exception)">
            <summary>
            Gets trace definition like: WorkflowInstance Id: '{0}' was aborted with an exception.
            Event description ID=1004, Level=informational, Channel=debug
            </summary>
            <param name="param0">Parameter 0 for event: WorkflowInstance Id: '{0}' was aborted with an exception.</param>
            <param name="exception">Exception associated with the event</param>
        </member>
        <member name="M:System.Activities.TD.WorkflowInstanceCanceledIsEnabled">
            <summary>
            Check if trace definition is enabled
            Event description ID=1003, Level=informational, Channel=debug
            </summary>
        </member>
        <member name="M:System.Activities.TD.WorkflowInstanceCanceled(System.String)">
            <summary>
            Gets trace definition like: WorkflowInstance Id: '{0}' has completed in the Canceled state.
            Event description ID=1003, Level=informational, Channel=debug
            </summary>
            <param name="param0">Parameter 0 for event: WorkflowInstance Id: '{0}' has completed in the Canceled state.</param>
        </member>
        <member name="M:System.Activities.TD.WorkflowApplicationCompletedIsEnabled">
            <summary>
            Check if trace definition is enabled
            Event description ID=1001, Level=informational, Channel=debug
            </summary>
        </member>
        <member name="M:System.Activities.TD.WorkflowApplicationCompleted(System.String)">
            <summary>
            Gets trace definition like: WorkflowInstance Id: '{0}' has completed in the Closed state.
            Event description ID=1001, Level=informational, Channel=debug
            </summary>
            <param name="param0">Parameter 0 for event: WorkflowInstance Id: '{0}' has completed in the Closed state.</param>
        </member>
        <member name="M:System.Activities.TD.WorkflowApplicationIdledIsEnabled">
            <summary>
            Check if trace definition is enabled
            Event description ID=1005, Level=informational, Channel=debug
            </summary>
        </member>
        <member name="M:System.Activities.TD.WorkflowApplicationIdled(System.String)">
            <summary>
            Gets trace definition like: WorkflowApplication Id: '{0}' went idle.
            Event description ID=1005, Level=informational, Channel=debug
            </summary>
            <param name="param0">Parameter 0 for event: WorkflowApplication Id: '{0}' went idle.</param>
        </member>
        <member name="M:System.Activities.TD.WorkflowApplicationPersistableIdleIsEnabled">
            <summary>
            Check if trace definition is enabled
            Event description ID=1041, Level=informational, Channel=debug
            </summary>
        </member>
        <member name="M:System.Activities.TD.WorkflowApplicationPersistableIdle(System.String,System.String)">
            <summary>
            Gets trace definition like: WorkflowApplication Id: '{0}' is idle and persistable.  The following action will be taken: {1}.
            Event description ID=1041, Level=informational, Channel=debug
            </summary>
            <param name="param0">Parameter 0 for event: WorkflowApplication Id: '{0}' is idle and persistable.  The following action will be taken: {1}.</param>
            <param name="param1">Parameter 1 for event: WorkflowApplication Id: '{0}' is idle and persistable.  The following action will be taken: {1}.</param>
        </member>
        <member name="M:System.Activities.TD.WorkflowApplicationPersistedIsEnabled">
            <summary>
            Check if trace definition is enabled
            Event description ID=1007, Level=informational, Channel=debug
            </summary>
        </member>
        <member name="M:System.Activities.TD.WorkflowApplicationPersisted(System.String)">
            <summary>
            Gets trace definition like: WorkflowApplication Id: '{0}' was Persisted.
            Event description ID=1007, Level=informational, Channel=debug
            </summary>
            <param name="param0">Parameter 0 for event: WorkflowApplication Id: '{0}' was Persisted.</param>
        </member>
        <member name="M:System.Activities.TD.WorkflowApplicationTerminatedIsEnabled">
            <summary>
            Check if trace definition is enabled
            Event description ID=1002, Level=informational, Channel=debug
            </summary>
        </member>
        <member name="M:System.Activities.TD.WorkflowApplicationTerminated(System.String,System.Exception)">
            <summary>
            Gets trace definition like: WorkflowApplication Id: '{0}' was terminated. It has completed in the Faulted state with an exception.
            Event description ID=1002, Level=informational, Channel=debug
            </summary>
            <param name="param0">Parameter 0 for event: WorkflowApplication Id: '{0}' was terminated. It has completed in the Faulted state with an exception.</param>
            <param name="exception">Exception associated with the event</param>
        </member>
        <member name="M:System.Activities.TD.WorkflowApplicationUnhandledExceptionIsEnabled">
            <summary>
            Check if trace definition is enabled
            Event description ID=1006, Level=error, Channel=debug
            </summary>
        </member>
        <member name="M:System.Activities.TD.WorkflowApplicationUnhandledException(System.String,System.String,System.String,System.String,System.Exception)">
            <summary>
            Gets trace definition like: WorkflowInstance Id: '{0}' has encountered an unhandled exception.  The exception originated from Activity '{1}', DisplayName: '{2}'.  The following action will be taken: {3}.
            Event description ID=1006, Level=error, Channel=debug
            </summary>
            <param name="param0">Parameter 0 for event: WorkflowInstance Id: '{0}' has encountered an unhandled exception.  The exception originated from Activity '{1}', DisplayName: '{2}'.  The following action will be taken: {3}.</param>
            <param name="param1">Parameter 1 for event: WorkflowInstance Id: '{0}' has encountered an unhandled exception.  The exception originated from Activity '{1}', DisplayName: '{2}'.  The following action will be taken: {3}.</param>
            <param name="param2">Parameter 2 for event: WorkflowInstance Id: '{0}' has encountered an unhandled exception.  The exception originated from Activity '{1}', DisplayName: '{2}'.  The following action will be taken: {3}.</param>
            <param name="param3">Parameter 3 for event: WorkflowInstance Id: '{0}' has encountered an unhandled exception.  The exception originated from Activity '{1}', DisplayName: '{2}'.  The following action will be taken: {3}.</param>
            <param name="exception">Exception associated with the event</param>
        </member>
        <member name="M:System.Activities.TD.WorkflowApplicationUnloadedIsEnabled">
            <summary>
            Check if trace definition is enabled
            Event description ID=1008, Level=informational, Channel=debug
            </summary>
        </member>
        <member name="M:System.Activities.TD.WorkflowApplicationUnloaded(System.String)">
            <summary>
            Gets trace definition like: WorkflowInstance Id: '{0}' was Unloaded.
            Event description ID=1008, Level=informational, Channel=debug
            </summary>
            <param name="param0">Parameter 0 for event: WorkflowInstance Id: '{0}' was Unloaded.</param>
        </member>
        <member name="M:System.Activities.TD.InvokeMethodIsStaticIsEnabled">
            <summary>
            Check if trace definition is enabled
            Event description ID=1124, Level=Informational, Channel=debug
            </summary>
        </member>
        <member name="M:System.Activities.TD.InvokeMethodIsStatic(System.String)">
            <summary>
            Gets trace definition like: InvokeMethod '{0}' - method is Static.
            Event description ID=1124, Level=Informational, Channel=debug
            </summary>
            <param name="param0">Parameter 0 for event: InvokeMethod '{0}' - method is Static.</param>
        </member>
        <member name="M:System.Activities.TD.InvokeMethodIsNotStaticIsEnabled">
            <summary>
            Check if trace definition is enabled
            Event description ID=1125, Level=Informational, Channel=debug
            </summary>
        </member>
        <member name="M:System.Activities.TD.InvokeMethodIsNotStatic(System.String)">
            <summary>
            Gets trace definition like: InvokeMethod '{0}' - method is not Static.
            Event description ID=1125, Level=Informational, Channel=debug
            </summary>
            <param name="param0">Parameter 0 for event: InvokeMethod '{0}' - method is not Static.</param>
        </member>
        <member name="M:System.Activities.TD.InvokedMethodThrewExceptionIsEnabled">
            <summary>
            Check if trace definition is enabled
            Event description ID=1126, Level=Informational, Channel=debug
            </summary>
        </member>
        <member name="M:System.Activities.TD.InvokedMethodThrewException(System.String,System.String)">
            <summary>
            Gets trace definition like: An exception was thrown in the method called by the activity '{0}'. {1}
            Event description ID=1126, Level=Informational, Channel=debug
            </summary>
            <param name="param0">Parameter 0 for event: An exception was thrown in the method called by the activity '{0}'. {1}</param>
            <param name="param1">Parameter 1 for event: An exception was thrown in the method called by the activity '{0}'. {1}</param>
        </member>
        <member name="M:System.Activities.TD.InvokeMethodUseAsyncPatternIsEnabled">
            <summary>
            Check if trace definition is enabled
            Event description ID=1131, Level=Informational, Channel=debug
            </summary>
        </member>
        <member name="M:System.Activities.TD.InvokeMethodUseAsyncPattern(System.String,System.String,System.String)">
            <summary>
            Gets trace definition like: InvokeMethod '{0}' - method uses asynchronous pattern of '{1}' and '{2}'.
            Event description ID=1131, Level=Informational, Channel=debug
            </summary>
            <param name="param0">Parameter 0 for event: InvokeMethod '{0}' - method uses asynchronous pattern of '{1}' and '{2}'.</param>
            <param name="param1">Parameter 1 for event: InvokeMethod '{0}' - method uses asynchronous pattern of '{1}' and '{2}'.</param>
            <param name="param2">Parameter 2 for event: InvokeMethod '{0}' - method uses asynchronous pattern of '{1}' and '{2}'.</param>
        </member>
        <member name="M:System.Activities.TD.InvokeMethodDoesNotUseAsyncPatternIsEnabled">
            <summary>
            Check if trace definition is enabled
            Event description ID=1132, Level=Informational, Channel=debug
            </summary>
        </member>
        <member name="M:System.Activities.TD.InvokeMethodDoesNotUseAsyncPattern(System.String)">
            <summary>
            Gets trace definition like: InvokeMethod '{0}' - method does not use asynchronous pattern.
            Event description ID=1132, Level=Informational, Channel=debug
            </summary>
            <param name="param0">Parameter 0 for event: InvokeMethod '{0}' - method does not use asynchronous pattern.</param>
        </member>
        <member name="M:System.Activities.TD.FlowchartStartIsEnabled">
            <summary>
            Check if trace definition is enabled
            Event description ID=1140, Level=Informational, Channel=debug
            </summary>
        </member>
        <member name="M:System.Activities.TD.FlowchartStart(System.String)">
            <summary>
            Gets trace definition like: Flowchart '{0}' - Start has been scheduled.
            Event description ID=1140, Level=Informational, Channel=debug
            </summary>
            <param name="param0">Parameter 0 for event: Flowchart '{0}' - Start has been scheduled.</param>
        </member>
        <member name="M:System.Activities.TD.FlowchartEmptyIsEnabled">
            <summary>
            Check if trace definition is enabled
            Event description ID=1141, Level=Warning, Channel=debug
            </summary>
        </member>
        <member name="M:System.Activities.TD.FlowchartEmpty(System.String)">
            <summary>
            Gets trace definition like: Flowchart '{0}' - was executed with no Nodes.
            Event description ID=1141, Level=Warning, Channel=debug
            </summary>
            <param name="param0">Parameter 0 for event: Flowchart '{0}' - was executed with no Nodes.</param>
        </member>
        <member name="M:System.Activities.TD.FlowchartNextNullIsEnabled">
            <summary>
            Check if trace definition is enabled
            Event description ID=1143, Level=Informational, Channel=debug
            </summary>
        </member>
        <member name="M:System.Activities.TD.FlowchartNextNull(System.String)">
            <summary>
            Gets trace definition like: Flowchart '{0}'/FlowStep - Next node is null. Flowchart execution will end.
            Event description ID=1143, Level=Informational, Channel=debug
            </summary>
            <param name="param0">Parameter 0 for event: Flowchart '{0}'/FlowStep - Next node is null. Flowchart execution will end.</param>
        </member>
        <member name="M:System.Activities.TD.FlowchartSwitchCaseIsEnabled">
            <summary>
            Check if trace definition is enabled
            Event description ID=1146, Level=Informational, Channel=debug
            </summary>
        </member>
        <member name="M:System.Activities.TD.FlowchartSwitchCase(System.String,System.String)">
            <summary>
            Gets trace definition like: Flowchart '{0}'/FlowSwitch - Case '{1}' was selected.
            Event description ID=1146, Level=Informational, Channel=debug
            </summary>
            <param name="param0">Parameter 0 for event: Flowchart '{0}'/FlowSwitch - Case '{1}' was selected.</param>
            <param name="param1">Parameter 1 for event: Flowchart '{0}'/FlowSwitch - Case '{1}' was selected.</param>
        </member>
        <member name="M:System.Activities.TD.FlowchartSwitchDefaultIsEnabled">
            <summary>
            Check if trace definition is enabled
            Event description ID=1147, Level=Informational, Channel=debug
            </summary>
        </member>
        <member name="M:System.Activities.TD.FlowchartSwitchDefault(System.String)">
            <summary>
            Gets trace definition like: Flowchart '{0}'/FlowSwitch - Default Case was selected.
            Event description ID=1147, Level=Informational, Channel=debug
            </summary>
            <param name="param0">Parameter 0 for event: Flowchart '{0}'/FlowSwitch - Default Case was selected.</param>
        </member>
        <member name="M:System.Activities.TD.FlowchartSwitchCaseNotFoundIsEnabled">
            <summary>
            Check if trace definition is enabled
            Event description ID=1148, Level=Informational, Channel=debug
            </summary>
        </member>
        <member name="M:System.Activities.TD.FlowchartSwitchCaseNotFound(System.String)">
            <summary>
            Gets trace definition like: Flowchart '{0}'/FlowSwitch - could find neither a Case activity nor a Default Case matching the Expression result. Flowchart execution will end.
            Event description ID=1148, Level=Informational, Channel=debug
            </summary>
            <param name="param0">Parameter 0 for event: Flowchart '{0}'/FlowSwitch - could find neither a Case activity nor a Default Case matching the Expression result. Flowchart execution will end.</param>
        </member>
        <member name="M:System.Activities.TD.CompensationStateIsEnabled">
            <summary>
            Check if trace definition is enabled
            Event description ID=1150, Level=informational, Channel=debug
            </summary>
        </member>
        <member name="M:System.Activities.TD.CompensationState(System.String,System.String)">
            <summary>
            Gets trace definition like: CompensableActivity '{0}' is in the '{1}' state.
            Event description ID=1150, Level=informational, Channel=debug
            </summary>
            <param name="param0">Parameter 0 for event: CompensableActivity '{0}' is in the '{1}' state.</param>
            <param name="param1">Parameter 1 for event: CompensableActivity '{0}' is in the '{1}' state.</param>
        </member>
        <member name="M:System.Activities.TD.TrackingValueNotSerializableIsEnabled">
            <summary>
            Check if trace definition is enabled
            Event description ID=39460, Level=Warning, Channel=debug
            </summary>
        </member>
        <member name="M:System.Activities.TD.TrackingValueNotSerializable(System.String)">
            <summary>
            Gets trace definition like: The extracted argument/variable '{0}' is not serializable.
            Event description ID=39460, Level=Warning, Channel=debug
            </summary>
            <param name="name">Parameter 0 for event: The extracted argument/variable '{0}' is not serializable.</param>
        </member>
        <member name="M:System.Activities.TD.ExecuteWorkItemStartIsEnabled">
            <summary>
            Check if trace definition is enabled
            Event description ID=2021, Level=Verbose, Channel=debug
            </summary>
        </member>
        <member name="M:System.Activities.TD.ExecuteWorkItemStart">
            <summary>
            Gets trace definition like: Execute work item start
            Event description ID=2021, Level=Verbose, Channel=debug
            </summary>
        </member>
        <member name="M:System.Activities.TD.ExecuteWorkItemStopIsEnabled">
            <summary>
            Check if trace definition is enabled
            Event description ID=2022, Level=Verbose, Channel=debug
            </summary>
        </member>
        <member name="M:System.Activities.TD.ExecuteWorkItemStop">
            <summary>
            Gets trace definition like: Execute work item stop
            Event description ID=2022, Level=Verbose, Channel=debug
            </summary>
        </member>
        <member name="M:System.Activities.TD.InternalCacheMetadataStartIsEnabled">
            <summary>
            Check if trace definition is enabled
            Event description ID=2024, Level=Verbose, Channel=debug
            </summary>
        </member>
        <member name="M:System.Activities.TD.InternalCacheMetadataStart(System.String)">
            <summary>
            Gets trace definition like: InternalCacheMetadata started on activity '{0}'.
            Event description ID=2024, Level=Verbose, Channel=debug
            </summary>
            <param name="id">Parameter 0 for event: InternalCacheMetadata started on activity '{0}'.</param>
        </member>
        <member name="M:System.Activities.TD.InternalCacheMetadataStopIsEnabled">
            <summary>
            Check if trace definition is enabled
            Event description ID=2025, Level=Verbose, Channel=debug
            </summary>
        </member>
        <member name="M:System.Activities.TD.InternalCacheMetadataStop(System.String)">
            <summary>
            Gets trace definition like: InternalCacheMetadata stopped on activity '{0}'.
            Event description ID=2025, Level=Verbose, Channel=debug
            </summary>
            <param name="id">Parameter 0 for event: InternalCacheMetadata stopped on activity '{0}'.</param>
        </member>
        <member name="M:System.Activities.TD.CompileVbExpressionStartIsEnabled">
            <summary>
            Check if trace definition is enabled
            Event description ID=2026, Level=Verbose, Channel=debug
            </summary>
        </member>
        <member name="M:System.Activities.TD.CompileVbExpressionStart(System.String)">
            <summary>
            Gets trace definition like: Compiling VB expression '{0}'
            Event description ID=2026, Level=Verbose, Channel=debug
            </summary>
            <param name="expr">Parameter 0 for event: Compiling VB expression '{0}'</param>
        </member>
        <member name="M:System.Activities.TD.CompileVbExpressionStopIsEnabled">
            <summary>
            Check if trace definition is enabled
            Event description ID=2029, Level=Verbose, Channel=debug
            </summary>
        </member>
        <member name="M:System.Activities.TD.CompileVbExpressionStop">
            <summary>
            Gets trace definition like: Finished compiling VB expression.
            Event description ID=2029, Level=Verbose, Channel=debug
            </summary>
        </member>
        <member name="M:System.Activities.TD.CacheRootMetadataStartIsEnabled">
            <summary>
            Check if trace definition is enabled
            Event description ID=2027, Level=Verbose, Channel=debug
            </summary>
        </member>
        <member name="M:System.Activities.TD.CacheRootMetadataStart(System.String)">
            <summary>
            Gets trace definition like: CacheRootMetadata started on activity '{0}'
            Event description ID=2027, Level=Verbose, Channel=debug
            </summary>
            <param name="activityName">Parameter 0 for event: CacheRootMetadata started on activity '{0}'</param>
        </member>
        <member name="M:System.Activities.TD.CacheRootMetadataStopIsEnabled">
            <summary>
            Check if trace definition is enabled
            Event description ID=2028, Level=Verbose, Channel=debug
            </summary>
        </member>
        <member name="M:System.Activities.TD.CacheRootMetadataStop(System.String)">
            <summary>
            Gets trace definition like: CacheRootMetadata stopped on activity {0}.
            Event description ID=2028, Level=Verbose, Channel=debug
            </summary>
            <param name="activityName">Parameter 0 for event: CacheRootMetadata stopped on activity {0}.</param>
        </member>
        <member name="T:System.Activities.WorkflowApplication">
            <summary>
            The WorkflowApplication class. This class cannot be inherited. Implements the <see
            cref="T:System.Activities.Hosting.WorkflowInstance" />
            </summary>
            <seealso cref="T:System.Activities.Hosting.WorkflowInstance" />
            <remarks>
            WorkflowApplication is free-threaded. It is responsible for the correct locking and usage of
            the ActivityExecutor. Given that there are two simultaneous users of ActivityExecutor
            (WorkflowApplication and NativeActivityContext), it is imperative that WorkflowApplication
            only calls into ActivityExecutor when there are no activities executing (and thus no worries
            about colliding with AEC calls). SYNCHRONIZATION SCHEME WorkflowInstance is defined to not
            be thread safe and to disallow all operations while it is (potentially
            asynchronously) running. The WorkflowInstance is in the "running" state between a call to Run
            and the subsequent call to either WorkflowInstance NotifyPaused or NotifyUnhandledException.
            WorkflowApplication keeps track of a boolean "isBusy" and a list of pending operations. WI
            is busy whenever it is servicing an operation or the runtime is in the "running" state.
            Enqueue - This enqueues an operation into the pending operation list. If WI is not busy then
            the operation can be serviced immediately. This is the only place where "isBusy" flips to
            true. OnNotifiedUnhandledException - This method performs some processing and then calls
            OnNotifiedPaused. OnNotifiedPaused - This method is only ever called when "isBusy" is true.
            It first checks to see if there is other work to be done (prioritization: raise completed,
            handle an operation, resume execution, raise idle, stop). This is the only place where
            "isBusy" flips to false and this only occurs when there is no other work to be done.
            [Force]NotifyOperationComplete - These methods are called by individual operations when they
            are done processing. If the operation was notified (IE - actually performed in the eyes of
            WI) then this is simply a call to OnNotifiedPaused. Operation notification - The
            InstanceOperation class keeps tracks of whether a specified operation was dispatched by WI
            or not. If it was dispatched (determined either in Enqueue, FindOperation, or Remove) then
            it MUST result in a call to OnNotifiedPaused when complete.
            </remarks>
        </member>
        <member name="T:System.Activities.WorkflowApplication.CompletedEventHandler">
            <summary>
            The CompletedEventHandler class.
            </summary>
        </member>
        <member name="F:System.Activities.WorkflowApplication.CompletedEventHandler.stage1Callback">
            <summary>
            The stage1 callback
            </summary>
        </member>
        <member name="F:System.Activities.WorkflowApplication.CompletedEventHandler.stage2Callback">
            <summary>
            The stage2 callback
            </summary>
        </member>
        <member name="M:System.Activities.WorkflowApplication.CompletedEventHandler.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Activities.WorkflowApplication.CompletedEventHandler"/> class.
            </summary>
        </member>
        <member name="P:System.Activities.WorkflowApplication.CompletedEventHandler.Stage1Callback">
            <summary>
            Gets the stage1 callback.
            </summary>
            <value>The stage1 callback.</value>
        </member>
        <member name="P:System.Activities.WorkflowApplication.CompletedEventHandler.Stage2Callback">
            <summary>
            Gets the stage2 callback.
            </summary>
            <value>The stage2 callback.</value>
        </member>
        <member name="M:System.Activities.WorkflowApplication.CompletedEventHandler.Run(System.Activities.WorkflowApplication)">
            <summary>
            Runs the specified instance.
            </summary>
            <param name="instance">The instance.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:System.Activities.WorkflowApplication.CompletedEventHandler.OnStage1Complete(System.IAsyncResult,System.Activities.WorkflowApplication,System.Boolean)">
            <summary>
            Called when [stage1 complete].
            </summary>
            <param name="lastResult">The last result.</param>
            <param name="instance">The instance.</param>
            <param name="isStillSync">if set to <c>true</c> [is still synchronize].</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:System.Activities.WorkflowApplication.CompletedEventHandler.OnStage2Complete(System.IAsyncResult,System.Activities.WorkflowApplication,System.Boolean)">
            <summary>
            Called when [stage2 complete].
            </summary>
            <param name="lastResult">The last result.</param>
            <param name="instance">The instance.</param>
            <param name="isStillSync">if set to <c>true</c> [is still synchronize].</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="F:System.Activities.WorkflowApplication.unknownIdentity">
            <summary>
            The unknown identity
            </summary>
        </member>
        <member name="F:System.Activities.WorkflowApplication.completedHandler">
            <summary>
            The completed handler
            </summary>
        </member>
        <member name="F:System.Activities.WorkflowApplication.eventFrameCallback">
            <summary>
            The event frame callback
            </summary>
        </member>
        <member name="F:System.Activities.WorkflowApplication.idleHandler">
            <summary>
            The idle handler
            </summary>
        </member>
        <member name="F:System.Activities.WorkflowApplication.unhandledExceptionHandler">
            <summary>
            The unhandled exception handler
            </summary>
        </member>
        <member name="F:System.Activities.WorkflowApplication.waitAsyncCompleteCallback">
            <summary>
            The wait asynchronous complete callback
            </summary>
        </member>
        <member name="F:System.Activities.WorkflowApplication.initialWorkflowArguments">
            <summary>
            The initial workflow arguments
            </summary>
            <remarks>Initial creation data</remarks>
        </member>
        <member name="F:System.Activities.WorkflowApplication.pendingOperations">
            <summary>
            The pending operations
            </summary>
        </member>
        <member name="F:System.Activities.WorkflowApplication.rootExecutionProperties">
            <summary>
            The root execution properties
            </summary>
        </member>
        <member name="F:System.Activities.WorkflowApplication.actionCount">
            <summary>
            The action count
            </summary>
        </member>
        <member name="F:System.Activities.WorkflowApplication.eventData">
            <summary>
            The event data
            </summary>
        </member>
        <member name="F:System.Activities.WorkflowApplication.extensions">
            <summary>
            The extensions
            </summary>
        </member>
        <member name="F:System.Activities.WorkflowApplication.handlerThreadId">
            <summary>
            The handler thread identifier
            </summary>
        </member>
        <member name="F:System.Activities.WorkflowApplication.hasCalledAbort">
            <summary>
            Tracking for one-time actions per in-memory pulse
            </summary>
        </member>
        <member name="F:System.Activities.WorkflowApplication.hasCalledRun">
            <summary>
            The has called run
            </summary>
        </member>
        <member name="F:System.Activities.WorkflowApplication.hasExecutionOccurredSinceLastIdle">
            <summary>
            The has execution occurred since last idle
            </summary>
        </member>
        <member name="F:System.Activities.WorkflowApplication.hasRaisedCompleted">
            <summary>
            Tracking for one-time actions per instance lifetime (these end up being persisted)
            </summary>
        </member>
        <member name="F:System.Activities.WorkflowApplication.instanceId">
            <summary>
            The instance identifier
            </summary>
        </member>
        <member name="F:System.Activities.WorkflowApplication.instanceIdSet">
            <summary>
            The instance identifier set
            </summary>
        </member>
        <member name="F:System.Activities.WorkflowApplication.instanceMetadata">
            <summary>
            The instance metadata
            </summary>
        </member>
        <member name="F:System.Activities.WorkflowApplication.instanceStore">
            <summary>
            The instance store
            </summary>
        </member>
        <member name="F:System.Activities.WorkflowApplication.invokeCompletedCallback">
            <summary>
            The invoke completed callback
            </summary>
        </member>
        <member name="F:System.Activities.WorkflowApplication.isBusy">
            <summary>
            Checking for Guid.Empty is expensive.
            </summary>
        </member>
        <member name="F:System.Activities.WorkflowApplication.isInHandler">
            <summary>
            The is in handler
            </summary>
        </member>
        <member name="F:System.Activities.WorkflowApplication.onAborted">
            <summary>
            The on aborted
            </summary>
        </member>
        <member name="F:System.Activities.WorkflowApplication.onCompleted">
            <summary>
            The on completed
            </summary>
        </member>
        <member name="F:System.Activities.WorkflowApplication.onIdle">
            <summary>
            The on idle
            </summary>
        </member>
        <member name="F:System.Activities.WorkflowApplication.onPersistableIdle">
            <summary>
            The on persistable idle
            </summary>
        </member>
        <member name="F:System.Activities.WorkflowApplication.onUnhandledException">
            <summary>
            The on unhandled exception
            </summary>
        </member>
        <member name="F:System.Activities.WorkflowApplication.onUnloaded">
            <summary>
            The on unloaded
            </summary>
        </member>
        <member name="F:System.Activities.WorkflowApplication.pendingUnenqueued">
            <summary>
            Count of operations that are about to be enqueued. We use this when enqueueing multiple
            operations, to avoid raising idle on dequeue of the first operation.
            </summary>
        </member>
        <member name="F:System.Activities.WorkflowApplication.persistenceManager">
            <summary>
            The persistence manager
            </summary>
        </member>
        <member name="F:System.Activities.WorkflowApplication.persistencePipelineInUse">
            <summary>
            The persistence pipeline in use
            </summary>
        </member>
        <member name="F:System.Activities.WorkflowApplication.state">
            <summary>
            The state
            </summary>
        </member>
        <member name="M:System.Activities.WorkflowApplication.#ctor(System.Activities.Activity)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Activities.WorkflowApplication" /> class.
            </summary>
            <param name="workflowDefinition">The workflow definition.</param>
        </member>
        <member name="M:System.Activities.WorkflowApplication.#ctor(System.Activities.Activity,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:System.Activities.WorkflowApplication" /> class.
            </summary>
            <param name="workflowDefinition">The workflow definition.</param>
            <param name="inputs">The inputs.</param>
        </member>
        <member name="M:System.Activities.WorkflowApplication.#ctor(System.Activities.Activity,System.Activities.WorkflowIdentity)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Activities.WorkflowApplication" /> class.
            </summary>
            <param name="workflowDefinition">The workflow definition.</param>
            <param name="definitionIdentity">The definition identity.</param>
        </member>
        <member name="M:System.Activities.WorkflowApplication.#ctor(System.Activities.Activity,System.Collections.Generic.IDictionary{System.String,System.Object},System.Activities.WorkflowIdentity)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Activities.WorkflowApplication" /> class.
            </summary>
            <param name="workflowDefinition">The workflow definition.</param>
            <param name="inputs">The inputs.</param>
            <param name="definitionIdentity">The definition identity.</param>
        </member>
        <member name="M:System.Activities.WorkflowApplication.#ctor(System.Activities.Activity,System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IList{System.Activities.Handle})">
            <summary>
            Initializes a new instance of the <see cref="T:System.Activities.WorkflowApplication" /> class.
            </summary>
            <param name="workflowDefinition">The workflow definition.</param>
            <param name="inputs">The inputs.</param>
            <param name="executionProperties">The execution properties.</param>
        </member>
        <member name="P:System.Activities.WorkflowApplication.Aborted">
            <summary>
            Gets or sets the aborted.
            </summary>
            <value>The aborted.</value>
        </member>
        <member name="P:System.Activities.WorkflowApplication.Completed">
            <summary>
            Gets or sets the completed.
            </summary>
            <value>The completed.</value>
        </member>
        <member name="P:System.Activities.WorkflowApplication.Extensions">
            <summary>
            Gets the extensions.
            </summary>
            <value>The extensions.</value>
        </member>
        <member name="P:System.Activities.WorkflowApplication.Id">
            <summary>
            Gets the identifier.
            </summary>
            <value>The identifier.</value>
        </member>
        <member name="P:System.Activities.WorkflowApplication.Idle">
            <summary>
            Gets or sets the idle.
            </summary>
            <value>The idle.</value>
        </member>
        <member name="P:System.Activities.WorkflowApplication.InstanceStore">
            <summary>
            Gets or sets the instance store.
            </summary>
            <value>The instance store.</value>
        </member>
        <member name="P:System.Activities.WorkflowApplication.OnUnhandledException">
            <summary>
            Gets or sets the on unhandled exception.
            </summary>
            <value>The on unhandled exception.</value>
        </member>
        <member name="P:System.Activities.WorkflowApplication.PersistableIdle">
            <summary>
            Gets or sets the persistable idle.
            </summary>
            <value>The persistable idle.</value>
        </member>
        <member name="P:System.Activities.WorkflowApplication.Unloaded">
            <summary>
            Gets or sets the unloaded.
            </summary>
            <value>The unloaded.</value>
        </member>
        <member name="P:System.Activities.WorkflowApplication.SupportsInstanceKeys">
            <summary>
            Gets a value indicating whether [supports instance keys].
            </summary>
            <value><c>true</c> if [supports instance keys]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:System.Activities.WorkflowApplication.EventFrameCallback">
            <summary>
            Gets the event frame callback.
            </summary>
            <value>The event frame callback.</value>
        </member>
        <member name="P:System.Activities.WorkflowApplication.EventData">
            <summary>
            Gets the event data.
            </summary>
            <value>The event data.</value>
        </member>
        <member name="P:System.Activities.WorkflowApplication.HasPersistenceProvider">
            <summary>
            Gets a value indicating whether this instance has persistence provider.
            </summary>
            <value><c>true</c> if this instance has persistence provider; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:System.Activities.WorkflowApplication.IsHandlerThread">
            <summary>
            Gets a value indicating whether this instance is handler thread.
            </summary>
            <value><c>true</c> if this instance is handler thread; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:System.Activities.WorkflowApplication.IsInTerminalState">
            <summary>
            Gets a value indicating whether this instance is in terminal state.
            </summary>
            <value><c>true</c> if this instance is in terminal state; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:System.Activities.WorkflowApplication.BeginCreateDefaultInstanceOwner(System.Activities.Runtime.DurableInstancing.InstanceStore,System.Activities.WorkflowIdentity,System.Activities.WorkflowIdentityFilter,System.AsyncCallback,System.Object)">
            <summary>
            Begins the create default instance owner.
            </summary>
            <param name="instanceStore">The instance store.</param>
            <param name="definitionIdentity">The definition identity.</param>
            <param name="identityFilter">The identity filter.</param>
            <param name="callback">The callback.</param>
            <param name="state">The state.</param>
            <returns>IAsyncResult.</returns>
        </member>
        <member name="M:System.Activities.WorkflowApplication.BeginCreateDefaultInstanceOwner(System.Activities.Runtime.DurableInstancing.InstanceStore,System.Activities.WorkflowIdentity,System.Activities.WorkflowIdentityFilter,System.TimeSpan,System.AsyncCallback,System.Object)">
            <summary>
            Begins the create default instance owner.
            </summary>
            <param name="instanceStore">The instance store.</param>
            <param name="definitionIdentity">The definition identity.</param>
            <param name="identityFilter">The identity filter.</param>
            <param name="timeout">The timeout.</param>
            <param name="callback">The callback.</param>
            <param name="state">The state.</param>
            <returns>IAsyncResult.</returns>
        </member>
        <member name="M:System.Activities.WorkflowApplication.BeginDeleteDefaultInstanceOwner(System.Activities.Runtime.DurableInstancing.InstanceStore,System.AsyncCallback,System.Object)">
            <summary>
            Begins the delete default instance owner.
            </summary>
            <param name="instanceStore">The instance store.</param>
            <param name="callback">The callback.</param>
            <param name="state">The state.</param>
            <returns>IAsyncResult.</returns>
        </member>
        <member name="M:System.Activities.WorkflowApplication.BeginDeleteDefaultInstanceOwner(System.Activities.Runtime.DurableInstancing.InstanceStore,System.TimeSpan,System.AsyncCallback,System.Object)">
            <summary>
            Begins the delete default instance owner.
            </summary>
            <param name="instanceStore">The instance store.</param>
            <param name="timeout">The timeout.</param>
            <param name="callback">The callback.</param>
            <param name="state">The state.</param>
            <returns>IAsyncResult.</returns>
        </member>
        <member name="M:System.Activities.WorkflowApplication.BeginGetInstance(System.Guid,System.Activities.Runtime.DurableInstancing.InstanceStore,System.AsyncCallback,System.Object)">
            <summary>
            Begins the get instance.
            </summary>
            <param name="instanceId">The instance identifier.</param>
            <param name="instanceStore">The instance store.</param>
            <param name="callback">The callback.</param>
            <param name="state">The state.</param>
            <returns>IAsyncResult.</returns>
        </member>
        <member name="M:System.Activities.WorkflowApplication.BeginGetInstance(System.Guid,System.Activities.Runtime.DurableInstancing.InstanceStore,System.TimeSpan,System.AsyncCallback,System.Object)">
            <summary>
            Begins the get instance.
            </summary>
            <param name="instanceId">The instance identifier.</param>
            <param name="instanceStore">The instance store.</param>
            <param name="timeout">The timeout.</param>
            <param name="callback">The callback.</param>
            <param name="state">The state.</param>
            <returns>IAsyncResult.</returns>
        </member>
        <member name="M:System.Activities.WorkflowApplication.BeginGetRunnableInstance(System.Activities.Runtime.DurableInstancing.InstanceStore,System.AsyncCallback,System.Object)">
            <summary>
            Begins the get runnable instance.
            </summary>
            <param name="instanceStore">The instance store.</param>
            <param name="callback">The callback.</param>
            <param name="state">The state.</param>
            <returns>IAsyncResult.</returns>
        </member>
        <member name="M:System.Activities.WorkflowApplication.BeginGetRunnableInstance(System.Activities.Runtime.DurableInstancing.InstanceStore,System.TimeSpan,System.AsyncCallback,System.Object)">
            <summary>
            Begins the get runnable instance.
            </summary>
            <param name="instanceStore">The instance store.</param>
            <param name="timeout">The timeout.</param>
            <param name="callback">The callback.</param>
            <param name="state">The state.</param>
            <returns>IAsyncResult.</returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:System.Activities.WorkflowApplication.CreateDefaultInstanceOwner(System.Activities.Runtime.DurableInstancing.InstanceStore,System.Activities.WorkflowIdentity,System.Activities.WorkflowIdentityFilter)">
            <summary>
            Creates the default instance owner.
            </summary>
            <param name="instanceStore">The instance store.</param>
            <param name="definitionIdentity">The definition identity.</param>
            <param name="identityFilter">The identity filter.</param>
        </member>
        <member name="M:System.Activities.WorkflowApplication.CreateDefaultInstanceOwner(System.Activities.Runtime.DurableInstancing.InstanceStore,System.Activities.WorkflowIdentity,System.Activities.WorkflowIdentityFilter,System.TimeSpan)">
            <summary>
            Creates the default instance owner.
            </summary>
            <param name="instanceStore">The instance store.</param>
            <param name="definitionIdentity">The definition identity.</param>
            <param name="identityFilter">The identity filter.</param>
            <param name="timeout">The timeout.</param>
        </member>
        <member name="M:System.Activities.WorkflowApplication.DeleteDefaultInstanceOwner(System.Activities.Runtime.DurableInstancing.InstanceStore)">
            <summary>
            Deletes the default instance owner.
            </summary>
            <param name="instanceStore">The instance store.</param>
        </member>
        <member name="M:System.Activities.WorkflowApplication.DeleteDefaultInstanceOwner(System.Activities.Runtime.DurableInstancing.InstanceStore,System.TimeSpan)">
            <summary>
            Deletes the default instance owner.
            </summary>
            <param name="instanceStore">The instance store.</param>
            <param name="timeout">The timeout.</param>
        </member>
        <member name="M:System.Activities.WorkflowApplication.EndCreateDefaultInstanceOwner(System.IAsyncResult)">
            <summary>
            Ends the create default instance owner.
            </summary>
            <param name="asyncResult">The asynchronous result.</param>
        </member>
        <member name="M:System.Activities.WorkflowApplication.EndDeleteDefaultInstanceOwner(System.IAsyncResult)">
            <summary>
            Ends the delete default instance owner.
            </summary>
            <param name="asyncResult">The asynchronous result.</param>
        </member>
        <member name="M:System.Activities.WorkflowApplication.EndGetInstance(System.IAsyncResult)">
            <summary>
            Ends the get instance.
            </summary>
            <param name="asyncResult">The asynchronous result.</param>
            <returns>WorkflowApplicationInstance.</returns>
        </member>
        <member name="M:System.Activities.WorkflowApplication.EndGetRunnableInstance(System.IAsyncResult)">
            <summary>
            Ends the get runnable instance.
            </summary>
            <param name="asyncResult">The asynchronous result.</param>
            <returns>WorkflowApplicationInstance.</returns>
        </member>
        <member name="M:System.Activities.WorkflowApplication.GetInstance(System.Guid,System.Activities.Runtime.DurableInstancing.InstanceStore)">
            <summary>
            Gets the instance.
            </summary>
            <param name="instanceId">The instance identifier.</param>
            <param name="instanceStore">The instance store.</param>
            <returns>WorkflowApplicationInstance.</returns>
        </member>
        <member name="M:System.Activities.WorkflowApplication.GetInstance(System.Guid,System.Activities.Runtime.DurableInstancing.InstanceStore,System.TimeSpan)">
            <summary>
            Gets the instance.
            </summary>
            <param name="instanceId">The instance identifier.</param>
            <param name="instanceStore">The instance store.</param>
            <param name="timeout">The timeout.</param>
            <returns>WorkflowApplicationInstance.</returns>
        </member>
        <member name="M:System.Activities.WorkflowApplication.GetRunnableInstance(System.Activities.Runtime.DurableInstancing.InstanceStore)">
            <summary>
            Gets the runnable instance.
            </summary>
            <param name="instanceStore">The instance store.</param>
            <returns>WorkflowApplicationInstance.</returns>
        </member>
        <member name="M:System.Activities.WorkflowApplication.GetRunnableInstance(System.Activities.Runtime.DurableInstancing.InstanceStore,System.TimeSpan)">
            <summary>
            Gets the runnable instance.
            </summary>
            <param name="instanceStore">The instance store.</param>
            <param name="timeout">The timeout.</param>
            <returns>WorkflowApplicationInstance.</returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:System.Activities.WorkflowApplication.Abort">
            <summary>
            Aborts this instance.
            </summary>
        </member>
        <member name="M:System.Activities.WorkflowApplication.Abort(System.String)">
            <summary>
            Aborts the specified reason.
            </summary>
            <param name="reason">The reason.</param>
        </member>
        <member name="M:System.Activities.WorkflowApplication.AddInitialInstanceValues(System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Object})">
            <summary>
            Adds the initial instance values.
            </summary>
            <param name="writeOnlyValues">The write only values.</param>
        </member>
        <member name="M:System.Activities.WorkflowApplication.BeginCancel(System.AsyncCallback,System.Object)">
            <summary>
            Begins the cancel.
            </summary>
            <param name="callback">The callback.</param>
            <param name="state">The state.</param>
            <returns>IAsyncResult.</returns>
        </member>
        <member name="M:System.Activities.WorkflowApplication.BeginCancel(System.TimeSpan,System.AsyncCallback,System.Object)">
            <summary>
            Begins the cancel.
            </summary>
            <param name="timeout">The timeout.</param>
            <param name="callback">The callback.</param>
            <param name="state">The state.</param>
            <returns>IAsyncResult.</returns>
        </member>
        <member name="M:System.Activities.WorkflowApplication.BeginLoad(System.Guid,System.AsyncCallback,System.Object)">
            <summary>
            Begins the load.
            </summary>
            <param name="instanceId">The instance identifier.</param>
            <param name="callback">The callback.</param>
            <param name="state">The state.</param>
            <returns>IAsyncResult.</returns>
        </member>
        <member name="M:System.Activities.WorkflowApplication.BeginLoad(System.Guid,System.TimeSpan,System.AsyncCallback,System.Object)">
            <summary>
            Begins the load.
            </summary>
            <param name="instanceId">The instance identifier.</param>
            <param name="timeout">The timeout.</param>
            <param name="callback">The callback.</param>
            <param name="state">The state.</param>
            <returns>IAsyncResult.</returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:System.Activities.WorkflowApplication.BeginLoad(System.Activities.WorkflowApplicationInstance,System.AsyncCallback,System.Object)">
            <summary>
            Begins the load.
            </summary>
            <param name="instance">The instance.</param>
            <param name="callback">The callback.</param>
            <param name="state">The state.</param>
            <returns>IAsyncResult.</returns>
        </member>
        <member name="M:System.Activities.WorkflowApplication.BeginLoad(System.Activities.WorkflowApplicationInstance,System.TimeSpan,System.AsyncCallback,System.Object)">
            <summary>
            Begins the load.
            </summary>
            <param name="instance">The instance.</param>
            <param name="timeout">The timeout.</param>
            <param name="callback">The callback.</param>
            <param name="state">The state.</param>
            <returns>IAsyncResult.</returns>
        </member>
        <member name="M:System.Activities.WorkflowApplication.BeginLoad(System.Activities.WorkflowApplicationInstance,System.Activities.DynamicUpdate.DynamicUpdateMap,System.AsyncCallback,System.Object)">
            <summary>
            Begins the load.
            </summary>
            <param name="instance">The instance.</param>
            <param name="updateMap">The update map.</param>
            <param name="callback">The callback.</param>
            <param name="state">The state.</param>
            <returns>IAsyncResult.</returns>
        </member>
        <member name="M:System.Activities.WorkflowApplication.BeginLoad(System.Activities.WorkflowApplicationInstance,System.Activities.DynamicUpdate.DynamicUpdateMap,System.TimeSpan,System.AsyncCallback,System.Object)">
            <summary>
            Begins the load.
            </summary>
            <param name="instance">The instance.</param>
            <param name="updateMap">The update map.</param>
            <param name="timeout">The timeout.</param>
            <param name="callback">The callback.</param>
            <param name="state">The state.</param>
            <returns>IAsyncResult.</returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:System.Activities.WorkflowApplication.BeginLoadRunnableInstance(System.AsyncCallback,System.Object)">
            <summary>
            Begins the load runnable instance.
            </summary>
            <param name="callback">The callback.</param>
            <param name="state">The state.</param>
            <returns>IAsyncResult.</returns>
        </member>
        <member name="M:System.Activities.WorkflowApplication.BeginLoadRunnableInstance(System.TimeSpan,System.AsyncCallback,System.Object)">
            <summary>
            Begins the load runnable instance.
            </summary>
            <param name="timeout">The timeout.</param>
            <param name="callback">The callback.</param>
            <param name="state">The state.</param>
            <returns>IAsyncResult.</returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:System.Activities.WorkflowApplication.BeginPersist(System.AsyncCallback,System.Object)">
            <summary>
            Begins the persist.
            </summary>
            <param name="callback">The callback.</param>
            <param name="state">The state.</param>
            <returns>IAsyncResult.</returns>
        </member>
        <member name="M:System.Activities.WorkflowApplication.BeginPersist(System.TimeSpan,System.AsyncCallback,System.Object)">
            <summary>
            Begins the persist.
            </summary>
            <param name="timeout">The timeout.</param>
            <param name="callback">The callback.</param>
            <param name="state">The state.</param>
            <returns>IAsyncResult.</returns>
        </member>
        <member name="M:System.Activities.WorkflowApplication.BeginResumeBookmark(System.String,System.Object,System.AsyncCallback,System.Object)">
            <summary>
            Begins the resume bookmark.
            </summary>
            <param name="bookmarkName">Name of the bookmark.</param>
            <param name="value">The value.</param>
            <param name="callback">The callback.</param>
            <param name="state">The state.</param>
            <returns>IAsyncResult.</returns>
        </member>
        <member name="M:System.Activities.WorkflowApplication.BeginResumeBookmark(System.String,System.Object,System.TimeSpan,System.AsyncCallback,System.Object)">
            <summary>
            Begins the resume bookmark.
            </summary>
            <param name="bookmarkName">Name of the bookmark.</param>
            <param name="value">The value.</param>
            <param name="timeout">The timeout.</param>
            <param name="callback">The callback.</param>
            <param name="state">The state.</param>
            <returns>IAsyncResult.</returns>
        </member>
        <member name="M:System.Activities.WorkflowApplication.BeginResumeBookmark(System.Activities.Bookmark,System.Object,System.AsyncCallback,System.Object)">
            <summary>
            Begins the resume bookmark.
            </summary>
            <param name="bookmark">The bookmark.</param>
            <param name="value">The value.</param>
            <param name="callback">The callback.</param>
            <param name="state">The state.</param>
            <returns>IAsyncResult.</returns>
        </member>
        <member name="M:System.Activities.WorkflowApplication.BeginResumeBookmark(System.Activities.Bookmark,System.Object,System.TimeSpan,System.AsyncCallback,System.Object)">
            <summary>
            Begins the resume bookmark.
            </summary>
            <param name="bookmark">The bookmark.</param>
            <param name="value">The value.</param>
            <param name="timeout">The timeout.</param>
            <param name="callback">The callback.</param>
            <param name="state">The state.</param>
            <returns>IAsyncResult.</returns>
        </member>
        <member name="M:System.Activities.WorkflowApplication.BeginRun(System.AsyncCallback,System.Object)">
            <summary>
            Begins the run.
            </summary>
            <param name="callback">The callback.</param>
            <param name="state">The state.</param>
            <returns>IAsyncResult.</returns>
        </member>
        <member name="M:System.Activities.WorkflowApplication.BeginRun(System.TimeSpan,System.AsyncCallback,System.Object)">
            <summary>
            Begins the run.
            </summary>
            <param name="timeout">The timeout.</param>
            <param name="callback">The callback.</param>
            <param name="state">The state.</param>
            <returns>IAsyncResult.</returns>
        </member>
        <member name="M:System.Activities.WorkflowApplication.BeginTerminate(System.String,System.AsyncCallback,System.Object)">
            <summary>
            Begins the terminate.
            </summary>
            <param name="reason">The reason.</param>
            <param name="callback">The callback.</param>
            <param name="state">The state.</param>
            <returns>IAsyncResult.</returns>
        </member>
        <member name="M:System.Activities.WorkflowApplication.BeginTerminate(System.Exception,System.AsyncCallback,System.Object)">
            <summary>
            Begins the terminate.
            </summary>
            <param name="reason">The reason.</param>
            <param name="callback">The callback.</param>
            <param name="state">The state.</param>
            <returns>IAsyncResult.</returns>
        </member>
        <member name="M:System.Activities.WorkflowApplication.BeginTerminate(System.String,System.TimeSpan,System.AsyncCallback,System.Object)">
            <summary>
            Begins the terminate.
            </summary>
            <param name="reason">The reason.</param>
            <param name="timeout">The timeout.</param>
            <param name="callback">The callback.</param>
            <param name="state">The state.</param>
            <returns>IAsyncResult.</returns>
        </member>
        <member name="M:System.Activities.WorkflowApplication.BeginTerminate(System.Exception,System.TimeSpan,System.AsyncCallback,System.Object)">
            <summary>
            Begins the terminate.
            </summary>
            <param name="reason">The reason.</param>
            <param name="timeout">The timeout.</param>
            <param name="callback">The callback.</param>
            <param name="state">The state.</param>
            <returns>IAsyncResult.</returns>
        </member>
        <member name="M:System.Activities.WorkflowApplication.BeginUnload(System.AsyncCallback,System.Object)">
            <summary>
            Begins the unload.
            </summary>
            <param name="callback">The callback.</param>
            <param name="state">The state.</param>
            <returns>IAsyncResult.</returns>
        </member>
        <member name="M:System.Activities.WorkflowApplication.BeginUnload(System.TimeSpan,System.AsyncCallback,System.Object)">
            <summary>
            Begins the unload.
            </summary>
            <param name="timeout">The timeout.</param>
            <param name="callback">The callback.</param>
            <param name="state">The state.</param>
            <returns>IAsyncResult.</returns>
        </member>
        <member name="M:System.Activities.WorkflowApplication.Cancel">
            <summary>
            Cancels this instance.
            </summary>
        </member>
        <member name="M:System.Activities.WorkflowApplication.Cancel(System.TimeSpan)">
            <summary>
            Cancels the specified timeout.
            </summary>
            <param name="timeout">The timeout.</param>
        </member>
        <member name="M:System.Activities.WorkflowApplication.EndCancel(System.IAsyncResult)">
            <summary>
            Ends the cancel.
            </summary>
            <param name="result">The result.</param>
        </member>
        <member name="M:System.Activities.WorkflowApplication.EndLoad(System.IAsyncResult)">
            <summary>
            Ends the load.
            </summary>
            <param name="result">The result.</param>
        </member>
        <member name="M:System.Activities.WorkflowApplication.EndLoadRunnableInstance(System.IAsyncResult)">
            <summary>
            Ends the load runnable instance.
            </summary>
            <param name="result">The result.</param>
        </member>
        <member name="M:System.Activities.WorkflowApplication.EndPersist(System.IAsyncResult)">
            <summary>
            Ends the persist.
            </summary>
            <param name="result">The result.</param>
        </member>
        <member name="M:System.Activities.WorkflowApplication.EndResumeBookmark(System.IAsyncResult)">
            <summary>
            Ends the resume bookmark.
            </summary>
            <param name="result">The result.</param>
            <returns>BookmarkResumptionResult.</returns>
        </member>
        <member name="M:System.Activities.WorkflowApplication.EndRun(System.IAsyncResult)">
            <summary>
            Ends the run.
            </summary>
            <param name="result">The result.</param>
        </member>
        <member name="M:System.Activities.WorkflowApplication.EndTerminate(System.IAsyncResult)">
            <summary>
            Ends the terminate.
            </summary>
            <param name="result">The result.</param>
        </member>
        <member name="M:System.Activities.WorkflowApplication.EndUnload(System.IAsyncResult)">
            <summary>
            Ends the unload.
            </summary>
            <param name="result">The result.</param>
        </member>
        <member name="M:System.Activities.WorkflowApplication.GetBookmarks">
            <summary>
            Gets the bookmarks.
            </summary>
            <returns>ReadOnlyCollection&lt;BookmarkInfo&gt;.</returns>
        </member>
        <member name="M:System.Activities.WorkflowApplication.GetBookmarks(System.TimeSpan)">
            <summary>
            Gets the bookmarks.
            </summary>
            <param name="timeout">The timeout.</param>
            <returns>ReadOnlyCollection&lt;BookmarkInfo&gt;.</returns>
        </member>
        <member name="M:System.Activities.WorkflowApplication.Load(System.Activities.WorkflowApplicationInstance)">
            <summary>
            Loads the specified instance.
            </summary>
            <param name="instance">The instance.</param>
        </member>
        <member name="M:System.Activities.WorkflowApplication.Load(System.Activities.WorkflowApplicationInstance,System.TimeSpan)">
            <summary>
            Loads the specified instance.
            </summary>
            <param name="instance">The instance.</param>
            <param name="timeout">The timeout.</param>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:System.Activities.WorkflowApplication.Load(System.Activities.WorkflowApplicationInstance,System.Activities.DynamicUpdate.DynamicUpdateMap)">
            <summary>
            Loads the specified instance.
            </summary>
            <param name="instance">The instance.</param>
            <param name="updateMap">The update map.</param>
        </member>
        <member name="M:System.Activities.WorkflowApplication.Load(System.Activities.WorkflowApplicationInstance,System.Activities.DynamicUpdate.DynamicUpdateMap,System.TimeSpan)">
            <summary>
            Loads the specified instance.
            </summary>
            <param name="instance">The instance.</param>
            <param name="updateMap">The update map.</param>
            <param name="timeout">The timeout.</param>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:System.Activities.WorkflowApplication.Load(System.Guid)">
            <summary>
            Loads the specified instance identifier.
            </summary>
            <param name="instanceId">The instance identifier.</param>
        </member>
        <member name="M:System.Activities.WorkflowApplication.Load(System.Guid,System.TimeSpan)">
            <summary>
            Loads the specified instance identifier.
            </summary>
            <param name="instanceId">The instance identifier.</param>
            <param name="timeout">The timeout.</param>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:System.Activities.WorkflowApplication.LoadRunnableInstance">
            <summary>
            Loads the runnable instance.
            </summary>
        </member>
        <member name="M:System.Activities.WorkflowApplication.LoadRunnableInstance(System.TimeSpan)">
            <summary>
            Loads the runnable instance.
            </summary>
            <param name="timeout">The timeout.</param>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:System.Activities.WorkflowApplication.Persist">
            <summary>
            Persists this instance.
            </summary>
        </member>
        <member name="M:System.Activities.WorkflowApplication.Persist(System.TimeSpan)">
            <summary>
            Persists the specified timeout.
            </summary>
            <param name="timeout">The timeout.</param>
        </member>
        <member name="M:System.Activities.WorkflowApplication.ResumeBookmark(System.String,System.Object)">
            <summary>
            Resumes the bookmark.
            </summary>
            <param name="bookmarkName">Name of the bookmark.</param>
            <param name="value">The value.</param>
            <returns>BookmarkResumptionResult.</returns>
        </member>
        <member name="M:System.Activities.WorkflowApplication.ResumeBookmark(System.Activities.Bookmark,System.Object)">
            <summary>
            Resumes the bookmark.
            </summary>
            <param name="bookmark">The bookmark.</param>
            <param name="value">The value.</param>
            <returns>BookmarkResumptionResult.</returns>
        </member>
        <member name="M:System.Activities.WorkflowApplication.ResumeBookmark(System.String,System.Object,System.TimeSpan)">
            <summary>
            Resumes the bookmark.
            </summary>
            <param name="bookmarkName">Name of the bookmark.</param>
            <param name="value">The value.</param>
            <param name="timeout">The timeout.</param>
            <returns>BookmarkResumptionResult.</returns>
        </member>
        <member name="M:System.Activities.WorkflowApplication.ResumeBookmark(System.Activities.Bookmark,System.Object,System.TimeSpan)">
            <summary>
            Resumes the bookmark.
            </summary>
            <param name="bookmark">The bookmark.</param>
            <param name="value">The value.</param>
            <param name="timeout">The timeout.</param>
            <returns>BookmarkResumptionResult.</returns>
        </member>
        <member name="M:System.Activities.WorkflowApplication.Run">
            <summary>
            Runs this instance.
            </summary>
        </member>
        <member name="M:System.Activities.WorkflowApplication.Run(System.TimeSpan)">
            <summary>
            Runs the specified timeout.
            </summary>
            <param name="timeout">The timeout.</param>
        </member>
        <member name="M:System.Activities.WorkflowApplication.Terminate(System.String)">
            <summary>
            Terminates the specified reason.
            </summary>
            <param name="reason">The reason.</param>
        </member>
        <member name="M:System.Activities.WorkflowApplication.Terminate(System.Exception)">
            <summary>
            Terminates the specified reason.
            </summary>
            <param name="reason">The reason.</param>
        </member>
        <member name="M:System.Activities.WorkflowApplication.Terminate(System.String,System.TimeSpan)">
            <summary>
            Terminates the specified reason.
            </summary>
            <param name="reason">The reason.</param>
            <param name="timeout">The timeout.</param>
        </member>
        <member name="M:System.Activities.WorkflowApplication.Terminate(System.Exception,System.TimeSpan)">
            <summary>
            Terminates the specified reason.
            </summary>
            <param name="reason">The reason.</param>
            <param name="timeout">The timeout.</param>
        </member>
        <member name="M:System.Activities.WorkflowApplication.Unload">
            <summary>
            Unloads this instance.
            </summary>
        </member>
        <member name="M:System.Activities.WorkflowApplication.Unload(System.TimeSpan)">
            <summary>
            Unloads the specified timeout.
            </summary>
            <param name="timeout">The timeout.</param>
        </member>
        <member name="M:System.Activities.WorkflowApplication.BeginDiscardInstance(System.Activities.WorkflowApplication.PersistenceManagerBase,System.TimeSpan,System.AsyncCallback,System.Object)">
            <summary>
            Begins the discard instance.
            </summary>
            <param name="persistanceManager">The persistance manager.</param>
            <param name="timeout">The timeout.</param>
            <param name="callback">The callback.</param>
            <param name="state">The state.</param>
            <returns>IAsyncResult.</returns>
        </member>
        <member name="M:System.Activities.WorkflowApplication.BeginInvoke(System.Activities.Activity,System.Collections.Generic.IDictionary{System.String,System.Object},System.Activities.Hosting.WorkflowInstanceExtensionManager,System.TimeSpan,System.Threading.SynchronizationContext,System.Activities.AsyncInvokeContext,System.AsyncCallback,System.Object)">
            <summary>
            Begins the invoke.
            </summary>
            <param name="activity">The activity.</param>
            <param name="inputs">The inputs.</param>
            <param name="extensions">The extensions.</param>
            <param name="timeout">The timeout.</param>
            <param name="syncContext">The synchronize context.</param>
            <param name="invokeContext">The invoke context.</param>
            <param name="callback">The callback.</param>
            <param name="state">The state.</param>
            <returns>IAsyncResult.</returns>
        </member>
        <member name="M:System.Activities.WorkflowApplication.DiscardInstance(System.Activities.WorkflowApplication.PersistenceManagerBase,System.TimeSpan)">
            <summary>
            Discards the instance.
            </summary>
            <param name="persistanceManager">The persistance manager.</param>
            <param name="timeout">The timeout.</param>
        </member>
        <member name="M:System.Activities.WorkflowApplication.EndDiscardInstance(System.IAsyncResult)">
            <summary>
            Ends the discard instance.
            </summary>
            <param name="asyncResult">The asynchronous result.</param>
        </member>
        <member name="M:System.Activities.WorkflowApplication.EndInvoke(System.IAsyncResult)">
            <summary>
            Ends the invoke.
            </summary>
            <param name="result">The result.</param>
            <returns>IDictionary&lt;System.String, System.Object&gt;.</returns>
        </member>
        <member name="M:System.Activities.WorkflowApplication.GetActivitiesBlockingUpdate(System.Activities.WorkflowApplicationInstance,System.Activities.DynamicUpdate.DynamicUpdateMap)">
            <summary>
            Gets the activities blocking update.
            </summary>
            <param name="instance">The instance.</param>
            <param name="updateMap">The update map.</param>
            <returns>IList&lt;ActivityBlockingUpdate&gt;.</returns>
        </member>
        <member name="M:System.Activities.WorkflowApplication.Invoke(System.Activities.Activity,System.Collections.Generic.IDictionary{System.String,System.Object},System.Activities.Hosting.WorkflowInstanceExtensionManager,System.TimeSpan)">
            <summary>
            Invokes the specified activity.
            </summary>
            <param name="activity">The activity.</param>
            <param name="inputs">The inputs.</param>
            <param name="extensions">The extensions.</param>
            <param name="timeout">The timeout.</param>
            <returns>IDictionary&lt;System.String, System.Object&gt;.</returns>
        </member>
        <member name="M:System.Activities.WorkflowApplication.GetBookmarksForIdle">
            <summary>
            Gets the bookmarks for idle.
            </summary>
            <returns>ReadOnlyCollection&lt;BookmarkInfo&gt;.</returns>
            <remarks>
            called from WorkflowApplicationIdleEventArgs
            </remarks>
        </member>
        <member name="M:System.Activities.WorkflowApplication.GetCompletionStatus(System.Exception@,System.Boolean@)">
            <summary>
            Gets the completion status.
            </summary>
            <param name="terminationException">The termination exception.</param>
            <param name="cancelled">if set to <c>true</c> [cancelled].</param>
            <remarks>
            used by WorkflowInvoker in the InvokeAsync case
            </remarks>
        </member>
        <member name="M:System.Activities.WorkflowApplication.InternalGetExtensions``1">
            <summary>
            Internals the get extensions.
            </summary>
            <typeparam name="T"></typeparam>
            <returns>IEnumerable&lt;T&gt;.</returns>
            <remarks>
            host-facing access to our cascading ExtensionManager resolution. Used by WorkflowApplicationEventArgs
            </remarks>
        </member>
        <member name="M:System.Activities.WorkflowApplication.OnBeginAssociateKeys(System.Collections.Generic.ICollection{System.Activities.Runtime.DurableInstancing.InstanceKey},System.AsyncCallback,System.Object)">
            <summary>
            Called when [begin associate keys].
            </summary>
            <param name="keys">The keys.</param>
            <param name="callback">The callback.</param>
            <param name="state">The state.</param>
            <returns>IAsyncResult.</returns>
        </member>
        <member name="M:System.Activities.WorkflowApplication.OnBeginPersist(System.AsyncCallback,System.Object)">
            <summary>
            Called when [begin persist].
            </summary>
            <param name="callback">The callback.</param>
            <param name="state">The state.</param>
            <returns>IAsyncResult.</returns>
        </member>
        <member name="M:System.Activities.WorkflowApplication.OnBeginResumeBookmark(System.Activities.Bookmark,System.Object,System.TimeSpan,System.AsyncCallback,System.Object)">
            <summary>
            Called when [begin resume bookmark].
            </summary>
            <param name="bookmark">The bookmark.</param>
            <param name="value">The value.</param>
            <param name="timeout">The timeout.</param>
            <param name="callback">The callback.</param>
            <param name="state">The state.</param>
            <returns>IAsyncResult.</returns>
        </member>
        <member name="M:System.Activities.WorkflowApplication.OnDisassociateKeys(System.Collections.Generic.ICollection{System.Activities.Runtime.DurableInstancing.InstanceKey})">
            <summary>
            Called when [disassociate keys].
            </summary>
            <param name="keys">The keys.</param>
        </member>
        <member name="M:System.Activities.WorkflowApplication.OnEndAssociateKeys(System.IAsyncResult)">
            <summary>
            Called when [end associate keys].
            </summary>
            <param name="result">The result.</param>
        </member>
        <member name="M:System.Activities.WorkflowApplication.OnEndPersist(System.IAsyncResult)">
            <summary>
            Called when [end persist].
            </summary>
            <param name="result">The result.</param>
        </member>
        <member name="M:System.Activities.WorkflowApplication.OnEndResumeBookmark(System.IAsyncResult)">
            <summary>
            Called when [end resume bookmark].
            </summary>
            <param name="result">The result.</param>
            <returns>BookmarkResumptionResult.</returns>
        </member>
        <member name="M:System.Activities.WorkflowApplication.OnRequestAbort(System.Exception)">
            <summary>
            Called when [request abort].
            </summary>
            <param name="reason">The reason.</param>
        </member>
        <member name="M:System.Activities.WorkflowApplication.OnNotifyPaused">
            <summary>
            Called when [notify paused].
            </summary>
        </member>
        <member name="M:System.Activities.WorkflowApplication.OnNotifyUnhandledException(System.Exception,System.Activities.Activity,System.String)">
            <summary>
            Called when [notify unhandled exception].
            </summary>
            <param name="exception">The exception.</param>
            <param name="exceptionSource">The exception source.</param>
            <param name="exceptionSourceInstanceId">The exception source instance identifier.</param>
        </member>
        <member name="M:System.Activities.WorkflowApplication.CompletePersistenceContext(System.Activities.WorkflowPersistenceContext,System.Transactions.TransactionScope,System.Boolean)">
            <summary>
            Completes the persistence context.
            </summary>
            <param name="context">The context.</param>
            <param name="scope">The scope.</param>
            <param name="success">if set to <c>true</c> [success].</param>
        </member>
        <member name="M:System.Activities.WorkflowApplication.CreateInstance(System.Activities.Activity,System.Collections.Generic.IDictionary{System.String,System.Object},System.Activities.Hosting.WorkflowInstanceExtensionManager,System.Threading.SynchronizationContext,System.Action)">
            <summary>
            Creates the instance.
            </summary>
            <param name="activity">The activity.</param>
            <param name="inputs">The inputs.</param>
            <param name="extensions">The extensions.</param>
            <param name="syncContext">The synchronize context.</param>
            <param name="invokeCompletedCallback">The invoke completed callback.</param>
            <returns>WorkflowApplication.</returns>
            <remarks>
            called on the Invoke path, this will go away when WorkflowInvoker implements
            WorkflowInstance directly
            </remarks>
        </member>
        <member name="M:System.Activities.WorkflowApplication.EventFrame(System.IAsyncResult)">
            <summary>
            Events the frame.
            </summary>
            <param name="result">The result.</param>
        </member>
        <member name="M:System.Activities.WorkflowApplication.ExecuteInstanceCommandWithTemporaryHandle(System.Activities.Runtime.DurableInstancing.InstanceStore,System.Activities.Runtime.DurableInstancing.InstancePersistenceCommand,System.TimeSpan)">
            <summary>
            Executes the instance command with temporary handle.
            </summary>
            <param name="instanceStore">The instance store.</param>
            <param name="command">The command.</param>
            <param name="timeout">The timeout.</param>
            <returns>InstanceView.</returns>
        </member>
        <member name="M:System.Activities.WorkflowApplication.ExtractRuntimeState(System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Activities.Runtime.DurableInstancing.InstanceValue},System.Guid)">
            <summary>
            Extracts the state of the runtime.
            </summary>
            <param name="values">The values.</param>
            <param name="instanceId">The instance identifier.</param>
            <returns>ActivityExecutor.</returns>
            <exception cref="T:System.Activities.Runtime.DurableInstancing.InstancePersistenceException"></exception>
        </member>
        <member name="M:System.Activities.WorkflowApplication.GetCreateOwnerCommand(System.Activities.WorkflowIdentity,System.Activities.WorkflowIdentityFilter)">
            <summary>
            Gets the create owner command.
            </summary>
            <param name="definitionIdentity">The definition identity.</param>
            <param name="identityFilter">The identity filter.</param>
            <returns>CreateWorkflowOwnerWithIdentityCommand.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">identityFilter</exception>
        </member>
        <member name="M:System.Activities.WorkflowApplication.InitializePersistenceContext(System.Boolean,System.Activities.Runtime.TimeoutHelper,System.Activities.WorkflowPersistenceContext@,System.Transactions.TransactionScope@)">
            <summary>
            Initializes the persistence context.
            </summary>
            <param name="isTransactionRequired">if set to <c>true</c> [is transaction required].</param>
            <param name="timeoutHelper">The timeout helper.</param>
            <param name="context">The context.</param>
            <param name="scope">The scope.</param>
        </member>
        <member name="M:System.Activities.WorkflowApplication.LoadCore(System.TimeSpan,System.Boolean,System.Activities.WorkflowApplication.PersistenceManager)">
            <summary>
            Loads the core.
            </summary>
            <param name="timeout">The timeout.</param>
            <param name="loadAny">if set to <c>true</c> [load any].</param>
            <param name="persistenceManager">The persistence manager.</param>
            <returns>WorkflowApplicationInstance.</returns>
        </member>
        <member name="M:System.Activities.WorkflowApplication.LoadValues(System.Activities.WorkflowApplication.PersistenceManager,System.Activities.Runtime.TimeoutHelper,System.Boolean)">
            <summary>
            Loads the values.
            </summary>
            <param name="persistenceManager">The persistence manager.</param>
            <param name="timeoutHelper">The timeout helper.</param>
            <param name="loadAny">if set to <c>true</c> [load any].</param>
            <returns>IDictionary&lt;XName, InstanceValue&gt;.</returns>
            <exception cref="T:System.Activities.Runtime.DurableInstancing.InstanceNotReadyException"></exception>
        </member>
        <member name="M:System.Activities.WorkflowApplication.OnWaitAsyncComplete(System.Object,System.TimeoutException)">
            <summary>
            Called when [wait asynchronous complete].
            </summary>
            <param name="state">The state.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:System.Activities.WorkflowApplication.RunInstance(System.Activities.WorkflowApplication)">
            <summary>
            Runs the instance.
            </summary>
            <param name="instance">The instance.</param>
        </member>
        <member name="M:System.Activities.WorkflowApplication.StartInvoke(System.Activities.Activity,System.Collections.Generic.IDictionary{System.String,System.Object},System.Activities.Hosting.WorkflowInstanceExtensionManager,System.Threading.SynchronizationContext,System.Action,System.Activities.AsyncInvokeContext)">
            <summary>
            Starts the invoke.
            </summary>
            <param name="activity">The activity.</param>
            <param name="inputs">The inputs.</param>
            <param name="extensions">The extensions.</param>
            <param name="syncContext">The synchronize context.</param>
            <param name="invokeCompletedCallback">The invoke completed callback.</param>
            <param name="invokeContext">The invoke context.</param>
            <returns>WorkflowApplication.</returns>
        </member>
        <member name="M:System.Activities.WorkflowApplication.UnlockInstance(System.Activities.WorkflowApplication.PersistenceManager,System.Activities.Runtime.TimeoutHelper)">
            <summary>
            Unlocks the instance.
            </summary>
            <param name="persistenceManager">The persistence manager.</param>
            <param name="timeoutHelper">The timeout helper.</param>
        </member>
        <member name="M:System.Activities.WorkflowApplication.Abort(System.String,System.Exception)">
            <summary>
            Aborts the specified reason.
            </summary>
            <param name="reason">The reason.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:System.Activities.WorkflowApplication.AbortDueToException(System.Exception)">
            <summary>
            Aborts the due to exception.
            </summary>
            <param name="e">The e.</param>
        </member>
        <member name="M:System.Activities.WorkflowApplication.AbortInstance(System.Exception,System.Boolean)">
            <summary>
            Aborts the instance.
            </summary>
            <param name="reason">The reason.</param>
            <param name="isWorkflowThread">if set to <c>true</c> [is workflow thread].</param>
        </member>
        <member name="M:System.Activities.WorkflowApplication.AbortPersistence">
            <summary>
            Aborts the persistence.
            </summary>
        </member>
        <member name="M:System.Activities.WorkflowApplication.AddToPending(System.Activities.WorkflowApplication.InstanceOperation,System.Boolean)">
            <summary>
            Adds to pending.
            </summary>
            <param name="operation">The operation.</param>
            <param name="push">if set to <c>true</c> [push].</param>
        </member>
        <member name="M:System.Activities.WorkflowApplication.AreBookmarksInvalid(System.Activities.BookmarkResumptionResult@)">
            <summary>
            Ares the bookmarks invalid.
            </summary>
            <param name="result">The result.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:System.Activities.WorkflowApplication.BeginInternalPersist(System.Activities.WorkflowApplication.PersistenceOperation,System.TimeSpan,System.Boolean,System.AsyncCallback,System.Object)">
            <summary>
            Begins the internal persist.
            </summary>
            <param name="operation">The operation.</param>
            <param name="timeout">The timeout.</param>
            <param name="isInternalPersist">if set to <c>true</c> [is internal persist].</param>
            <param name="callback">The callback.</param>
            <param name="state">The state.</param>
            <returns>IAsyncResult.</returns>
        </member>
        <member name="M:System.Activities.WorkflowApplication.BeginInternalRun(System.TimeSpan,System.Boolean,System.AsyncCallback,System.Object)">
            <summary>
            Begins the internal run.
            </summary>
            <param name="timeout">The timeout.</param>
            <param name="isUserRun">if set to <c>true</c> [is user run].</param>
            <param name="callback">The callback.</param>
            <param name="state">The state.</param>
            <returns>IAsyncResult.</returns>
        </member>
        <member name="M:System.Activities.WorkflowApplication.CancelCore">
            <summary>
            called from the sync and async paths
            </summary>
        </member>
        <member name="M:System.Activities.WorkflowApplication.CreatePersistenceManager">
            <summary>
            Creates the persistence manager.
            </summary>
        </member>
        <member name="M:System.Activities.WorkflowApplication.DecrementPendingUnenqueud">
            <summary>
            Decrements the pending unenqueud.
            </summary>
        </member>
        <member name="M:System.Activities.WorkflowApplication.EndInternalPersist(System.IAsyncResult)">
            <summary>
            Ends the internal persist.
            </summary>
            <param name="result">The result.</param>
        </member>
        <member name="M:System.Activities.WorkflowApplication.Enqueue(System.Activities.WorkflowApplication.InstanceOperation)">
            <summary>
            Enqueues the specified operation.
            </summary>
            <param name="operation">The operation.</param>
        </member>
        <member name="M:System.Activities.WorkflowApplication.Enqueue(System.Activities.WorkflowApplication.InstanceOperation,System.Boolean)">
            <summary>
            Enqueues the specified operation.
            </summary>
            <param name="operation">The operation.</param>
            <param name="push">if set to <c>true</c> [push].</param>
        </member>
        <member name="M:System.Activities.WorkflowApplication.EnsureInitialized">
            <summary>
            Ensures the initialized.
            </summary>
            <remarks>
            assumes that we're called under the pendingOperations lock
            </remarks>
        </member>
        <member name="M:System.Activities.WorkflowApplication.FindOperation">
            <summary>
            Finds the operation.
            </summary>
            <returns>InstanceOperation.</returns>
        </member>
        <member name="M:System.Activities.WorkflowApplication.ForceNotifyOperationComplete">
            <summary>
            Forces the notify operation complete.
            </summary>
            <remarks>
            For when we know that the operation is non-null and notified (like in async paths)
            </remarks>
        </member>
        <member name="M:System.Activities.WorkflowApplication.GetInstanceMetadata">
            <summary>
            Gets the instance metadata.
            </summary>
            <returns>IDictionary&lt;XName, InstanceValue&gt;.</returns>
        </member>
        <member name="M:System.Activities.WorkflowApplication.IncrementPendingUnenqueud">
            <summary>
            Increments the pending unenqueud.
            </summary>
        </member>
        <member name="M:System.Activities.WorkflowApplication.InternalRun(System.TimeSpan,System.Boolean)">
            <summary>
            Internals the run.
            </summary>
            <param name="timeout">The timeout.</param>
            <param name="isUserRun">if set to <c>true</c> [is user run].</param>
        </member>
        <member name="M:System.Activities.WorkflowApplication.IsLoadTransactionRequired">
            <summary>
            Determines whether [is load transaction required].
            </summary>
            <returns><c>true</c> if [is load transaction required]; otherwise, <c>false</c>.</returns>
            <remarks>
            shared by Load/BeginLoad
            </remarks>
        </member>
        <member name="M:System.Activities.WorkflowApplication.LoadCore(System.Activities.DynamicUpdate.DynamicUpdateMap,System.Activities.Runtime.TimeoutHelper,System.Boolean,System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Activities.Runtime.DurableInstancing.InstanceValue})">
            <summary>
            Loads the core.
            </summary>
            <param name="updateMap">The update map.</param>
            <param name="timeoutHelper">The timeout helper.</param>
            <param name="loadAny">if set to <c>true</c> [load any].</param>
            <param name="values">The values.</param>
            <exception cref="T:System.InvalidOperationException"></exception>
            <exception cref="T:System.OperationCanceledException"></exception>
        </member>
        <member name="M:System.Activities.WorkflowApplication.MarkUnloaded">
            <summary>
            Marks the unloaded.
            </summary>
        </member>
        <member name="M:System.Activities.WorkflowApplication.NotifyOperationComplete(System.Activities.WorkflowApplication.InstanceOperation)">
            <summary>
            Notifies the operation complete.
            </summary>
            <param name="operation">The operation.</param>
        </member>
        <member name="M:System.Activities.WorkflowApplication.OnAbortTrackingComplete(System.IAsyncResult)">
            <summary>
            Called when [abort tracking complete].
            </summary>
            <param name="result">The result.</param>
        </member>
        <member name="M:System.Activities.WorkflowApplication.OnAbortWaitComplete(System.Object,System.TimeoutException)">
            <summary>
            Called when [abort wait complete].
            </summary>
            <param name="state">The state.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:System.Activities.WorkflowApplication.PersistCore(System.Activities.Runtime.TimeoutHelper@,System.Activities.WorkflowApplication.PersistenceOperation)">
            <summary>
            Persists the core.
            </summary>
            <param name="timeoutHelper">The timeout helper.</param>
            <param name="operation">The operation.</param>
            <exception cref="T:System.OperationCanceledException"></exception>
        </member>
        <member name="M:System.Activities.WorkflowApplication.ProcessInstanceValues(System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Activities.Runtime.DurableInstancing.InstanceValue},System.Object@)">
            <summary>
            Processes the instance values.
            </summary>
            <param name="values">The values.</param>
            <param name="deserializedRuntimeState">State of the deserialized runtime.</param>
            <returns>PersistencePipeline.</returns>
            <remarks>
            shared by Load/BeginLoad
            </remarks>
        </member>
        <member name="M:System.Activities.WorkflowApplication.RaiseAborted(System.Exception)">
            <summary>
            Raises the aborted.
            </summary>
            <param name="reason">The reason.</param>
        </member>
        <member name="M:System.Activities.WorkflowApplication.RaiseIdleEvent">
            <summary>
            Raises the idle event.
            </summary>
            <returns><c>true</c> if successful, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:System.Activities.WorkflowApplication.Remove(System.Activities.WorkflowApplication.InstanceOperation)">
            <summary>
            Removes the specified operation.
            </summary>
            <param name="operation">The operation.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:System.Activities.WorkflowApplication.ResumeBookmarkCore(System.Activities.Bookmark,System.Object)">
            <summary>
            Resumes the bookmark core.
            </summary>
            <param name="bookmark">The bookmark.</param>
            <param name="value">The value.</param>
            <returns>BookmarkResumptionResult.</returns>
        </member>
        <member name="M:System.Activities.WorkflowApplication.RunCore">
            <summary>
            Runs the core.
            </summary>
        </member>
        <member name="M:System.Activities.WorkflowApplication.ScheduleTrackAndRaiseAborted(System.Exception)">
            <summary>
            Schedules the track and raise aborted.
            </summary>
            <param name="reason">The reason.</param>
        </member>
        <member name="M:System.Activities.WorkflowApplication.SetPersistenceManager(System.Activities.WorkflowApplication.PersistenceManager)">
            <summary>
            Sets the persistence manager.
            </summary>
            <param name="newManager">The new manager.</param>
            <remarks>
            shared by Load(WorkflowApplicationInstance)/BeginLoad*
            </remarks>
        </member>
        <member name="M:System.Activities.WorkflowApplication.ShouldRaiseComplete(System.Activities.Hosting.WorkflowInstanceState)">
            <summary>
            Shoulds the raise complete.
            </summary>
            <param name="state">The state.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:System.Activities.WorkflowApplication.TerminateCore(System.Exception)">
            <summary>
            Terminates the core.
            </summary>
            <param name="reason">The reason.</param>
        </member>
        <member name="M:System.Activities.WorkflowApplication.ThrowIfAborted">
            <summary>
            Throws if aborted.
            </summary>
            <exception cref="T:System.Activities.WorkflowApplicationAbortedException"></exception>
        </member>
        <member name="M:System.Activities.WorkflowApplication.ThrowIfHandlerThread">
            <summary>
            Throws if handler thread.
            </summary>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:System.Activities.WorkflowApplication.ThrowIfMulticast(System.Delegate)">
            <summary>
            Throws if multicast.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:System.Activities.WorkflowApplication.ThrowIfNoInstanceStore">
            <summary>
            Throws if no instance store.
            </summary>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:System.Activities.WorkflowApplication.ThrowIfTerminatedOrCompleted">
            <summary>
            Throws if terminated or completed.
            </summary>
            <exception cref="T:System.Activities.WorkflowApplicationTerminatedException"></exception>
            <exception cref="T:System.Activities.WorkflowApplicationCompletedException"></exception>
        </member>
        <member name="M:System.Activities.WorkflowApplication.ThrowIfUnloaded">
            <summary>
            Throws if unloaded.
            </summary>
            <exception cref="T:System.Activities.WorkflowApplicationUnloadedException"></exception>
        </member>
        <member name="M:System.Activities.WorkflowApplication.TrackAndRaiseAborted(System.Object)">
            <summary>
            Tracks the and raise aborted.
            </summary>
            <param name="state">The state.</param>
            <remarks>
            This is only ever called from an appropriate thread (not the thread that called abort
            unless it was an internal abort). This method is called without the lock. We still
            provide single threaded guarantees to the Controller because:
            * No other call can ever enter the executor again once the state has switched to Aborted
            * If this was an internal abort then the thread was fast pathing its way out of the
            runtime and won't conflict
            </remarks>
        </member>
        <member name="M:System.Activities.WorkflowApplication.TrackPersistence(System.Activities.WorkflowApplication.PersistenceOperation)">
            <summary>
            Tracks the persistence.
            </summary>
            <param name="operation">The operation.</param>
        </member>
        <member name="M:System.Activities.WorkflowApplication.UpdateInstanceMetadata">
            <summary>
            Updates the instance metadata.
            </summary>
        </member>
        <member name="M:System.Activities.WorkflowApplication.ValidateStateForCancel">
            <summary>
            Validates the state for cancel.
            </summary>
        </member>
        <member name="M:System.Activities.WorkflowApplication.ValidateStateForGetAllBookmarks">
            <summary>
            Validates the state for get all bookmarks.
            </summary>
        </member>
        <member name="M:System.Activities.WorkflowApplication.ValidateStateForLoad">
            <summary>
            Validates the state for load.
            </summary>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:System.Activities.WorkflowApplication.ValidateStateForPersist">
            <summary>
            We only validate that we aren't aborted and no-op otherwise. This is because the//
            scenario for calling cancel is for it to be a best attempt from an unknown thread.// The
            less it throws the easier it is to author a host.
            </summary>
        </member>
        <member name="M:System.Activities.WorkflowApplication.ValidateStateForRun">
            <summary>
            Validates the state for run.
            </summary>
        </member>
        <member name="M:System.Activities.WorkflowApplication.ValidateStateForTerminate">
            <summary>
            Validates the state for terminate.
            </summary>
        </member>
        <member name="M:System.Activities.WorkflowApplication.ValidateStateForUnload">
            <summary>
            Validates the state for unload.
            </summary>
        </member>
        <member name="M:System.Activities.WorkflowApplication.WaitForTurn(System.Activities.WorkflowApplication.InstanceOperation,System.TimeSpan)">
            <summary>
            Waits for turn.
            </summary>
            <param name="operation">The operation.</param>
            <param name="timeout">The timeout.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:System.Activities.WorkflowApplication.WaitForTurnAsync(System.Activities.WorkflowApplication.InstanceOperation,System.TimeSpan,System.Action{System.Object,System.TimeoutException},System.Object)">
            <summary>
            Waits for turn asynchronous.
            </summary>
            <param name="operation">The operation.</param>
            <param name="timeout">The timeout.</param>
            <param name="callback">The callback.</param>
            <param name="state">The state.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:System.Activities.WorkflowApplication.WaitForTurnAsync(System.Activities.WorkflowApplication.InstanceOperation,System.Boolean,System.TimeSpan,System.Action{System.Object,System.TimeoutException},System.Object)">
            <summary>
            Waits for turn asynchronous.
            </summary>
            <param name="operation">The operation.</param>
            <param name="push">if set to <c>true</c> [push].</param>
            <param name="timeout">The timeout.</param>
            <param name="callback">The callback.</param>
            <param name="state">The state.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:System.Activities.WorkflowApplication.WaitForTurnNoEnqueue(System.Activities.WorkflowApplication.InstanceOperation,System.TimeSpan)">
            <summary>
            Waits for turn no enqueue.
            </summary>
            <param name="operation">The operation.</param>
            <param name="timeout">The timeout.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
            <exception cref="T:System.TimeoutException"></exception>
        </member>
        <member name="M:System.Activities.WorkflowApplication.WaitForTurnNoEnqueueAsync(System.Activities.WorkflowApplication.InstanceOperation,System.TimeSpan,System.Action{System.Object,System.TimeoutException},System.Object)">
            <summary>
            Waits for turn no enqueue asynchronous.
            </summary>
            <param name="operation">The operation.</param>
            <param name="timeout">The timeout.</param>
            <param name="callback">The callback.</param>
            <param name="state">The state.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:System.Activities.WorkflowApplication.InvokeAsyncResult">
            <summary>
            The InvokeAsyncResult class.
            Implements the <see cref="T:System.Activities.Runtime.AsyncResult" />
            </summary>
            <seealso cref="T:System.Activities.Runtime.AsyncResult" />
        </member>
        <member name="F:System.Activities.WorkflowApplication.InvokeAsyncResult.waitCompleteCallback">
            <summary>
            The wait complete callback
            </summary>
        </member>
        <member name="F:System.Activities.WorkflowApplication.InvokeAsyncResult.completionWaiter">
            <summary>
            The completion waiter
            </summary>
        </member>
        <member name="F:System.Activities.WorkflowApplication.InvokeAsyncResult.completionException">
            <summary>
            The completion exception
            </summary>
        </member>
        <member name="F:System.Activities.WorkflowApplication.InvokeAsyncResult.instance">
            <summary>
            The instance
            </summary>
        </member>
        <member name="F:System.Activities.WorkflowApplication.InvokeAsyncResult.outputs">
            <summary>
            The outputs
            </summary>
        </member>
        <member name="M:System.Activities.WorkflowApplication.InvokeAsyncResult.#ctor(System.Activities.Activity,System.Collections.Generic.IDictionary{System.String,System.Object},System.Activities.Hosting.WorkflowInstanceExtensionManager,System.TimeSpan,System.Threading.SynchronizationContext,System.Activities.AsyncInvokeContext,System.AsyncCallback,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Activities.WorkflowApplication.InvokeAsyncResult"/> class.
            </summary>
            <param name="activity">The activity.</param>
            <param name="inputs">The inputs.</param>
            <param name="extensions">The extensions.</param>
            <param name="timeout">The timeout.</param>
            <param name="syncContext">The synchronize context.</param>
            <param name="invokeContext">The invoke context.</param>
            <param name="callback">The callback.</param>
            <param name="state">The state.</param>
        </member>
        <member name="T:System.Activities.WorkflowApplication.PersistenceManagerBase">
            <summary>
            The PersistenceManagerBase class.
            </summary>
            <remarks>
            This is a thin shell of PersistenceManager functionality so that
            WorkflowApplicationInstance can hold onto a PM without exposing the entire persistence functionality
            </remarks>
        </member>
        <member name="P:System.Activities.WorkflowApplication.PersistenceManagerBase.InstanceId">
            <summary>
            Gets the instance identifier.
            </summary>
            <value>The instance identifier.</value>
        </member>
        <member name="P:System.Activities.WorkflowApplication.PersistenceManagerBase.InstanceStore">
            <summary>
            Gets the instance store.
            </summary>
            <value>The instance store.</value>
        </member>
        <member name="T:System.Activities.WorkflowApplication.PersistenceOperation">
            <summary>
            The PersistenceOperation enumeration.
            </summary>
        </member>
        <member name="F:System.Activities.WorkflowApplication.PersistenceOperation.Complete">
            <summary>
            The complete
            </summary>
        </member>
        <member name="F:System.Activities.WorkflowApplication.PersistenceOperation.Save">
            <summary>
            The save
            </summary>
        </member>
        <member name="F:System.Activities.WorkflowApplication.PersistenceOperation.Unload">
            <summary>
            The unload
            </summary>
        </member>
        <member name="T:System.Activities.WorkflowApplication.PumpBasedSynchronizationContext">
            <summary>
            this class is not a general purpose SyncContext and is only meant to work for workflow
            scenarios, where the scheduler ensures at most one work item pending. The scheduler
            ensures that Invoke must run before Post is called on a different thread.
            </summary>
        </member>
        <member name="T:System.Activities.WorkflowApplication.SynchronousSynchronizationContext">
            <summary>
            The SynchronousSynchronizationContext class.
            Implements the <see cref="T:System.Threading.SynchronizationContext" />
            </summary>
            <seealso cref="T:System.Threading.SynchronizationContext" />
        </member>
        <member name="F:System.Activities.WorkflowApplication.SynchronousSynchronizationContext.value">
            <summary>
            The value
            </summary>
        </member>
        <member name="M:System.Activities.WorkflowApplication.SynchronousSynchronizationContext.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:System.Activities.WorkflowApplication.SynchronousSynchronizationContext"/> class from being created.
            </summary>
        </member>
        <member name="P:System.Activities.WorkflowApplication.SynchronousSynchronizationContext.Value">
            <summary>
            Gets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="M:System.Activities.WorkflowApplication.SynchronousSynchronizationContext.Post(System.Threading.SendOrPostCallback,System.Object)">
            <summary>
            When overridden in a derived class, dispatches an asynchronous message to a synchronization context.
            </summary>
            <param name="d">The <see cref="T:System.Threading.SendOrPostCallback" /> delegate to call.</param>
            <param name="state">The object passed to the delegate.</param>
        </member>
        <member name="M:System.Activities.WorkflowApplication.SynchronousSynchronizationContext.Send(System.Threading.SendOrPostCallback,System.Object)">
            <summary>
            When overridden in a derived class, dispatches a synchronous message to a synchronization context.
            </summary>
            <param name="d">The <see cref="T:System.Threading.SendOrPostCallback" /> delegate to call.</param>
            <param name="state">The object passed to the delegate.</param>
        </member>
        <member name="T:System.Activities.WorkflowApplication.WorkflowApplicationState">
            <summary>
            The WorkflowApplicationState enumeration.
            </summary>
        </member>
        <member name="F:System.Activities.WorkflowApplication.WorkflowApplicationState.Paused">
            <summary>
            The paused
            </summary>
        </member>
        <member name="F:System.Activities.WorkflowApplication.WorkflowApplicationState.Runnable">
            <summary>
            The runnable
            </summary>
        </member>
        <member name="F:System.Activities.WorkflowApplication.WorkflowApplicationState.Unloaded">
            <summary>
            The unloaded
            </summary>
        </member>
        <member name="F:System.Activities.WorkflowApplication.WorkflowApplicationState.Aborted">
            <summary>
            The aborted
            </summary>
        </member>
        <member name="T:System.Activities.WorkflowDataContext">
            <summary>
            The WorkflowDataContext class. This class cannot be inherited.
            Implements the <see cref="T:System.ComponentModel.CustomTypeDescriptor" />
            Implements the <see cref="T:System.ComponentModel.INotifyPropertyChanged" />
            Implements the <see cref="T:System.IDisposable" />
            </summary>
            <seealso cref="T:System.ComponentModel.CustomTypeDescriptor" />
            <seealso cref="T:System.ComponentModel.INotifyPropertyChanged" />
            <seealso cref="T:System.IDisposable" />
        </member>
        <member name="F:System.Activities.WorkflowDataContext.executor">
            <summary>
            The executor
            </summary>
        </member>
        <member name="F:System.Activities.WorkflowDataContext.activityInstance">
            <summary>
            The activity instance
            </summary>
        </member>
        <member name="F:System.Activities.WorkflowDataContext.locationMapping">
            <summary>
            The location mapping
            </summary>
        </member>
        <member name="F:System.Activities.WorkflowDataContext.propertyChangedEventHandler">
            <summary>
            The property changed event handler
            </summary>
        </member>
        <member name="F:System.Activities.WorkflowDataContext.properties">
            <summary>
            The properties
            </summary>
        </member>
        <member name="F:System.Activities.WorkflowDataContext.cachedResolutionContext">
            <summary>
            The cached resolution context
            </summary>
        </member>
        <member name="M:System.Activities.WorkflowDataContext.#ctor(System.Activities.Runtime.ActivityExecutor,System.Activities.ActivityInstance,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Activities.WorkflowDataContext"/> class.
            </summary>
            <param name="executor">The executor.</param>
            <param name="activityInstance">The activity instance.</param>
            <param name="includeLocalVariables">if set to <c>true</c> [include local variables].</param>
        </member>
        <member name="P:System.Activities.WorkflowDataContext.IncludesLocalVariables">
            <summary>
            Gets or sets a value indicating whether [includes local variables].
            </summary>
            <value><c>true</c> if [includes local variables]; otherwise, <c>false</c>.</value>
        </member>
        <member name="E:System.Activities.WorkflowDataContext.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="P:System.Activities.WorkflowDataContext.ResolutionContext">
            <summary>
            Gets the resolution context.
            </summary>
            <value>The resolution context.</value>
            <remarks>We want our own cached ActivityContext rather than using this.executor.GetResolutionContext
            because there is no synchronization of access to the executor's cached object and access thru
            this WorkflowDataContext will not be done on the workflow runtime thread.</remarks>
        </member>
        <member name="P:System.Activities.WorkflowDataContext.PropertyChangedEventHandler">
            <summary>
            Gets the property changed event handler.
            </summary>
            <value>The property changed event handler.</value>
        </member>
        <member name="M:System.Activities.WorkflowDataContext.CreateProperties">
            <summary>
            Creates the properties.
            </summary>
            <returns>PropertyDescriptorCollection.</returns>
        </member>
        <member name="M:System.Activities.WorkflowDataContext.AddProperty(System.Activities.LocationReference,System.Collections.Generic.Dictionary{System.String,System.Object},System.Collections.Generic.List{System.Activities.WorkflowDataContext.PropertyDescriptorImpl})">
            <summary>
            Adds the property.
            </summary>
            <param name="reference">The reference.</param>
            <param name="names">The names.</param>
            <param name="propertyList">The property list.</param>
        </member>
        <member name="M:System.Activities.WorkflowDataContext.AddNotifyHandler(System.Activities.WorkflowDataContext.PropertyDescriptorImpl)">
            <summary>
            Adds the notify handler.
            </summary>
            <param name="property">The property.</param>
        </member>
        <member name="M:System.Activities.WorkflowDataContext.OnLocationChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Handles the <see cref="!:LocationChanged" /> event.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.ComponentModel.PropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:System.Activities.WorkflowDataContext.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:System.Activities.WorkflowDataContext.DisposeEnvironment">
            <summary>
            Disposes the environment.
            </summary>
            <remarks>We need a separate method here from Dispose(), because Dispose currently
            doesn't make the WDC uncallable, it just unhooks it from notifications.</remarks>
        </member>
        <member name="M:System.Activities.WorkflowDataContext.ThrowIfEnvironmentDisposed">
            <summary>
            Throws if environment disposed.
            </summary>
            <exception cref="T:System.ObjectDisposedException"></exception>
        </member>
        <member name="M:System.Activities.WorkflowDataContext.GetProperties">
            <summary>
            Returns a collection of property descriptors for the object represented by this type descriptor.
            </summary>
            <returns>A <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> containing the property descriptions for the object represented by this type descriptor. The default is <see cref="F:System.ComponentModel.PropertyDescriptorCollection.Empty" />.</returns>
        </member>
        <member name="T:System.Activities.WorkflowDataContext.PropertyDescriptorImpl">
            <summary>
            The PropertyDescriptorImpl class.
            Implements the <see cref="T:System.ComponentModel.PropertyDescriptor" />
            </summary>
            <seealso cref="T:System.ComponentModel.PropertyDescriptor" />
        </member>
        <member name="M:System.Activities.WorkflowDataContext.PropertyDescriptorImpl.#ctor(System.Activities.LocationReference)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Activities.WorkflowDataContext.PropertyDescriptorImpl"/> class.
            </summary>
            <param name="reference">The reference.</param>
        </member>
        <member name="P:System.Activities.WorkflowDataContext.PropertyDescriptorImpl.ComponentType">
            <summary>
            When overridden in a derived class, gets the type of the component this property is bound to.
            </summary>
            <value>The type of the component.</value>
        </member>
        <member name="P:System.Activities.WorkflowDataContext.PropertyDescriptorImpl.IsReadOnly">
            <summary>
            When overridden in a derived class, gets a value indicating whether this property is read-only.
            </summary>
            <value><c>true</c> if this instance is read only; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:System.Activities.WorkflowDataContext.PropertyDescriptorImpl.PropertyType">
            <summary>
            When overridden in a derived class, gets the type of the property.
            </summary>
            <value>The type of the property.</value>
        </member>
        <member name="P:System.Activities.WorkflowDataContext.PropertyDescriptorImpl.LocationReference">
            <summary>
            Gets the location reference.
            </summary>
            <value>The location reference.</value>
        </member>
        <member name="M:System.Activities.WorkflowDataContext.PropertyDescriptorImpl.CanResetValue(System.Object)">
            <summary>
            When overridden in a derived class, returns whether resetting an object changes its value.
            </summary>
            <param name="component">The component to test for reset capability.</param>
            <returns><see langword="true" /> if resetting the component changes its value; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:System.Activities.WorkflowDataContext.PropertyDescriptorImpl.GetValue(System.Object)">
            <summary>
            When overridden in a derived class, gets the current value of the property on a component.
            </summary>
            <param name="component">The component with the property for which to retrieve the value.</param>
            <returns>The value of a property for a given component.</returns>
        </member>
        <member name="M:System.Activities.WorkflowDataContext.PropertyDescriptorImpl.ResetValue(System.Object)">
            <summary>
            When overridden in a derived class, resets the value for this property of the component to the default value.
            </summary>
            <param name="component">The component with the property value that is to be reset to the default value.</param>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="M:System.Activities.WorkflowDataContext.PropertyDescriptorImpl.SetValue(System.Object,System.Object)">
            <summary>
            When overridden in a derived class, sets the value of the component to a different value.
            </summary>
            <param name="component">The component with the property value that is to be set.</param>
            <param name="value">The new value.</param>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="M:System.Activities.WorkflowDataContext.PropertyDescriptorImpl.ShouldSerializeValue(System.Object)">
            <summary>
            When overridden in a derived class, determines a value indicating whether the value of this property needs to be persisted.
            </summary>
            <param name="component">The component with the property to be examined for persistence.</param>
            <returns><see langword="true" /> if the property should be persisted; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="T:System.Activities.XamlIntegration.ActivityWithResultValueSerializer">
            <summary>
            The ActivityWithResultValueSerializer class. This class cannot be inherited. Implements the
            <see cref="T:Portable.Xaml.Markup.ValueSerializer" />
            </summary>
            <seealso cref="T:Portable.Xaml.Markup.ValueSerializer" />
        </member>
        <member name="M:System.Activities.XamlIntegration.ActivityWithResultValueSerializer.CanConvertToString(System.Object,Portable.Xaml.Markup.IValueSerializerContext)">
            <summary>
            Determines whether this instance [can convert to string] the specified value.
            </summary>
            <param name="value">The value.</param>
            <param name="context">The context.</param>
            <returns>
            <c>true</c> if this instance [can convert to string] the specified value; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:System.Activities.XamlIntegration.ActivityWithResultValueSerializer.ConvertToString(System.Object,Portable.Xaml.Markup.IValueSerializerContext)">
            <summary>
            Converts to string.
            </summary>
            <param name="value">The value.</param>
            <param name="context">The context.</param>
            <returns>System.String.</returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="T:System.Activities.XamlIntegration.DynamicUpdateMapConverter">
            <summary>
            The DynamicUpdateMapConverter class.
            Implements the <see cref="T:System.ComponentModel.TypeConverter" />
            </summary>
            <seealso cref="T:System.ComponentModel.TypeConverter" />
        </member>
        <member name="M:System.Activities.XamlIntegration.DynamicUpdateMapConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert the object to the specified type, using the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
            <param name="destinationType">A <see cref="T:System.Type" /> that represents the type you want to convert to.</param>
            <returns><see langword="true" /> if this converter can perform the conversion; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:System.Activities.XamlIntegration.DynamicUpdateMapConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type, using the specified context and culture information.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
            <param name="culture">A <see cref="T:System.Globalization.CultureInfo" />. If <see langword="null" /> is passed, the current culture is assumed.</param>
            <param name="value">The <see cref="T:System.Object" /> to convert.</param>
            <param name="destinationType">The <see cref="T:System.Type" /> to convert the <paramref name="value" /> parameter to.</param>
            <returns>An <see cref="T:System.Object" /> that represents the converted value.</returns>
        </member>
        <member name="T:Microsoft.VisualBasic.Activities.XamlIntegration.VisualBasicExpressionConverter.AssemblyCache">
            <summary>
            Static class used to cache assembly metadata.
            </summary>
            <remarks>
                <list type="bullet">
                    <item><description>
                    XmlnsMappings for static assemblies are not GC'd. In v4.0 we can assume that all static assemblies 
                    containing XmlnsDefinition attributes are non-collectible. The CLR will provide no public mechanism 
                    for unloading a static assembly or specifying that a static assembly is collectible. While there 
                    may be some small number of assemblies identified by the CLR as collectible, none will contain 
                    XmlnsDefinition attributes. Should the CLR provide a public mechanism for unloading a static assembly
                    or specifying that a static assembly is collectible, we should revisit this decision based on scenarios
                    that flow from these mechanisms.
                    </description></item>
                    <item><description>
                    XmlnsMappings for dynamic assemblies are not created. This is because the hosted Visual Basic compiler
                    does not support dynamic assembly references. Should support for dynamic assembly references be 
                    added to the Visual Basic compiler, we should strip away Assembly.IsDynamic checks from this class and
                    update the code ensure that VisualBasicImportReference instances are removed in a timely manner.
                    </description></item>
                </list>
            </remarks>
        </member>
        <member name="T:Microsoft.VisualBasic.Activities.XamlIntegration.VisualBasicExpressionConverter.XmlnsMapping">
            <summary>
            Struct used to cache XML Namespace mappings. 
            </summary>
        </member>
        <member name="T:CoreWf.Tracking.WorkflowInstanceUpdatedRecord">
            <summary>
            The WorkflowInstanceUpdatedRecord class. This class cannot be inherited.
            Implements the <see cref="T:System.Activities.Tracking.WorkflowInstanceRecord" />
            </summary>
            <seealso cref="T:System.Activities.Tracking.WorkflowInstanceRecord" />
        </member>
        <member name="M:CoreWf.Tracking.WorkflowInstanceUpdatedRecord.#ctor(System.Guid,System.String,System.Activities.WorkflowIdentity,System.Activities.WorkflowIdentity)">
            <summary>
            Initializes a new instance of the <see cref="T:CoreWf.Tracking.WorkflowInstanceUpdatedRecord"/> class.
            </summary>
            <param name="instanceId">The instance identifier.</param>
            <param name="activityDefinitionId">The activity definition identifier.</param>
            <param name="originalDefinitionIdentity">The original definition identity.</param>
            <param name="updatedDefinitionIdentity">The updated definition identity.</param>
        </member>
        <member name="M:CoreWf.Tracking.WorkflowInstanceUpdatedRecord.#ctor(System.Guid,System.String,System.Activities.WorkflowIdentity,System.Activities.WorkflowIdentity,System.Collections.Generic.IList{System.Activities.DynamicUpdate.ActivityBlockingUpdate})">
            <summary>
            Initializes a new instance of the <see cref="T:CoreWf.Tracking.WorkflowInstanceUpdatedRecord"/> class.
            </summary>
            <param name="instanceId">The instance identifier.</param>
            <param name="activityDefinitionId">The activity definition identifier.</param>
            <param name="originalDefinitionIdentity">The original definition identity.</param>
            <param name="updatedDefinitionIdentity">The updated definition identity.</param>
            <param name="blockingActivities">The blocking activities.</param>
        </member>
        <member name="M:CoreWf.Tracking.WorkflowInstanceUpdatedRecord.#ctor(System.Guid,System.Int64,System.String,System.Activities.WorkflowIdentity,System.Activities.WorkflowIdentity)">
            <summary>
            Initializes a new instance of the <see cref="T:CoreWf.Tracking.WorkflowInstanceUpdatedRecord"/> class.
            </summary>
            <param name="instanceId">The instance identifier.</param>
            <param name="recordNumber">The record number.</param>
            <param name="activityDefinitionId">The activity definition identifier.</param>
            <param name="originalDefinitionIdentity">The original definition identity.</param>
            <param name="updatedDefinitionIdentity">The updated definition identity.</param>
        </member>
        <member name="M:CoreWf.Tracking.WorkflowInstanceUpdatedRecord.#ctor(System.Guid,System.Int64,System.String,System.Activities.WorkflowIdentity,System.Activities.WorkflowIdentity,System.Collections.Generic.IList{System.Activities.DynamicUpdate.ActivityBlockingUpdate})">
            <summary>
            Initializes a new instance of the <see cref="T:CoreWf.Tracking.WorkflowInstanceUpdatedRecord"/> class.
            </summary>
            <param name="instanceId">The instance identifier.</param>
            <param name="recordNumber">The record number.</param>
            <param name="activityDefinitionId">The activity definition identifier.</param>
            <param name="originalDefinitionIdentity">The original definition identity.</param>
            <param name="updatedDefinitionIdentity">The updated definition identity.</param>
            <param name="blockingActivities">The blocking activities.</param>
        </member>
        <member name="M:CoreWf.Tracking.WorkflowInstanceUpdatedRecord.#ctor(CoreWf.Tracking.WorkflowInstanceUpdatedRecord)">
            <summary>
            Initializes a new instance of the <see cref="T:CoreWf.Tracking.WorkflowInstanceUpdatedRecord"/> class.
            </summary>
            <param name="record">The record.</param>
        </member>
        <member name="P:CoreWf.Tracking.WorkflowInstanceUpdatedRecord.OriginalDefinitionIdentity">
            <summary>
            Gets the original definition identity.
            </summary>
            <value>The original definition identity.</value>
        </member>
        <member name="P:CoreWf.Tracking.WorkflowInstanceUpdatedRecord.IsSuccessful">
            <summary>
            Gets a value indicating whether this instance is successful.
            </summary>
            <value><c>true</c> if this instance is successful; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CoreWf.Tracking.WorkflowInstanceUpdatedRecord.BlockingActivities">
            <summary>
            Gets the blocking activities.
            </summary>
            <value>The blocking activities.</value>
        </member>
        <member name="P:CoreWf.Tracking.WorkflowInstanceUpdatedRecord.SerializedOriginalDefinitionIdentity">
            <summary>
            Gets or sets the serialized original definition identity.
            </summary>
            <value>The serialized original definition identity.</value>
        </member>
        <member name="P:CoreWf.Tracking.WorkflowInstanceUpdatedRecord.SerializedBlockingActivities">
            <summary>
            Gets or sets the serialized blocking activities.
            </summary>
            <value>The serialized blocking activities.</value>
        </member>
        <member name="M:CoreWf.Tracking.WorkflowInstanceUpdatedRecord.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns>TrackingRecord.</returns>
        </member>
        <member name="M:CoreWf.Tracking.WorkflowInstanceUpdatedRecord.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="T:CoreWf.XamlIntegration.ObjectMatchInfoConverter">
            <summary>
            The ObjectMatchInfoConverter class.
            Implements the <see cref="T:System.ComponentModel.TypeConverter" />
            </summary>
            <seealso cref="T:System.ComponentModel.TypeConverter" />
        </member>
        <member name="M:CoreWf.XamlIntegration.ObjectMatchInfoConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert an object of the given type to the type of this converter, using the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
            <param name="sourceType">A <see cref="T:System.Type" /> that represents the type you want to convert from.</param>
            <returns><see langword="true" /> if this converter can perform the conversion; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:CoreWf.XamlIntegration.ObjectMatchInfoConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the given object to the type of this converter, using the specified context and culture information.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo" /> to use as the current culture.</param>
            <param name="value">The <see cref="T:System.Object" /> to convert.</param>
            <returns>An <see cref="T:System.Object" /> that represents the converted value.</returns>
        </member>
        <member name="M:CoreWf.XamlIntegration.ObjectMatchInfoConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert the object to the specified type, using the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
            <param name="destinationType">A <see cref="T:System.Type" /> that represents the type you want to convert to.</param>
            <returns><see langword="true" /> if this converter can perform the conversion; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:CoreWf.XamlIntegration.ObjectMatchInfoConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type, using the specified context and culture information.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
            <param name="culture">A <see cref="T:System.Globalization.CultureInfo" />. If <see langword="null" /> is passed, the current culture is assumed.</param>
            <param name="value">The <see cref="T:System.Object" /> to convert.</param>
            <param name="destinationType">The <see cref="T:System.Type" /> to convert the <paramref name="value" /> parameter to.</param>
            <returns>An <see cref="T:System.Object" /> that represents the converted value.</returns>
        </member>
    </members>
</doc>
